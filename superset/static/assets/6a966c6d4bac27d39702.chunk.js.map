{"version":3,"file":"6a966c6d4bac27d39702.chunk.js","mappings":"iHAsBO,IAAKA,EAiEN,SAAUC,EACdC,EACAC,GAEA,IACE,MAAMC,EAAQC,aAAaC,QAAQJ,GACnC,OAAc,OAAVE,EACKD,EAEFI,KAAKC,MAAMJ,E,CAClB,MACA,OAAOD,C,CAEX,CAiBM,SAAUG,EACdJ,EACAC,GAEA,OAAOF,EAA2BC,EAAKC,EACzC,CAEM,SAAUM,EACdP,EACAE,IAjBI,SAAqCF,EAAaE,GACtD,IACEC,aAAaI,QAAQP,EAAKK,KAAKG,UAAUN,G,CACzC,MACA,CAEJ,CAaEO,CAA2BT,EAAKE,EAClC,C,6CA3GA,SAAYJ,GAUVA,EAAA,cACAA,EAAA,oCACAA,EAAA,+BACAA,EAAA,mCACAA,EAAA,oCACAA,EAAA,4CACAA,EAAA,oDACAA,EAAA,gDACAA,EAAA,kDACAA,EAAA,sDAUAA,EAAA,8DACAA,EAAA,2DACAA,EAAA,mGACAA,EAAA,qEACAA,EAAA,qDACAA,EAAA,wEACAA,EAAA,+DACD,CApCD,CAAYA,IAAAA,EAAgB,I","sources":["webpack://superset/./src/utils/localStorageHelpers.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport { TableTab } from 'src/views/CRUD/types';\nimport { DashboardContextForExplore } from 'src/types/DashboardContextForExplore';\n\nexport enum LocalStorageKeys {\n  /**\n   * START LEGACY LOCAL STORAGE KEYS\n   *\n   * Do not follow the patterns here for key names. Keys should instead be namespaced to avoid\n   * collisions.\n   *\n   * TODO: Update all local storage keys to follow the new pattern. This is a breaking change,\n   * and therefore should be done in a major release.\n   */\n  Database = 'db',\n  ChartSplitSizes = 'chart_split_sizes',\n  ControlsWidth = 'controls_width',\n  DatasourceWidth = 'datasource_width',\n  IsDatapanelOpen = 'is_datapanel_open',\n  HomepageChartFilter = 'homepage_chart_filter',\n  HomepageDashboardFilter = 'homepage_dashboard_filter',\n  HomepageCollapseState = 'homepage_collapse_state',\n  HomepageActivityFilter = 'homepage_activity_filter',\n  DatasetnameSetSuccessful = 'datasetname_set_successful',\n  /** END LEGACY LOCAL STORAGE KEYS */\n\n  /**\n   * New local storage keys should be namespaced to avoid collisions. Keys should be named in the\n   * form [namespace]__[key].\n   *\n   * Example:\n   * sqllab__is_autocomplete_enabled\n   */\n  SqllabIsAutocompleteEnabled = 'sqllab__is_autocomplete_enabled',\n  SqllabIsRenderHtmlEnabled = 'sqllab__is_render_html_enabled',\n  ExploreDataTableOriginalFormattedTimeColumns = 'explore__data_table_original_formatted_time_columns',\n  DashboardCustomFilterBarWidths = 'dashboard__custom_filter_bar_widths',\n  DashboardExploreContext = 'dashboard__explore_context',\n  DashboardEditorShowOnlyMyCharts = 'dashboard__editor_show_only_my_charts',\n  CommonResizableSidebarWidths = 'common__resizable_sidebar_widths',\n}\n\nexport type LocalStorageValues = {\n  db: object | null;\n  chart_split_sizes: [number, number];\n  controls_width: number;\n  datasource_width: number;\n  is_datapanel_open: boolean;\n  homepage_chart_filter: TableTab;\n  homepage_dashboard_filter: TableTab;\n  homepage_collapse_state: string[];\n  datasetname_set_successful: boolean;\n  homepage_activity_filter: TableTab | null;\n  sqllab__is_autocomplete_enabled: boolean;\n  sqllab__is_render_html_enabled: boolean;\n  explore__data_table_original_formatted_time_columns: Record<string, string[]>;\n  dashboard__custom_filter_bar_widths: Record<string, number>;\n  dashboard__explore_context: Record<string, DashboardContextForExplore>;\n  dashboard__editor_show_only_my_charts: boolean;\n  common__resizable_sidebar_widths: Record<string, number>;\n};\n\n/*\n * This function should not be used directly, as it doesn't provide any type safety or any\n * guarantees that the globally namespaced localstorage key is correct.\n *\n * Instead, use getItem and setItem. Any legacy uses should be updated/migrated in future\n * Superset versions (as they may require breaking changes).\n * */\nexport function dangerouslyGetItemDoNotUse(\n  key: string,\n  defaultValue: any,\n): any {\n  try {\n    const value = localStorage.getItem(key);\n    if (value === null) {\n      return defaultValue;\n    }\n    return JSON.parse(value);\n  } catch {\n    return defaultValue;\n  }\n}\n\n/*\n * This function should not be used directly, as it doesn't provide any type safety or any\n * guarantees that the globally namespaced localstorage key is correct.\n *\n * Instead, use getItem and setItem. Any legacy uses should be updated/migrated in future\n * Superset versions (as they may require breaking changes).\n * */\nexport function dangerouslySetItemDoNotUse(key: string, value: any): void {\n  try {\n    localStorage.setItem(key, JSON.stringify(value));\n  } catch {\n    // Catch in case localStorage is unavailable\n  }\n}\n\nexport function getItem<K extends LocalStorageKeys>(\n  key: K,\n  defaultValue: LocalStorageValues[K],\n): LocalStorageValues[K] {\n  return dangerouslyGetItemDoNotUse(key, defaultValue);\n}\n\nexport function setItem<K extends LocalStorageKeys>(\n  key: K,\n  value: LocalStorageValues[K],\n): void {\n  dangerouslySetItemDoNotUse(key, value);\n}\n"],"names":["LocalStorageKeys","dangerouslyGetItemDoNotUse","key","defaultValue","value","localStorage","getItem","JSON","parse","setItem","stringify","dangerouslySetItemDoNotUse"],"sourceRoot":""}