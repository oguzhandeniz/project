{"version":3,"file":"f2d4fff031c8e6cc88a8.chunk.js","mappings":"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","sources":["webpack://superset/./src/explore/components/controls/TextAreaControl.jsx","webpack://superset/./src/components/CronPicker/CronPicker.tsx","webpack://superset/./src/components/TimezoneSelector/index.tsx","webpack://superset/./src/features/alerts/components/NumberInput.tsx","webpack://superset/./src/features/alerts/components/AlertReportCronScheduler.tsx","webpack://superset/./src/features/alerts/components/NotificationMethod.tsx","webpack://superset/./src/features/alerts/components/ValidatedPanelHeader.tsx","webpack://superset/./src/features/alerts/components/StyledPanel.tsx","webpack://superset/./src/features/alerts/buildErrorTooltipMessage.tsx","webpack://superset/./src/features/alerts/AlertReportModal.tsx","webpack://superset/./src/features/alerts/types.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { TextArea } from 'src/components/Input';\nimport { t, withTheme } from '@superset-ui/core';\n\nimport Button from 'src/components/Button';\nimport { TextAreaEditor } from 'src/components/AsyncAceEditor';\nimport ModalTrigger from 'src/components/ModalTrigger';\n\nimport ControlHeader from 'src/explore/components/ControlHeader';\n\nconst propTypes = {\n  name: PropTypes.string,\n  onChange: PropTypes.func,\n  initialValue: PropTypes.string,\n  height: PropTypes.number,\n  minLines: PropTypes.number,\n  maxLines: PropTypes.number,\n  offerEditInModal: PropTypes.bool,\n  language: PropTypes.oneOf([\n    null,\n    'json',\n    'html',\n    'sql',\n    'markdown',\n    'javascript',\n  ]),\n  aboveEditorSection: PropTypes.node,\n  readOnly: PropTypes.bool,\n  resize: PropTypes.oneOf([\n    null,\n    'block',\n    'both',\n    'horizontal',\n    'inline',\n    'none',\n    'vertical',\n  ]),\n  textAreaStyles: PropTypes.object,\n};\n\nconst defaultProps = {\n  onChange: () => {},\n  initialValue: '',\n  height: 250,\n  minLines: 3,\n  maxLines: 10,\n  offerEditInModal: true,\n  readOnly: false,\n  resize: null,\n  textAreaStyles: {},\n};\n\nclass TextAreaControl extends Component {\n  onControlChange(event) {\n    const { value } = event.target;\n    this.props.onChange(value);\n  }\n\n  onAreaEditorChange(value) {\n    this.props.onChange(value);\n  }\n\n  renderEditor(inModal = false) {\n    const minLines = inModal ? 40 : this.props.minLines || 12;\n    if (this.props.language) {\n      const style = {\n        border: `1px solid ${this.props.theme.colors.grayscale.light1}`,\n        minHeight: `${minLines}em`,\n        width: 'auto',\n        ...this.props.textAreaStyles,\n      };\n      if (this.props.resize) {\n        style.resize = this.props.resize;\n      }\n      if (this.props.readOnly) {\n        style.backgroundColor = '#f2f2f2';\n      }\n\n      return (\n        <TextAreaEditor\n          mode={this.props.language}\n          style={style}\n          minLines={minLines}\n          maxLines={inModal ? 1000 : this.props.maxLines}\n          editorProps={{ $blockScrolling: true }}\n          defaultValue={this.props.initialValue}\n          readOnly={this.props.readOnly}\n          key={this.props.name}\n          {...this.props}\n          onChange={this.onAreaEditorChange.bind(this)}\n        />\n      );\n    }\n    return (\n      <TextArea\n        placeholder={t('textarea')}\n        onChange={this.onControlChange.bind(this)}\n        defaultValue={this.props.initialValue}\n        disabled={this.props.readOnly}\n        style={{ height: this.props.height }}\n      />\n    );\n  }\n\n  renderModalBody() {\n    return (\n      <>\n        <div>{this.props.aboveEditorSection}</div>\n        {this.renderEditor(true)}\n      </>\n    );\n  }\n\n  render() {\n    const controlHeader = <ControlHeader {...this.props} />;\n    return (\n      <div>\n        {controlHeader}\n        {this.renderEditor()}\n        {this.props.offerEditInModal && (\n          <ModalTrigger\n            modalTitle={controlHeader}\n            triggerNode={\n              <Button buttonSize=\"small\" className=\"m-t-5\">\n                {t('Edit')} <strong>{this.props.language}</strong>{' '}\n                {t('in modal')}\n              </Button>\n            }\n            modalBody={this.renderModalBody(true)}\n            responsive\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nTextAreaControl.propTypes = propTypes;\nTextAreaControl.defaultProps = defaultProps;\n\nexport default withTheme(TextAreaControl);\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { ConfigProvider } from 'antd';\nimport { styled, t } from '@superset-ui/core';\nimport ReactCronPicker, { Locale, CronProps } from 'react-js-cron';\n\nexport * from 'react-js-cron';\n\nexport const LOCALE: Locale = {\n  everyText: t('every'),\n  emptyMonths: t('every month'),\n  emptyMonthDays: t('every day of the month'),\n  emptyMonthDaysShort: t('day of the month'),\n  emptyWeekDays: t('every day of the week'),\n  emptyWeekDaysShort: t('day of the week'),\n  emptyHours: t('every hour'),\n  emptyMinutes: t('every minute'),\n  emptyMinutesForHourPeriod: t('every'),\n  yearOption: t('year'),\n  monthOption: t('month'),\n  weekOption: t('week'),\n  dayOption: t('day'),\n  hourOption: t('hour'),\n  minuteOption: t('minute'),\n  rebootOption: t('reboot'),\n  prefixPeriod: t('Every'),\n  prefixMonths: t('in'),\n  prefixMonthDays: t('on'),\n  prefixWeekDays: t('on'),\n  prefixWeekDaysForMonthAndYearPeriod: t('or'),\n  prefixHours: t('at'),\n  prefixMinutes: t(':'),\n  prefixMinutesForHourPeriod: t('at'),\n  suffixMinutesForHourPeriod: t('minute(s)'),\n  errorInvalidCron: t('Invalid cron expression'),\n  clearButtonText: t('Clear'),\n  weekDays: [\n    // Order is important, the index will be used as value\n    t('Sunday'), // Sunday must always be first, it's \"0\"\n    t('Monday'),\n    t('Tuesday'),\n    t('Wednesday'),\n    t('Thursday'),\n    t('Friday'),\n    t('Saturday'),\n  ],\n  months: [\n    // Order is important, the index will be used as value\n    t('January'),\n    t('February'),\n    t('March'),\n    t('April'),\n    t('May'),\n    t('June'),\n    t('July'),\n    t('August'),\n    t('September'),\n    t('October'),\n    t('November'),\n    t('December'),\n  ],\n  // Order is important, the index will be used as value\n  altWeekDays: [\n    t('SUN'), // Sunday must always be first, it's \"0\"\n    t('MON'),\n    t('TUE'),\n    t('WED'),\n    t('THU'),\n    t('FRI'),\n    t('SAT'),\n  ],\n  // Order is important, the index will be used as value\n  altMonths: [\n    t('JAN'),\n    t('FEB'),\n    t('MAR'),\n    t('APR'),\n    t('MAY'),\n    t('JUN'),\n    t('JUL'),\n    t('AUG'),\n    t('SEP'),\n    t('OCT'),\n    t('NOV'),\n    t('DEC'),\n  ],\n};\n\nexport const CronPicker = styled((props: CronProps) => (\n  <ConfigProvider\n    getPopupContainer={trigger => trigger.parentElement as HTMLElement}\n  >\n    <ReactCronPicker locale={LOCALE} {...props} />\n  </ConfigProvider>\n))`\n  ${({ theme }) => `\n\n    /* Boilerplate styling for ReactCronPicker imported explicitly in GlobalStyles.tsx */\n\n    /* When year period is selected */\n\n    :has(.react-js-cron-months) {\n      display: grid !important;\n      grid-template-columns: repeat(2, 50%);\n      column-gap: ${theme.gridUnit}px;\n      row-gap: ${theme.gridUnit * 2}px;\n      div:has(.react-js-cron-hours) {\n        grid-column: span 2;\n        display: flex;\n        justify-content: space-between;\n        .react-js-cron-field {\n          width: 50%;\n        }\n      }\n    }\n\n    /* When month period is selected */\n\n    :not(:has(.react-js-cron-months)) {\n      display: grid;\n      grid-template-columns: repeat(2, 50%);\n      column-gap: ${theme.gridUnit}px;\n      row-gap: ${theme.gridUnit * 2}px;\n      .react-js-cron-period {\n        grid-column: span 2;\n      }\n      div:has(.react-js-cron-hours) {\n        grid-column: span 2;\n        display: flex;\n        justify-content: space-between;\n        .react-js-cron-field {\n          width: 50%;\n        }\n      }\n    }\n\n    /* When week period is selected */\n\n    :not(:has(.react-js-cron-month-days)) {\n      .react-js-cron-week-days {\n        grid-column: span 2;\n      }\n    }\n\n    /* For proper alignment of inputs and span elements */\n\n    :not(div:has(.react-js-cron-hours)) {\n      display: flex;\n      flex-wrap: nowrap;\n    }\n\n    div:has(.react-js-cron-hours) {\n      width: 100%;\n    }\n\n    .react-js-cron-minutes > span {\n      padding-left: ${theme.gridUnit}px;\n    }\n\n    /* Sizing of select container */\n\n    .react-js-cron-select.ant-select {\n      width: 100%;\n      .ant-select-selector {\n        flex-wrap: nowrap;\n      }\n    }\n\n    .react-js-cron-field {\n      width: 100%;\n      margin-bottom: 0px;\n      > span {\n        margin-left: 0px;\n      }\n    }\n\n    .react-js-cron-custom-select .ant-select-selection-placeholder {\n      flex: auto;\n      border-radius: ${theme.gridUnit}px;\n    }\n\n    .react-js-cron-custom-select .ant-select-selection-overflow-item {\n      align-self: center;\n    }\n\n    .react-js-cron-select > div:first-of-type,\n    .react-js-cron-custom-select {\n      border-radius: ${theme.gridUnit}px;\n    }\n  `}\n`;\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport { useEffect, useMemo } from 'react';\nimport moment from 'moment-timezone';\nimport { t } from '@superset-ui/core';\nimport { Select } from 'src/components';\n\nconst DEFAULT_TIMEZONE = {\n  name: 'GMT Standard Time',\n  value: 'Africa/Abidjan', // timezones are deduped by the first alphabetical value\n};\n\nconst MIN_SELECT_WIDTH = '400px';\n\nconst offsetsToName = {\n  '-300-240': ['Eastern Standard Time', 'Eastern Daylight Time'],\n  '-360-300': ['Central Standard Time', 'Central Daylight Time'],\n  '-420-360': ['Mountain Standard Time', 'Mountain Daylight Time'],\n  '-420-420': [\n    'Mountain Standard Time - Phoenix',\n    'Mountain Standard Time - Phoenix',\n  ],\n  '-480-420': ['Pacific Standard Time', 'Pacific Daylight Time'],\n  '-540-480': ['Alaska Standard Time', 'Alaska Daylight Time'],\n  '-600-600': ['Hawaii Standard Time', 'Hawaii Daylight Time'],\n  '60120': ['Central European Time', 'Central European Daylight Time'],\n  '00': [DEFAULT_TIMEZONE.name, DEFAULT_TIMEZONE.name],\n  '060': ['GMT Standard Time - London', 'British Summer Time'],\n};\n\nconst currentDate = moment();\nconst JANUARY = moment([2021, 1]);\nconst JULY = moment([2021, 7]);\n\nconst getOffsetKey = (name: string) =>\n  JANUARY.tz(name).utcOffset().toString() +\n  JULY.tz(name).utcOffset().toString();\n\nconst getTimezoneName = (name: string) => {\n  const offsets = getOffsetKey(name);\n  return (\n    (currentDate.tz(name).isDST()\n      ? offsetsToName[offsets]?.[1]\n      : offsetsToName[offsets]?.[0]) || name\n  );\n};\n\nconst ALL_ZONES = moment.tz\n  .countries()\n  .map(country => moment.tz.zonesForCountry(country, true))\n  .flat();\n\nconst TIMEZONES: moment.MomentZoneOffset[] = [];\nALL_ZONES.forEach(zone => {\n  if (\n    !TIMEZONES.find(\n      option => getOffsetKey(option.name) === getOffsetKey(zone.name),\n    )\n  ) {\n    TIMEZONES.push(zone); // dedupe zones by offsets\n  }\n});\n\nconst TIMEZONE_OPTIONS = TIMEZONES.map(zone => ({\n  label: `GMT ${moment\n    .tz(currentDate, zone.name)\n    .format('Z')} (${getTimezoneName(zone.name)})`,\n  value: zone.name,\n  offsets: getOffsetKey(zone.name),\n  timezoneName: zone.name,\n}));\n\nconst TIMEZONE_OPTIONS_SORT_COMPARATOR = (\n  a: (typeof TIMEZONE_OPTIONS)[number],\n  b: (typeof TIMEZONE_OPTIONS)[number],\n) =>\n  moment.tz(currentDate, a.timezoneName).utcOffset() -\n  moment.tz(currentDate, b.timezoneName).utcOffset();\n\n// pre-sort timezone options by time offset\nTIMEZONE_OPTIONS.sort(TIMEZONE_OPTIONS_SORT_COMPARATOR);\n\nconst matchTimezoneToOptions = (timezone: string) =>\n  TIMEZONE_OPTIONS.find(option => option.offsets === getOffsetKey(timezone))\n    ?.value || DEFAULT_TIMEZONE.value;\n\nexport type TimezoneSelectorProps = {\n  onTimezoneChange: (value: string) => void;\n  timezone?: string | null;\n  minWidth?: string;\n};\n\nexport default function TimezoneSelector({\n  onTimezoneChange,\n  timezone,\n  minWidth = MIN_SELECT_WIDTH, // smallest size for current values\n}: TimezoneSelectorProps) {\n  const validTimezone = useMemo(\n    () => matchTimezoneToOptions(timezone || moment.tz.guess()),\n    [timezone],\n  );\n\n  // force trigger a timezone update if provided `timezone` is not invalid\n  useEffect(() => {\n    if (timezone !== validTimezone) {\n      onTimezoneChange(validTimezone);\n    }\n  }, [validTimezone, onTimezoneChange, timezone]);\n\n  return (\n    <Select\n      ariaLabel={t('Timezone selector')}\n      css={{ minWidth }}\n      onChange={tz => onTimezoneChange(tz as string)}\n      value={validTimezone}\n      options={TIMEZONE_OPTIONS}\n      sortComparator={TIMEZONE_OPTIONS_SORT_COMPARATOR}\n    />\n  );\n}\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useState, ChangeEvent } from 'react';\n\ninterface NumberInputProps {\n  timeUnit: string;\n  min: number;\n  name: string;\n  value: string | number;\n  placeholder: string;\n  onChange: (event: ChangeEvent<HTMLInputElement>) => void;\n}\n\nexport default function NumberInput({\n  timeUnit,\n  min,\n  name,\n  value,\n  placeholder,\n  onChange,\n}: NumberInputProps) {\n  const [isFocused, setIsFocused] = useState<boolean>(false);\n\n  return (\n    <input\n      type=\"text\"\n      min={min}\n      name={name}\n      value={value ? `${value}${!isFocused ? ` ${timeUnit}` : ''}` : ''}\n      placeholder={placeholder}\n      onFocus={() => setIsFocused(true)}\n      onBlur={() => setIsFocused(false)}\n      onChange={onChange}\n    />\n  );\n}\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useState, useCallback, useRef, FocusEvent, FC } from 'react';\n\nimport { t, useTheme } from '@superset-ui/core';\n\nimport { AntdInput, Select } from 'src/components';\nimport { Input } from 'src/components/Input';\nimport { CronPicker, CronError } from 'src/components/CronPicker';\nimport { StyledInputContainer } from '../AlertReportModal';\n\nexport interface AlertReportCronSchedulerProps {\n  value: string;\n  onChange: (change: string) => any;\n}\n\nenum ScheduleType {\n  Picker = 'picker',\n  Input = 'input',\n}\n\nconst SCHEDULE_TYPE_OPTIONS = [\n  {\n    label: t('Recurring (every)'),\n    value: ScheduleType.Picker,\n  },\n  {\n    label: t('CRON Schedule'),\n    value: ScheduleType.Input,\n  },\n];\n\nexport const AlertReportCronScheduler: FC<AlertReportCronSchedulerProps> = ({\n  value,\n  onChange,\n}) => {\n  const theme = useTheme();\n  const inputRef = useRef<AntdInput>(null);\n  const [scheduleFormat, setScheduleFormat] = useState<ScheduleType>(\n    ScheduleType.Picker,\n  );\n\n  const customSetValue = useCallback(\n    (newValue: string) => {\n      onChange(newValue);\n      inputRef.current?.setValue(newValue);\n    },\n    [inputRef, onChange],\n  );\n\n  const handleBlur = useCallback(\n    (event: FocusEvent<HTMLInputElement>) => {\n      onChange(event.target.value);\n    },\n    [onChange],\n  );\n\n  const handlePressEnter = useCallback(() => {\n    onChange(inputRef.current?.input.value || '');\n  }, [onChange]);\n\n  const [error, onError] = useState<CronError>();\n\n  return (\n    <>\n      <StyledInputContainer>\n        <div className=\"control-label\">\n          {t('Schedule type')}\n          <span className=\"required\">*</span>\n        </div>\n        <div className=\"input-container\">\n          <Select\n            ariaLabel={t('Schedule type')}\n            placeholder={t('Schedule type')}\n            onChange={(e: ScheduleType) => {\n              setScheduleFormat(e);\n            }}\n            value={scheduleFormat}\n            options={SCHEDULE_TYPE_OPTIONS}\n          />\n        </div>\n      </StyledInputContainer>\n\n      <StyledInputContainer data-test=\"input-content\" className=\"styled-input\">\n        <div className=\"control-label\">\n          {t('Schedule')}\n          <span className=\"required\">*</span>\n        </div>\n        {scheduleFormat === ScheduleType.Input && (\n          <Input\n            type=\"text\"\n            name=\"crontab\"\n            ref={inputRef}\n            style={error ? { borderColor: theme.colors.error.base } : {}}\n            placeholder={t('CRON expression')}\n            value={value}\n            onBlur={handleBlur}\n            onChange={e => customSetValue(e.target.value)}\n            onPressEnter={handlePressEnter}\n          />\n        )}\n        {scheduleFormat === ScheduleType.Picker && (\n          <CronPicker\n            clearButton={false}\n            value={value}\n            setValue={customSetValue}\n            displayError={scheduleFormat === ScheduleType.Picker}\n            onError={onError}\n          />\n        )}\n      </StyledInputContainer>\n    </>\n  );\n};\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {\n  FunctionComponent,\n  useState,\n  ChangeEvent,\n  useEffect,\n  useMemo,\n} from 'react';\nimport rison from 'rison';\n\nimport {\n  FeatureFlag,\n  JsonResponse,\n  SupersetClient,\n  isFeatureEnabled,\n  styled,\n  t,\n  useTheme,\n} from '@superset-ui/core';\nimport { Select } from 'src/components';\nimport Icons from 'src/components/Icons';\nimport {\n  NotificationMethodOption,\n  NotificationSetting,\n  SlackChannel,\n} from '../types';\nimport { StyledInputContainer } from '../AlertReportModal';\n\nconst StyledNotificationMethod = styled.div`\n  ${({ theme }) => `\n    margin-bottom: ${theme.gridUnit * 3}px;\n\n    .input-container {\n      textarea {\n        height: auto;\n      }\n\n      &.error {\n        input {\n          border-color: ${theme.colors.error.base};\n        }\n      }\n\n      .helper {\n        margin-top: ${theme.gridUnit * 2}px;\n        font-size: ${theme.typography.sizes.s}px;\n        color: ${theme.colors.grayscale.base};\n      }\n    }\n\n    .inline-container {\n      margin-bottom: ${theme.gridUnit * 2}px;\n\n      > div {\n        margin: 0px;\n      }\n\n      .delete-button {\n        margin-left: ${theme.gridUnit * 2}px;\n        padding-top: ${theme.gridUnit}px;\n      }\n    }\n\n    .ghost-button {\n      color: ${theme.colors.primary.dark1};\n      display: inline-flex;\n      align-items: center;\n      font-size: ${theme.typography.sizes.s}px;\n      cursor: pointer;\n      margin-top: ${theme.gridUnit}px;\n\n      .icon {\n        width: ${theme.gridUnit * 3}px;\n        height: ${theme.gridUnit * 3}px;\n        font-size: ${theme.typography.sizes.s}px;\n        margin-right: ${theme.gridUnit}px;\n      }\n    }\n\n    .ghost-button + .ghost-button {\n      margin-left: ${theme.gridUnit * 4}px;\n    }\n\n    .ghost-button:first-child[style*='none'] + .ghost-button {\n      margin-left: 0px; /* Remove margin when the first button is hidden */\n    }\n  `}\n`;\n\nconst TRANSLATIONS = {\n  EMAIL_CC_NAME: t('CC recipients'),\n  EMAIL_BCC_NAME: t('BCC recipients'),\n  EMAIL_SUBJECT_NAME: t('Email subject name (optional)'),\n  EMAIL_SUBJECT_ERROR_TEXT: t(\n    'Please enter valid text. Spaces alone are not permitted.',\n  ),\n};\n\ninterface NotificationMethodProps {\n  setting?: NotificationSetting | null;\n  index: number;\n  onUpdate?: (index: number, updatedSetting: NotificationSetting) => void;\n  onRemove?: (index: number) => void;\n  onInputChange?: (\n    event: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>,\n  ) => void;\n  email_subject: string;\n  defaultSubject: string;\n  setErrorSubject: (hasError: boolean) => void;\n}\n\nexport const mapSlackValues = ({\n  method,\n  recipientValue,\n  slackOptions,\n}: {\n  method: string;\n  recipientValue: string;\n  slackOptions: { label: string; value: string }[];\n}) => {\n  const prop = method === NotificationMethodOption.SlackV2 ? 'value' : 'label';\n  return recipientValue\n    .split(',')\n    .map(recipient =>\n      slackOptions.find(\n        option =>\n          option[prop].trim().toLowerCase() === recipient.trim().toLowerCase(),\n      ),\n    )\n    .filter(val => !!val) as { label: string; value: string }[];\n};\n\nexport const mapChannelsToOptions = (result: SlackChannel[]) => {\n  const publicChannels: SlackChannel[] = [];\n  const privateChannels: SlackChannel[] = [];\n\n  result.forEach(channel => {\n    if (channel.is_private) {\n      privateChannels.push(channel);\n    } else {\n      publicChannels.push(channel);\n    }\n  });\n\n  return [\n    {\n      label: 'Public Channels',\n      options: publicChannels.map((channel: SlackChannel) => ({\n        label: `${channel.name} ${\n          channel.is_member ? '' : t('(Bot not in channel)')\n        }`,\n        value: channel.id,\n        key: channel.id,\n      })),\n      key: 'public',\n    },\n    {\n      label: t('Private Channels (Bot in channel)'),\n      options: privateChannels.map((channel: SlackChannel) => ({\n        label: channel.name,\n        value: channel.id,\n        key: channel.id,\n      })),\n      key: 'private',\n    },\n  ];\n};\n\ntype SlackOptionsType = {\n  label: string;\n  options: { label: string; value: string }[];\n}[];\n\nexport const NotificationMethod: FunctionComponent<NotificationMethodProps> = ({\n  setting = null,\n  index,\n  onUpdate,\n  onRemove,\n  onInputChange,\n  email_subject,\n  defaultSubject,\n  setErrorSubject,\n}) => {\n  const { method, recipients, cc, bcc, options } = setting || {};\n  const [recipientValue, setRecipientValue] = useState<string>(\n    recipients || '',\n  );\n  const [slackRecipients, setSlackRecipients] = useState<\n    { label: string; value: string }[]\n  >([]);\n  const [error, setError] = useState(false);\n  const [ccVisible, setCcVisible] = useState<boolean>(!!cc);\n  const [bccVisible, setBccVisible] = useState<boolean>(!!bcc);\n  const [ccValue, setCcValue] = useState<string>(cc || '');\n  const [bccValue, setBccValue] = useState<string>(bcc || '');\n  const theme = useTheme();\n  const [slackOptions, setSlackOptions] = useState<SlackOptionsType>([\n    {\n      label: '',\n      options: [],\n    },\n  ]);\n\n  const [useSlackV1, setUseSlackV1] = useState<boolean>(false);\n\n  const onMethodChange = (selected: {\n    label: string;\n    value: NotificationMethodOption;\n  }) => {\n    // Since we're swapping the method, reset the recipients\n    setRecipientValue('');\n    setCcValue('');\n    setBccValue('');\n\n    if (onUpdate && setting) {\n      const updatedSetting = {\n        ...setting,\n        method: selected.value,\n        recipients: '',\n        cc: '',\n        bcc: '',\n      };\n\n      onUpdate(index, updatedSetting);\n    }\n  };\n\n  const fetchSlackChannels = async ({\n    searchString = '',\n    types = [],\n    exactMatch = false,\n  }: {\n    searchString?: string | undefined;\n    types?: string[];\n    exactMatch?: boolean | undefined;\n  } = {}): Promise<JsonResponse> => {\n    const queryString = rison.encode({ searchString, types, exactMatch });\n    const endpoint = `/api/v1/report/slack_channels/?q=${queryString}`;\n    return SupersetClient.get({ endpoint });\n  };\n\n  useEffect(() => {\n    if (\n      method &&\n      [\n        NotificationMethodOption.Slack,\n        NotificationMethodOption.SlackV2,\n      ].includes(method) &&\n      !slackOptions[0]?.options.length\n    ) {\n      fetchSlackChannels({ types: ['public_channel', 'private_channel'] })\n        .then(({ json }) => {\n          const { result } = json;\n\n          const options: SlackOptionsType = mapChannelsToOptions(result);\n\n          setSlackOptions(options);\n\n          if (isFeatureEnabled(FeatureFlag.AlertReportSlackV2)) {\n            // map existing ids to names for display\n            // or names to ids if slack v1\n            const [publicOptions, privateOptions] = options;\n\n            setSlackRecipients(\n              mapSlackValues({\n                method,\n                recipientValue,\n                slackOptions: [\n                  ...publicOptions.options,\n                  ...privateOptions.options,\n                ],\n              }),\n            );\n            if (method === NotificationMethodOption.Slack) {\n              onMethodChange({\n                label: NotificationMethodOption.Slack,\n                value: NotificationMethodOption.SlackV2,\n              });\n            }\n          }\n        })\n        .catch(() => {\n          // Fallback to slack v1 if slack v2 is not compatible\n          setUseSlackV1(true);\n        });\n    }\n  }, [method]);\n\n  const methodOptions = useMemo(\n    () =>\n      (options || [])\n        .filter(\n          method =>\n            (isFeatureEnabled(FeatureFlag.AlertReportSlackV2) &&\n              !useSlackV1 &&\n              method === NotificationMethodOption.SlackV2) ||\n            ((!isFeatureEnabled(FeatureFlag.AlertReportSlackV2) ||\n              useSlackV1) &&\n              method === NotificationMethodOption.Slack) ||\n            method === NotificationMethodOption.Email,\n        )\n        .map(method => ({\n          label:\n            method === NotificationMethodOption.SlackV2\n              ? NotificationMethodOption.Slack\n              : method,\n          value: method,\n        })),\n    [options],\n  );\n\n  if (!setting) {\n    return null;\n  }\n\n  const onRecipientsChange = (event: ChangeEvent<HTMLTextAreaElement>) => {\n    const { target } = event;\n\n    setRecipientValue(target.value);\n\n    if (onUpdate) {\n      const updatedSetting = {\n        ...setting,\n        recipients: target.value,\n      };\n\n      onUpdate(index, updatedSetting);\n    }\n  };\n\n  const onSlackRecipientsChange = (\n    recipients: { label: string; value: string }[],\n  ) => {\n    setSlackRecipients(recipients);\n\n    if (onUpdate) {\n      const updatedSetting = {\n        ...setting,\n        recipients: recipients?.map(obj => obj.value).join(','),\n      };\n\n      onUpdate(index, updatedSetting);\n    }\n  };\n\n  const onSubjectChange = (\n    event: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>,\n  ) => {\n    const { value } = event.target;\n\n    if (onInputChange) {\n      onInputChange(event);\n    }\n\n    const hasError = value.length > 0 && value.trim().length === 0;\n    setError(hasError);\n    if (setErrorSubject) {\n      setErrorSubject(hasError);\n    }\n  };\n\n  const onCcChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    const { target } = event;\n\n    setCcValue(target.value);\n\n    if (onUpdate) {\n      const updatedSetting = {\n        ...setting,\n        cc: target.value,\n      };\n\n      onUpdate(index, updatedSetting);\n    }\n  };\n\n  const onBccChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    const { target } = event;\n\n    setBccValue(target.value);\n\n    if (onUpdate) {\n      const updatedSetting = {\n        ...setting,\n        bcc: target.value,\n      };\n\n      onUpdate(index, updatedSetting);\n    }\n  };\n\n  // Set recipients\n  if (!!recipients && recipientValue !== recipients) {\n    setRecipientValue(recipients);\n  }\n\n  if (!!cc && ccValue !== cc) {\n    setCcValue(cc);\n  }\n\n  if (!!bcc && bccValue !== bcc) {\n    setBccValue(bcc);\n  }\n\n  return (\n    <StyledNotificationMethod>\n      <div className=\"inline-container\">\n        <StyledInputContainer>\n          <div className=\"control-label\">{t('Notification Method')}</div>\n          <div className=\"input-container\">\n            <Select\n              ariaLabel={t('Delivery method')}\n              data-test=\"select-delivery-method\"\n              labelInValue\n              onChange={onMethodChange}\n              placeholder={t('Select Delivery Method')}\n              options={methodOptions}\n              showSearch\n              value={methodOptions.find(option => option.value === method)}\n            />\n            {index !== 0 && !!onRemove ? (\n              <span\n                role=\"button\"\n                tabIndex={0}\n                className=\"delete-button\"\n                onClick={() => onRemove(index)}\n              >\n                <Icons.Trash iconColor={theme.colors.grayscale.base} />\n              </span>\n            ) : null}\n          </div>\n        </StyledInputContainer>\n      </div>\n      {method !== undefined ? (\n        <>\n          <div className=\"inline-container\">\n            <StyledInputContainer>\n              {method === NotificationMethodOption.Email ? (\n                <>\n                  <div className=\"control-label\">\n                    {TRANSLATIONS.EMAIL_SUBJECT_NAME}\n                  </div>\n                  <div className={`input-container ${error ? 'error' : ''}`}>\n                    <input\n                      type=\"text\"\n                      name=\"email_subject\"\n                      value={email_subject}\n                      placeholder={defaultSubject}\n                      onChange={onSubjectChange}\n                    />\n                  </div>\n                  {error && (\n                    <div\n                      style={{\n                        color: theme.colors.error.base,\n                        fontSize: theme.gridUnit * 3,\n                      }}\n                    >\n                      {TRANSLATIONS.EMAIL_SUBJECT_ERROR_TEXT}\n                    </div>\n                  )}\n                </>\n              ) : null}\n            </StyledInputContainer>\n          </div>\n          <div className=\"inline-container\">\n            <StyledInputContainer>\n              <div className=\"control-label\">\n                {t(\n                  '%s recipients',\n                  method === NotificationMethodOption.SlackV2\n                    ? NotificationMethodOption.Slack\n                    : method,\n                )}\n                <span className=\"required\">*</span>\n              </div>\n              <div>\n                {[\n                  NotificationMethodOption.Email,\n                  NotificationMethodOption.Slack,\n                ].includes(method) ? (\n                  <>\n                    <div className=\"input-container\">\n                      <textarea\n                        name=\"To\"\n                        data-test=\"recipients\"\n                        value={recipientValue}\n                        onChange={onRecipientsChange}\n                      />\n                    </div>\n                    <div className=\"input-container\">\n                      <div className=\"helper\">\n                        {t('Recipients are separated by \",\" or \";\"')}\n                      </div>\n                    </div>\n                  </>\n                ) : (\n                  // for SlackV2\n                  <Select\n                    ariaLabel={t('Select channels')}\n                    mode=\"multiple\"\n                    name=\"recipients\"\n                    value={slackRecipients}\n                    options={slackOptions}\n                    onChange={onSlackRecipientsChange}\n                    allowClear\n                    data-test=\"recipients\"\n                    allowSelectAll={false}\n                    labelInValue\n                  />\n                )}\n              </div>\n            </StyledInputContainer>\n          </div>\n          {method === NotificationMethodOption.Email && (\n            <StyledInputContainer>\n              {/* Render \"CC\" input field if ccVisible is true */}\n              {ccVisible && (\n                <>\n                  <div className=\"control-label\">\n                    {TRANSLATIONS.EMAIL_CC_NAME}\n                  </div>\n                  <div className=\"input-container\">\n                    <textarea\n                      name=\"CC\"\n                      data-test=\"cc\"\n                      value={ccValue}\n                      onChange={onCcChange}\n                    />\n                  </div>\n                  <div className=\"input-container\">\n                    <div className=\"helper\">\n                      {t('Recipients are separated by \",\" or \";\"')}\n                    </div>\n                  </div>\n                </>\n              )}\n              {/* Render \"BCC\" input field if bccVisible is true */}\n              {bccVisible && (\n                <>\n                  <div className=\"control-label\">\n                    {TRANSLATIONS.EMAIL_BCC_NAME}\n                  </div>\n                  <div className=\"input-container\">\n                    <textarea\n                      name=\"BCC\"\n                      data-test=\"bcc\"\n                      value={bccValue}\n                      onChange={onBccChange}\n                    />\n                  </div>\n                  <div className=\"input-container\">\n                    <div className=\"helper\">\n                      {t('Recipients are separated by \",\" or \";\"')}\n                    </div>\n                  </div>\n                </>\n              )}\n              {/* New buttons container */}\n              <div className=\"ghost-button\">\n                <span\n                  className=\"ghost-button\"\n                  role=\"button\"\n                  tabIndex={0}\n                  onClick={() => setCcVisible(true)}\n                  style={{ display: ccVisible ? 'none' : 'inline-flex' }}\n                >\n                  <Icons.Email className=\"icon\" />\n                  {t('Add CC Recipients')}\n                </span>\n                <span\n                  className=\"ghost-button\"\n                  role=\"button\"\n                  tabIndex={0}\n                  onClick={() => setBccVisible(true)}\n                  style={{ display: bccVisible ? 'none' : 'inline-flex' }}\n                >\n                  <Icons.Email className=\"icon\" />\n                  {t('Add BCC Recipients')}\n                </span>\n              </div>\n            </StyledInputContainer>\n          )}\n        </>\n      ) : null}\n    </StyledNotificationMethod>\n  );\n};\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { t } from '@superset-ui/core';\nimport { CheckCircleOutlined } from '@ant-design/icons';\n\nconst ValidatedPanelHeader = ({\n  title,\n  subtitle,\n  validateCheckStatus,\n  testId,\n}: {\n  title: string;\n  subtitle: string;\n  validateCheckStatus: boolean;\n  testId?: string;\n}): JSX.Element => {\n  const checkmark = <CheckCircleOutlined />;\n\n  return (\n    <div className=\"collapse-panel-header\">\n      <div className=\"collapse-panel-title\" data-test={testId}>\n        <span>{t(title)}</span>\n        {validateCheckStatus ? (\n          <span className=\"validation-checkmark\">{checkmark}</span>\n        ) : (\n          <span className=\"collapse-panel-asterisk\">{' *'}</span>\n        )}\n      </div>\n      <p className=\"collapse-panel-subtitle\">\n        {subtitle ? t(subtitle) : undefined}\n      </p>\n    </div>\n  );\n};\n\nexport default ValidatedPanelHeader;\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { ReactNode } from 'react';\nimport { css, SupersetTheme } from '@superset-ui/core';\nimport { Collapse as AntdCollapse } from 'antd';\nimport { CollapsePanelProps } from 'antd/lib/collapse';\n\nconst anticonHeight = 12;\nconst antdPanelStyles = (theme: SupersetTheme) => css`\n  .ant-collapse-header {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: flex-start;\n    padding: 0px ${theme.gridUnit * 4}px;\n\n    .anticon.anticon-right.ant-collapse-arrow {\n      padding: 0;\n      top: calc(50% - ${anticonHeight / 2}px);\n    }\n\n    .collapse-panel-title {\n      font-size: ${theme.gridUnit * 4}px;\n      font-weight: ${theme.typography.weights.bold};\n      line-height: 130%;\n    }\n\n    .collapse-panel-subtitle {\n      color: ${theme.colors.grayscale.base};\n      font-size: ${theme.typography.sizes.s}px;\n      font-weight: ${theme.typography.weights.normal};\n      line-height: 150%;\n      margin-bottom: 0;\n      padding-top: ${theme.gridUnit}px;\n    }\n\n    .collapse-panel-asterisk {\n      color: var(--semantic-error-base, ${theme.colors.warning.dark1});\n    }\n    .validation-checkmark {\n      width: ${theme.gridUnit * 4}px;\n      height: ${theme.gridUnit * 4}px;\n      margin-left: ${theme.gridUnit}px;\n      color: ${theme.colors.success.base};\n    }\n  }\n`;\n\nexport interface PanelProps extends CollapsePanelProps {\n  children?: ReactNode;\n}\nconst StyledPanel = (props: PanelProps) => (\n  <AntdCollapse.Panel\n    css={(theme: SupersetTheme) => antdPanelStyles(theme)}\n    {...props}\n  />\n);\n\nexport default StyledPanel;\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { styled } from '@superset-ui/core';\nimport { ValidationObject } from './types';\nimport { TRANSLATIONS } from './AlertReportModal';\n\nconst StyledList = styled.ul`\n  margin-left: ${({ theme }) => theme.gridUnit * 2}px;\n  padding-inline-start: ${({ theme }) => theme.gridUnit * 3}px;\n`;\n\nexport const buildErrorTooltipMessage = (\n  validationStatus: ValidationObject,\n) => {\n  const sectionErrors: string[] = [];\n  Object.values(validationStatus).forEach(section => {\n    if (section.hasErrors) {\n      const sectionTitle = `${section.name}: `;\n      sectionErrors.push(sectionTitle + section.errors.join(', '));\n    }\n  });\n  return (\n    <div>\n      {TRANSLATIONS.ERROR_TOOLTIP_MESSAGE}\n      <StyledList>\n        {sectionErrors.map(err => (\n          <li key={err}>{err}</li>\n        ))}\n      </StyledList>\n    </div>\n  );\n};\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {\n  ChangeEvent,\n  FunctionComponent,\n  useState,\n  useEffect,\n  useMemo,\n  useCallback,\n  ReactNode,\n} from 'react';\n\nimport {\n  css,\n  isFeatureEnabled,\n  FeatureFlag,\n  styled,\n  SupersetClient,\n  SupersetTheme,\n  t,\n} from '@superset-ui/core';\nimport rison from 'rison';\nimport { useSingleViewResource } from 'src/views/CRUD/hooks';\n\nimport { InputNumber } from 'src/components/Input';\nimport { Switch } from 'src/components/Switch';\nimport Modal from 'src/components/Modal';\nimport Collapse from 'src/components/Collapse';\nimport TimezoneSelector from 'src/components/TimezoneSelector';\nimport { propertyComparator } from 'src/components/Select/utils';\nimport withToasts from 'src/components/MessageToasts/withToasts';\nimport Owner from 'src/types/Owner';\nimport { AntdCheckbox, AsyncSelect, Select } from 'src/components';\nimport TextAreaControl from 'src/explore/components/controls/TextAreaControl';\nimport { useCommonConf } from 'src/features/databases/state';\nimport { InfoTooltipWithTrigger } from '@superset-ui/chart-controls';\nimport {\n  NotificationMethodOption,\n  NotificationSetting,\n  AlertObject,\n  ChartObject,\n  DashboardObject,\n  DatabaseObject,\n  MetaObject,\n  Operator,\n  Recipient,\n  AlertsReportsConfig,\n  ValidationObject,\n  Sections,\n} from 'src/features/alerts/types';\nimport { useSelector } from 'react-redux';\nimport { UserWithPermissionsAndRoles } from 'src/types/bootstrapTypes';\nimport NumberInput from './components/NumberInput';\nimport { AlertReportCronScheduler } from './components/AlertReportCronScheduler';\nimport { NotificationMethod } from './components/NotificationMethod';\nimport ValidatedPanelHeader from './components/ValidatedPanelHeader';\nimport StyledPanel from './components/StyledPanel';\nimport { buildErrorTooltipMessage } from './buildErrorTooltipMessage';\n\nconst TIMEOUT_MIN = 1;\nconst TEXT_BASED_VISUALIZATION_TYPES = [\n  'pivot_table_v2',\n  'table',\n  'paired_ttest',\n];\n\ntype SelectValue = {\n  value: string;\n  label: string;\n};\n\nexport interface AlertReportModalProps {\n  addSuccessToast: (msg: string) => void;\n  addDangerToast: (msg: string) => void;\n  alert?: AlertObject | null;\n  isReport?: boolean;\n  onAdd?: (alert?: AlertObject) => void;\n  onHide: () => void;\n  show: boolean;\n}\n\nconst DEFAULT_WORKING_TIMEOUT = 3600;\nconst DEFAULT_CRON_VALUE = '0 0 * * *'; // every day\nconst DEFAULT_RETENTION = 90;\nconst EMAIL_REGEX = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n\nconst DEFAULT_NOTIFICATION_METHODS: NotificationMethodOption[] = [\n  NotificationMethodOption.Email,\n];\nconst DEFAULT_NOTIFICATION_FORMAT = 'PNG';\nconst CONDITIONS = [\n  {\n    label: t('< (Smaller than)'),\n    value: '<',\n  },\n  {\n    label: t('> (Larger than)'),\n    value: '>',\n  },\n  {\n    label: t('<= (Smaller or equal)'),\n    value: '<=',\n  },\n  {\n    label: t('>= (Larger or equal)'),\n    value: '>=',\n  },\n  {\n    label: t('== (Is equal)'),\n    value: '==',\n  },\n  {\n    label: t('!= (Is not equal)'),\n    value: '!=',\n  },\n  {\n    label: t('Not null'),\n    value: 'not null',\n  },\n];\n\nconst RETENTION_OPTIONS = [\n  {\n    label: t('None'),\n    value: 0,\n  },\n  {\n    label: t('30 days'),\n    value: 30,\n  },\n  {\n    label: t('60 days'),\n    value: 60,\n  },\n  {\n    label: t('90 days'),\n    value: 90,\n  },\n];\n\nconst CONTENT_TYPE_OPTIONS = [\n  {\n    label: t('Dashboard'),\n    value: 'dashboard',\n  },\n  {\n    label: t('Chart'),\n    value: 'chart',\n  },\n];\nconst FORMAT_OPTIONS = {\n  pdf: {\n    label: t('Send as PDF'),\n    value: 'PDF',\n  },\n  png: {\n    label: t('Send as PNG'),\n    value: 'PNG',\n  },\n  csv: {\n    label: t('Send as CSV'),\n    value: 'CSV',\n  },\n  txt: {\n    label: t('Send as text'),\n    value: 'TEXT',\n  },\n};\n\n// Apply to final text input components of each collapse panel\nconst noMarginBottom = css`\n  margin-bottom: 0;\n`;\n\n/*\nHeight of modal body defined here, total width defined at component invocation as antd prop.\n */\nconst StyledModal = styled(Modal)`\n  .ant-modal-body {\n    height: 720px;\n  }\n\n  .control-label {\n    margin-top: ${({ theme }) => theme.gridUnit}px;\n  }\n\n  .ant-collapse > .ant-collapse-item {\n    border-bottom: none;\n  }\n\n  .inline-container {\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    &.wrap {\n      flex-wrap: wrap;\n    }\n\n    > div {\n      flex: 1 1 auto;\n    }\n  }\n`;\n\nconst StyledSwitchContainer = styled.div`\n  display: flex;\n  align-items: center;\n  margin-top: 10px;\n\n  .switch-label {\n    margin-left: 10px;\n  }\n`;\n\nexport const StyledInputContainer = styled.div`\n  ${({ theme }) => css`\n    flex: 1;\n    margin-top: 0px;\n    margin-bottom: ${theme.gridUnit * 4}px;\n\n    input::-webkit-outer-spin-button,\n    input::-webkit-inner-spin-button {\n      -webkit-appearance: none;\n      margin: 0;\n    }\n    input[type='number'] {\n      -moz-appearance: textfield;\n    }\n\n    .helper {\n      display: block;\n      color: ${theme.colors.grayscale.base};\n      font-size: ${theme.typography.sizes.s}px;\n      padding: ${theme.gridUnit}px 0;\n      text-align: left;\n    }\n\n    .required {\n      margin-left: ${theme.gridUnit / 2}px;\n      color: ${theme.colors.error.base};\n    }\n\n    .input-container {\n      display: flex;\n      align-items: center;\n\n      > div {\n        width: 100%;\n      }\n\n      label {\n        display: flex;\n        margin-right: ${theme.gridUnit * 2}px;\n      }\n\n      i {\n        margin: 0 ${theme.gridUnit}px;\n      }\n    }\n\n    input,\n    textarea {\n      flex: 1 1 auto;\n    }\n\n    input[disabled] {\n      color: ${theme.colors.grayscale.base};\n    }\n\n    textarea {\n      height: 300px;\n      resize: none;\n    }\n\n    input::placeholder,\n    textarea::placeholder {\n      color: ${theme.colors.grayscale.light1};\n    }\n\n    textarea,\n    input[type='text'],\n    input[type='number'] {\n      padding: ${theme.gridUnit}px ${theme.gridUnit * 2}px;\n      border-style: none;\n      border: 1px solid ${theme.colors.grayscale.light2};\n      border-radius: ${theme.gridUnit}px;\n\n      &[name='description'] {\n        flex: 1 1 auto;\n      }\n    }\n\n    .input-label {\n      margin-left: 10px;\n    }\n  `}\n`;\n\nconst StyledCheckbox = styled(AntdCheckbox)`\n  margin-top: ${({ theme }) => theme.gridUnit * 0}px;\n`;\n\nconst StyledTooltip = styled(InfoTooltipWithTrigger)`\n  margin-left: ${({ theme }) => theme.gridUnit}px;\n`;\n\n// Notification Method components\nconst StyledNotificationAddButton = styled.div`\n  ${({ theme }) => css`\n    color: ${theme.colors.primary.dark1};\n    cursor: pointer;\n\n    i {\n      margin-right: ${theme.gridUnit * 2}px;\n    }\n\n    &.disabled {\n      color: ${theme.colors.grayscale.light1};\n      cursor: default;\n    }\n  `}\n`;\n\nconst StyledNotificationMethodWrapper = styled.div`\n  .inline-container .input-container {\n    margin-left: 0;\n  }\n`;\n\nconst inputSpacer = (theme: SupersetTheme) => css`\n  margin-right: ${theme.gridUnit * 3}px;\n`;\n\ntype NotificationAddStatus = 'active' | 'disabled' | 'hidden';\n\ninterface NotificationMethodAddProps {\n  status: NotificationAddStatus;\n  onClick: () => void;\n}\n\nexport const TRANSLATIONS = {\n  // Panel titles\n  GENERAL_TITLE: t('General information'),\n  ALERT_CONDITION_TITLE: t('Alert condition'),\n  ALERT_CONTENTS_TITLE: t('Alert contents'),\n  REPORT_CONTENTS_TITLE: t('Report contents'),\n  SCHEDULE_TITLE: t('Schedule'),\n  NOTIFICATION_TITLE: t('Notification method'),\n  // Error text\n  NAME_ERROR_TEXT: t('name'),\n  OWNERS_ERROR_TEXT: t('owners'),\n  CONTENT_ERROR_TEXT: t('content type'),\n  DATABASE_ERROR_TEXT: t('database'),\n  SQL_ERROR_TEXT: t('sql'),\n  ALERT_CONDITION_ERROR_TEXT: t('alert condition'),\n  CRONTAB_ERROR_TEXT: t('crontab'),\n  WORKING_TIMEOUT_ERROR_TEXT: t('working timeout'),\n  RECIPIENTS_ERROR_TEXT: t('recipients'),\n  EMAIL_SUBJECT_ERROR_TEXT: t('email subject'),\n  EMAIL_VALIDATION_ERROR_TEXT: t('invalid email'),\n  ERROR_TOOLTIP_MESSAGE: t(\n    'Not all required fields are complete. Please provide the following:',\n  ),\n};\n\nconst NotificationMethodAdd: FunctionComponent<NotificationMethodAddProps> = ({\n  status = 'active',\n  onClick,\n}) => {\n  if (status === 'hidden') {\n    return null;\n  }\n\n  const checkStatus = () => {\n    if (status !== 'disabled') {\n      onClick();\n    }\n  };\n\n  return (\n    <StyledNotificationAddButton className={status} onClick={checkStatus}>\n      <i className=\"fa fa-plus\" />{' '}\n      {status === 'active'\n        ? t('Add another notification method')\n        : t('Add delivery method')}\n    </StyledNotificationAddButton>\n  );\n};\n\nconst AlertReportModal: FunctionComponent<AlertReportModalProps> = ({\n  addDangerToast,\n  onAdd,\n  onHide,\n  show,\n  alert = null,\n  isReport = false,\n  addSuccessToast,\n}) => {\n  const currentUser = useSelector<any, UserWithPermissionsAndRoles>(\n    state => state.user,\n  );\n  // Check config for alternate notification methods setting\n  const conf = useCommonConf();\n  const allowedNotificationMethods: NotificationMethodOption[] =\n    conf?.ALERT_REPORTS_NOTIFICATION_METHODS || DEFAULT_NOTIFICATION_METHODS;\n\n  const [disableSave, setDisableSave] = useState<boolean>(true);\n\n  const [currentAlert, setCurrentAlert] =\n    useState<Partial<AlertObject> | null>();\n  const [isHidden, setIsHidden] = useState<boolean>(true);\n  const [contentType, setContentType] = useState<string>('dashboard');\n  const [reportFormat, setReportFormat] = useState<string>(\n    DEFAULT_NOTIFICATION_FORMAT,\n  );\n  const [forceScreenshot, setForceScreenshot] = useState<boolean>(false);\n\n  const [isScreenshot, setIsScreenshot] = useState<boolean>(false);\n  useEffect(() => {\n    setIsScreenshot(reportFormat === 'PNG');\n  }, [reportFormat]);\n\n  // Dropdown options\n  const [conditionNotNull, setConditionNotNull] = useState<boolean>(false);\n  const [sourceOptions, setSourceOptions] = useState<MetaObject[]>([]);\n  const [dashboardOptions, setDashboardOptions] = useState<MetaObject[]>([]);\n  const [chartOptions, setChartOptions] = useState<MetaObject[]>([]);\n  // Validation\n  const [validationStatus, setValidationStatus] = useState<ValidationObject>({\n    [Sections.General]: {\n      hasErrors: false,\n      name: TRANSLATIONS.GENERAL_TITLE,\n      errors: [],\n    },\n    [Sections.Content]: {\n      hasErrors: false,\n      name: isReport\n        ? TRANSLATIONS.REPORT_CONTENTS_TITLE\n        : TRANSLATIONS.ALERT_CONTENTS_TITLE,\n      errors: [],\n    },\n    [Sections.Alert]: {\n      hasErrors: false,\n      name: TRANSLATIONS.ALERT_CONDITION_TITLE,\n      errors: [],\n    },\n    [Sections.Schedule]: {\n      hasErrors: false,\n      name: TRANSLATIONS.SCHEDULE_TITLE,\n      errors: [],\n    },\n    [Sections.Notification]: {\n      hasErrors: false,\n      name: TRANSLATIONS.NOTIFICATION_TITLE,\n      errors: [],\n    },\n  });\n  const [errorTooltipMessage, setErrorTooltipMessage] = useState<ReactNode>('');\n\n  const updateValidationStatus = (section: Sections, errors: string[]) => {\n    setValidationStatus(currentValidationData => ({\n      ...currentValidationData,\n      [section]: {\n        hasErrors: errors.length > 0,\n        name: currentValidationData[section].name,\n        errors,\n      },\n    }));\n  };\n\n  // Chart metadata\n  const [chartVizType, setChartVizType] = useState<string>('');\n\n  const reportOrAlert = isReport ? 'report' : 'alert';\n  const isEditMode = alert !== null;\n  const formatOptionEnabled =\n    isFeatureEnabled(FeatureFlag.AlertsAttachReports) || isReport;\n\n  const [notificationAddState, setNotificationAddState] =\n    useState<NotificationAddStatus>('active');\n\n  const [notificationSettings, setNotificationSettings] = useState<\n    NotificationSetting[]\n  >([]);\n  const [emailSubject, setEmailSubject] = useState<string>('');\n  const [emailError, setEmailError] = useState(false);\n\n  const onNotificationAdd = () => {\n    setNotificationSettings([\n      ...notificationSettings,\n      {\n        recipients: '',\n        // options shown in the newly added notification method\n        options: allowedNotificationMethods.filter(\n          // are filtered such that\n          option =>\n            // options are not included\n            !notificationSettings.reduce(\n              // when it exists in previous notificationSettings\n              (accum, setting) => accum || option === setting.method,\n              false,\n            ),\n        ),\n      },\n    ]);\n\n    setNotificationAddState(\n      notificationSettings.length === allowedNotificationMethodsCount\n        ? 'hidden'\n        : 'disabled',\n    );\n  };\n\n  const {\n    ALERT_REPORTS_DEFAULT_WORKING_TIMEOUT,\n    ALERT_REPORTS_DEFAULT_CRON_VALUE,\n    ALERT_REPORTS_DEFAULT_RETENTION,\n  } = useSelector<any, AlertsReportsConfig>(state => {\n    const conf = state.common?.conf;\n    return {\n      ALERT_REPORTS_DEFAULT_WORKING_TIMEOUT:\n        conf?.ALERT_REPORTS_DEFAULT_WORKING_TIMEOUT ?? DEFAULT_WORKING_TIMEOUT,\n      ALERT_REPORTS_DEFAULT_CRON_VALUE:\n        conf?.ALERT_REPORTS_DEFAULT_CRON_VALUE ?? DEFAULT_CRON_VALUE,\n      ALERT_REPORTS_DEFAULT_RETENTION:\n        conf?.ALERT_REPORTS_DEFAULT_RETENTION ?? DEFAULT_RETENTION,\n    };\n  });\n\n  const defaultAlert = {\n    active: true,\n    creation_method: 'alerts_reports',\n    crontab: ALERT_REPORTS_DEFAULT_CRON_VALUE,\n    log_retention: ALERT_REPORTS_DEFAULT_RETENTION,\n    working_timeout: ALERT_REPORTS_DEFAULT_WORKING_TIMEOUT,\n    name: '',\n    owners: [],\n    recipients: [],\n    sql: '',\n    email_subject: '',\n    validator_config_json: {},\n    validator_type: '',\n    force_screenshot: false,\n    grace_period: undefined,\n  };\n\n  const updateNotificationSetting = (\n    index: number,\n    setting: NotificationSetting,\n  ) => {\n    const settings: NotificationSetting[] = [...notificationSettings];\n    settings[index] = setting;\n\n    // if you've changed notification method -> remove trailing methods\n    if (notificationSettings[index].method !== setting.method) {\n      notificationSettings[index] = setting;\n\n      setNotificationSettings(\n        notificationSettings.filter((_, idx) => idx <= index),\n      );\n\n      if (notificationSettings.length - 1 > index) {\n        setNotificationAddState('active');\n      }\n\n      if (setting.method !== undefined && notificationAddState !== 'hidden') {\n        setNotificationAddState('active');\n      }\n    } else {\n      setNotificationSettings(settings);\n    }\n  };\n\n  const removeNotificationSetting = (index: number) => {\n    const settings = notificationSettings.slice();\n\n    settings.splice(index, 1);\n    setNotificationSettings(settings);\n    setNotificationAddState('active');\n  };\n\n  // Alert fetch logic\n  const {\n    state: { loading, resource, error: fetchError },\n    fetchResource,\n    createResource,\n    updateResource,\n    clearError,\n  } = useSingleViewResource<AlertObject>('report', t('report'), addDangerToast);\n\n  // Functions\n  const hide = () => {\n    clearError();\n    setIsHidden(true);\n    onHide();\n    setNotificationSettings([]);\n    setCurrentAlert({ ...defaultAlert });\n    setNotificationAddState('active');\n  };\n\n  const onSave = () => {\n    // Notification Settings\n    const recipients: Recipient[] = [];\n\n    notificationSettings.forEach(setting => {\n      if (setting.method && setting.recipients.length) {\n        recipients.push({\n          recipient_config_json: {\n            target: setting.recipients,\n            ccTarget: setting.cc,\n            bccTarget: setting.bcc,\n          },\n          type: setting.method,\n        });\n      }\n    });\n\n    const shouldEnableForceScreenshot = contentType === 'chart' && !isReport;\n    const data: any = {\n      ...currentAlert,\n      type: isReport ? 'Report' : 'Alert',\n      force_screenshot: shouldEnableForceScreenshot || forceScreenshot,\n      validator_type: conditionNotNull ? 'not null' : 'operator',\n      validator_config_json: conditionNotNull\n        ? {}\n        : currentAlert?.validator_config_json,\n      chart: contentType === 'chart' ? currentAlert?.chart?.value : null,\n      dashboard:\n        contentType === 'dashboard' ? currentAlert?.dashboard?.value : null,\n      custom_width: isScreenshot ? currentAlert?.custom_width : undefined,\n      database: currentAlert?.database?.value,\n      owners: (currentAlert?.owners || []).map(\n        owner => (owner as MetaObject).value || owner.id,\n      ),\n      recipients,\n      report_format: reportFormat || DEFAULT_NOTIFICATION_FORMAT,\n    };\n\n    if (data.recipients && !data.recipients.length) {\n      delete data.recipients;\n    }\n\n    data.context_markdown = 'string';\n\n    if (isEditMode) {\n      // Edit\n      if (currentAlert?.id) {\n        const update_id = currentAlert.id;\n\n        delete data.id;\n        delete data.created_by;\n        delete data.last_eval_dttm;\n        delete data.last_state;\n        delete data.last_value;\n        delete data.last_value_row_json;\n\n        updateResource(update_id, data).then(response => {\n          if (!response) {\n            return;\n          }\n\n          addSuccessToast(t('%s updated', data.type));\n\n          if (onAdd) {\n            onAdd();\n          }\n\n          hide();\n        });\n      }\n    } else if (currentAlert) {\n      // Create\n      createResource(data).then(response => {\n        if (!response) {\n          return;\n        }\n\n        addSuccessToast(t('%s updated', data.type));\n\n        if (onAdd) {\n          onAdd(response);\n        }\n\n        hide();\n      });\n    }\n  };\n\n  // Fetch data to populate form dropdowns\n  const loadOwnerOptions = useMemo(\n    () =>\n      (input = '', page: number, pageSize: number) => {\n        const query = rison.encode({\n          filter: input,\n          page,\n          page_size: pageSize,\n        });\n        return SupersetClient.get({\n          endpoint: `/api/v1/report/related/created_by?q=${query}`,\n        }).then(response => ({\n          data: response.json.result.map(\n            (item: { value: number; text: string }) => ({\n              value: item.value,\n              label: item.text,\n            }),\n          ),\n          totalCount: response.json.count,\n        }));\n      },\n    [],\n  );\n\n  const getSourceData = useCallback(\n    (db?: MetaObject) => {\n      const database = db || currentAlert?.database;\n\n      if (!database || database.label) {\n        return null;\n      }\n\n      let result;\n\n      // Cycle through source options to find the selected option\n      sourceOptions.forEach(source => {\n        if (source.value === database.value || source.value === database.id) {\n          result = source;\n        }\n      });\n\n      return result;\n    },\n    [currentAlert?.database, sourceOptions],\n  );\n\n  // Updating alert/report state\n  const updateAlertState = (name: string, value: any) => {\n    setCurrentAlert(currentAlertData => ({\n      ...currentAlertData,\n      [name]: value,\n    }));\n  };\n\n  const loadSourceOptions = useMemo(\n    () =>\n      (input = '', page: number, pageSize: number) => {\n        const query = rison.encode({\n          filter: input,\n          page,\n          page_size: pageSize,\n        });\n        return SupersetClient.get({\n          endpoint: `/api/v1/report/related/database?q=${query}`,\n        }).then(response => {\n          const list = response.json.result.map(\n            (item: { value: number; text: string }) => ({\n              value: item.value,\n              label: item.text,\n            }),\n          );\n          setSourceOptions(list);\n          return { data: list, totalCount: response.json.count };\n        });\n      },\n    [],\n  );\n\n  const databaseLabel = currentAlert?.database && !currentAlert.database.label;\n  useEffect(() => {\n    // Find source if current alert has one set\n    if (databaseLabel) {\n      updateAlertState('database', getSourceData());\n    }\n  }, [databaseLabel, getSourceData]);\n\n  const loadDashboardOptions = useMemo(\n    () =>\n      (input = '', page: number, pageSize: number) => {\n        const query = rison.encode_uri({\n          filter: input,\n          page,\n          page_size: pageSize,\n        });\n        return SupersetClient.get({\n          endpoint: `/api/v1/report/related/dashboard?q=${query}`,\n        }).then(response => {\n          const list = response.json.result.map(\n            (item: { value: number; text: string }) => ({\n              value: item.value,\n              label: item.text,\n            }),\n          );\n          setDashboardOptions(list);\n          return { data: list, totalCount: response.json.count };\n        });\n      },\n    [],\n  );\n\n  const getDashboardData = (db?: MetaObject) => {\n    const dashboard = db || currentAlert?.dashboard;\n\n    if (!dashboard || dashboard.label) {\n      return null;\n    }\n\n    let result;\n\n    // Cycle through dashboard options to find the selected option\n    dashboardOptions.forEach(dash => {\n      if (dash.value === dashboard.value || dash.value === dashboard.id) {\n        result = dash;\n      }\n    });\n\n    return result;\n  };\n\n  const getChartData = useCallback(\n    (chartData?: MetaObject) => {\n      const chart = chartData || currentAlert?.chart;\n\n      if (!chart || chart.label) {\n        return null;\n      }\n\n      let result;\n\n      // Cycle through chart options to find the selected option\n      chartOptions.forEach(slice => {\n        if (slice.value === chart.value || slice.value === chart.id) {\n          result = slice;\n        }\n      });\n\n      return result;\n    },\n    [chartOptions, currentAlert?.chart],\n  );\n\n  const noChartLabel = currentAlert?.chart && !currentAlert?.chart.label;\n  useEffect(() => {\n    // Find source if current alert has one set\n    if (noChartLabel) {\n      updateAlertState('chart', getChartData());\n    }\n  }, [getChartData, noChartLabel]);\n\n  const loadChartOptions = useMemo(\n    () =>\n      (input = '', page: number, pageSize: number) => {\n        const query = rison.encode_uri({\n          filter: input,\n          page,\n          page_size: pageSize,\n        });\n        return SupersetClient.get({\n          endpoint: `/api/v1/report/related/chart?q=${query}`,\n        }).then(response => {\n          const list = response.json.result.map(\n            (item: { value: number; text: string }) => ({\n              value: item.value,\n              label: item.text,\n            }),\n          );\n\n          setChartOptions(list);\n          return { data: list, totalCount: response.json.count };\n        });\n      },\n    [],\n  );\n\n  const getChartVisualizationType = (chart: SelectValue) =>\n    SupersetClient.get({\n      endpoint: `/api/v1/chart/${chart.value}`,\n    }).then(response => setChartVizType(response.json.result.viz_type));\n\n  // Handle input/textarea updates\n  const onInputChange = (\n    event: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>,\n  ) => {\n    const {\n      target: { type, value, name },\n    } = event;\n    const parsedValue = type === 'number' ? parseInt(value, 10) || null : value;\n\n    updateAlertState(name, parsedValue);\n\n    if (name === 'name') {\n      updateEmailSubject();\n    }\n  };\n\n  const onCustomWidthChange = (value: number | null | undefined) => {\n    updateAlertState('custom_width', value);\n  };\n\n  const onTimeoutVerifyChange = (\n    event: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>,\n  ) => {\n    const { target } = event;\n    const value = +target.value;\n\n    // Need to make sure grace period is not lower than TIMEOUT_MIN\n    if (value === 0) {\n      updateAlertState(target.name, undefined);\n    } else {\n      updateAlertState(\n        target.name,\n        value ? Math.max(value, TIMEOUT_MIN) : value,\n      );\n    }\n  };\n\n  const onSQLChange = (value: string) => {\n    updateAlertState('sql', value || '');\n  };\n\n  const onOwnersChange = (value: Array<SelectValue>) => {\n    updateAlertState('owners', value || []);\n  };\n\n  const onSourceChange = (value: Array<SelectValue>) => {\n    updateAlertState('database', value || []);\n  };\n\n  const onDashboardChange = (dashboard: SelectValue) => {\n    updateAlertState('dashboard', dashboard || undefined);\n    updateAlertState('chart', null);\n  };\n\n  const onChartChange = (chart: SelectValue) => {\n    getChartVisualizationType(chart);\n    updateAlertState('chart', chart || undefined);\n    updateAlertState('dashboard', null);\n  };\n\n  const onActiveSwitch = (checked: boolean) => {\n    updateAlertState('active', checked);\n  };\n\n  const onConditionChange = (op: Operator) => {\n    setConditionNotNull(op === 'not null');\n\n    const config = {\n      op,\n      threshold: currentAlert\n        ? currentAlert.validator_config_json?.threshold\n        : undefined,\n    };\n\n    updateAlertState('validator_config_json', config);\n  };\n\n  const onThresholdChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { target } = event;\n\n    const config = {\n      op: currentAlert ? currentAlert.validator_config_json?.op : undefined,\n      threshold: target.value,\n    };\n\n    updateAlertState('validator_config_json', config);\n  };\n\n  const onLogRetentionChange = (retention: number) => {\n    updateAlertState('log_retention', retention);\n  };\n\n  const onTimezoneChange = (timezone: string) => {\n    updateAlertState('timezone', timezone);\n  };\n\n  const onContentTypeChange = (value: string) => {\n    // When switch content type, reset force_screenshot to false\n    setForceScreenshot(false);\n    setContentType(value);\n  };\n\n  const onFormatChange = (value: string) => {\n    setReportFormat(value);\n  };\n\n  const onForceScreenshotChange = (event: any) => {\n    setForceScreenshot(event.target.checked);\n  };\n\n  // Make sure notification settings has the required info\n  const checkNotificationSettings = () => {\n    if (!notificationSettings.length) {\n      return false;\n    }\n\n    let hasInfo = false;\n\n    notificationSettings.forEach(setting => {\n      if (!!setting.method && setting.recipients?.length) {\n        hasInfo = true;\n      }\n    });\n\n    return hasInfo;\n  };\n\n  const checkEmailFormat = () => {\n    if (!notificationSettings.length) {\n      return true;\n    }\n\n    const validateEmails = (emails: string): boolean => {\n      if (!emails) return true; // No emails to validate\n      return emails\n        .split(/[,;]/)\n        .every(email => EMAIL_REGEX.test(email.trim()));\n    };\n\n    // Use array method to check conditions\n    return notificationSettings.every(setting => {\n      if (!!setting.method && setting.method === 'Email') {\n        return (\n          (!setting.recipients?.length || validateEmails(setting.recipients)) &&\n          (!setting.cc || validateEmails(setting.cc)) &&\n          (!setting.bcc || validateEmails(setting.bcc))\n        );\n      }\n      return true; // Non-Email methods are considered valid\n    });\n  };\n\n  const validateGeneralSection = () => {\n    const errors = [];\n    if (!currentAlert?.name?.length) {\n      errors.push(TRANSLATIONS.NAME_ERROR_TEXT);\n    }\n    if (!currentAlert?.owners?.length) {\n      errors.push(TRANSLATIONS.OWNERS_ERROR_TEXT);\n    }\n    updateValidationStatus(Sections.General, errors);\n  };\n  const validateContentSection = () => {\n    const errors = [];\n    if (\n      !(\n        (contentType === 'dashboard' && !!currentAlert?.dashboard) ||\n        (contentType === 'chart' && !!currentAlert?.chart)\n      )\n    ) {\n      errors.push(TRANSLATIONS.CONTENT_ERROR_TEXT);\n    }\n    updateValidationStatus(Sections.Content, errors);\n  };\n  const validateAlertSection = () => {\n    const errors = [];\n    if (!currentAlert?.database) {\n      errors.push(TRANSLATIONS.DATABASE_ERROR_TEXT);\n    }\n    if (!currentAlert?.sql?.length) {\n      errors.push(TRANSLATIONS.SQL_ERROR_TEXT);\n    }\n    if (\n      !(\n        (conditionNotNull || !!currentAlert?.validator_config_json?.op) &&\n        (conditionNotNull ||\n          currentAlert?.validator_config_json?.threshold !== undefined)\n      )\n    ) {\n      errors.push(TRANSLATIONS.ALERT_CONDITION_ERROR_TEXT);\n    }\n    updateValidationStatus(Sections.Alert, errors);\n  };\n\n  const validateScheduleSection = () => {\n    const errors = [];\n    if (!currentAlert?.crontab?.length) {\n      errors.push(TRANSLATIONS.CRONTAB_ERROR_TEXT);\n    }\n    if (!currentAlert?.working_timeout) {\n      errors.push(TRANSLATIONS.WORKING_TIMEOUT_ERROR_TEXT);\n    }\n\n    updateValidationStatus(Sections.Schedule, errors);\n  };\n\n  const validateNotificationSection = () => {\n    const errors = [];\n    const hasErrors = !checkNotificationSettings();\n\n    if (hasErrors) {\n      errors.push(TRANSLATIONS.RECIPIENTS_ERROR_TEXT);\n    } else {\n      // Check for email format errors\n      const hasValidationErrors = !checkEmailFormat();\n      if (hasValidationErrors) {\n        errors.push(TRANSLATIONS.EMAIL_VALIDATION_ERROR_TEXT);\n      }\n    }\n\n    if (emailError) {\n      errors.push(TRANSLATIONS.EMAIL_SUBJECT_ERROR_TEXT);\n    }\n\n    // Update validation status with combined errors\n    updateValidationStatus(Sections.Notification, errors);\n  };\n\n  const validateAll = () => {\n    validateGeneralSection();\n    validateContentSection();\n    if (!isReport) validateAlertSection();\n    validateScheduleSection();\n    validateNotificationSection();\n  };\n\n  const enforceValidation = () => {\n    const sections = [\n      Sections.General,\n      Sections.Content,\n      isReport ? undefined : Sections.Alert,\n      Sections.Schedule,\n      Sections.Notification,\n    ];\n\n    const hasErrors = sections.some(\n      section => section && validationStatus[section].hasErrors,\n    );\n    const tooltip = hasErrors ? buildErrorTooltipMessage(validationStatus) : '';\n    setErrorTooltipMessage(tooltip);\n    setDisableSave(hasErrors);\n  };\n\n  // Initialize\n  useEffect(() => {\n    if (\n      isEditMode &&\n      (!currentAlert?.id || alert?.id !== currentAlert.id || (isHidden && show))\n    ) {\n      if (alert?.id !== null && !loading && !fetchError) {\n        const id = alert.id || 0;\n        fetchResource(id);\n      }\n    } else if (\n      !isEditMode &&\n      (!currentAlert || currentAlert.id || (isHidden && show))\n    ) {\n      setCurrentAlert({\n        ...defaultAlert,\n        owners: currentUser\n          ? [\n              {\n                value: currentUser.userId,\n                label: `${currentUser.firstName} ${currentUser.lastName}`,\n              },\n            ]\n          : [],\n      });\n      setNotificationSettings([\n        {\n          recipients: '',\n          cc: '',\n          bcc: '',\n          options: allowedNotificationMethods,\n          method: NotificationMethodOption.Email,\n        },\n      ]);\n      setNotificationAddState('active');\n    }\n  }, [alert]);\n\n  useEffect(() => {\n    if (resource) {\n      // Add notification settings\n      const settings = (resource.recipients || []).map(setting => {\n        const config =\n          typeof setting.recipient_config_json === 'string'\n            ? JSON.parse(setting.recipient_config_json)\n            : {};\n        return {\n          method: setting.type,\n          // @ts-ignore: Type not assignable\n          recipients: config.target || setting.recipient_config_json,\n          options: allowedNotificationMethods,\n          cc: config.ccTarget || '',\n          bcc: config.bccTarget || '',\n        };\n      });\n\n      setNotificationSettings(settings);\n      setNotificationAddState(\n        settings.length === allowedNotificationMethods.length\n          ? 'hidden'\n          : 'active',\n      );\n      setContentType(resource.chart ? 'chart' : 'dashboard');\n      setReportFormat(resource.report_format || DEFAULT_NOTIFICATION_FORMAT);\n      const validatorConfig =\n        typeof resource.validator_config_json === 'string'\n          ? JSON.parse(resource.validator_config_json)\n          : resource.validator_config_json;\n\n      setConditionNotNull(resource.validator_type === 'not null');\n\n      if (resource.chart) {\n        setChartVizType((resource.chart as ChartObject).viz_type);\n      }\n      setForceScreenshot(resource.force_screenshot);\n\n      setCurrentAlert({\n        ...resource,\n        chart: resource.chart\n          ? getChartData(resource.chart) || {\n              value: (resource.chart as ChartObject).id,\n              label: (resource.chart as ChartObject).slice_name,\n            }\n          : undefined,\n        dashboard: resource.dashboard\n          ? getDashboardData(resource.dashboard) || {\n              value: (resource.dashboard as DashboardObject).id,\n              label: (resource.dashboard as DashboardObject).dashboard_title,\n            }\n          : undefined,\n        database: resource.database\n          ? getSourceData(resource.database) || {\n              value: (resource.database as DatabaseObject).id,\n              label: (resource.database as DatabaseObject).database_name,\n            }\n          : undefined,\n        owners: (alert?.owners || []).map(owner => ({\n          value: (owner as MetaObject).value || owner.id,\n          label:\n            (owner as MetaObject).label ||\n            `${(owner as Owner).first_name} ${(owner as Owner).last_name}`,\n        })),\n        // @ts-ignore: Type not assignable\n        validator_config_json:\n          resource.validator_type === 'not null'\n            ? {\n                op: 'not null',\n              }\n            : validatorConfig,\n      });\n    }\n  }, [resource]);\n\n  // Validation\n  const currentAlertSafe = currentAlert || {};\n  useEffect(() => {\n    validateAll();\n    updateEmailSubject();\n  }, [\n    currentAlertSafe.name,\n    currentAlertSafe.owners,\n    currentAlertSafe.database,\n    currentAlertSafe.sql,\n    currentAlertSafe.validator_config_json,\n    currentAlertSafe.crontab,\n    currentAlertSafe.working_timeout,\n    currentAlertSafe.dashboard,\n    currentAlertSafe.chart,\n    contentType,\n    notificationSettings,\n    conditionNotNull,\n    emailError,\n  ]);\n  useEffect(() => {\n    enforceValidation();\n  }, [validationStatus]);\n\n  const allowedNotificationMethodsCount = useMemo(\n    () =>\n      allowedNotificationMethods.reduce((accum: string[], setting: string) => {\n        if (\n          accum.some(nm => nm.includes('slack')) &&\n          setting.toLowerCase().includes('slack')\n        ) {\n          return accum;\n        }\n        return [...accum, setting.toLowerCase()];\n      }, []).length,\n    [allowedNotificationMethods],\n  );\n\n  // Show/hide\n  if (isHidden && show) {\n    setIsHidden(false);\n  }\n\n  const getTitleText = () => {\n    let titleText;\n\n    switch (true) {\n      case isEditMode && isReport:\n        titleText = t('Edit Report');\n        break;\n      case isEditMode:\n        titleText = t('Edit Alert');\n        break;\n      case isReport:\n        titleText = t('Add Report');\n        break;\n      default:\n        titleText = t('Add Alert');\n        break;\n    }\n\n    return titleText;\n  };\n\n  const updateEmailSubject = () => {\n    if (contentType === 'chart') {\n      if (currentAlert?.name || currentAlert?.chart?.label) {\n        setEmailSubject(\n          `${currentAlert?.name}: ${currentAlert?.chart?.label || ''}`,\n        );\n      } else {\n        setEmailSubject('');\n      }\n    } else if (contentType === 'dashboard') {\n      if (currentAlert?.name || currentAlert?.dashboard?.label) {\n        setEmailSubject(\n          `${currentAlert?.name}: ${currentAlert?.dashboard?.label || ''}`,\n        );\n      } else {\n        setEmailSubject('');\n      }\n    } else {\n      setEmailSubject('');\n    }\n  };\n\n  const handleErrorUpdate = (hasError: boolean) => {\n    setEmailError(hasError);\n  };\n\n  return (\n    <StyledModal\n      className=\"no-content-padding\"\n      responsive\n      disablePrimaryButton={disableSave}\n      primaryTooltipMessage={errorTooltipMessage}\n      onHandledPrimaryAction={onSave}\n      onHide={hide}\n      primaryButtonName={isEditMode ? t('Save') : t('Add')}\n      show={show}\n      width=\"500px\"\n      centered\n      title={<h4 data-test=\"alert-report-modal-title\">{getTitleText()}</h4>}\n    >\n      <Collapse\n        expandIconPosition=\"right\"\n        defaultActiveKey=\"general\"\n        accordion\n        css={css`\n          border: 'none';\n        `}\n      >\n        <StyledPanel\n          header={\n            <ValidatedPanelHeader\n              title={TRANSLATIONS.GENERAL_TITLE}\n              subtitle={t(\n                'Set up basic details, such as name and description.',\n              )}\n              validateCheckStatus={\n                !validationStatus[Sections.General].hasErrors\n              }\n              testId=\"general-information-panel\"\n            />\n          }\n          key=\"general\"\n        >\n          <div className=\"header-section\">\n            <StyledInputContainer>\n              <div className=\"control-label\">\n                {isReport ? t('Report name') : t('Alert name')}\n                <span className=\"required\">*</span>\n              </div>\n              <div className=\"input-container\">\n                <input\n                  type=\"text\"\n                  name=\"name\"\n                  value={currentAlert ? currentAlert.name : ''}\n                  placeholder={\n                    isReport ? t('Enter report name') : t('Enter alert name')\n                  }\n                  onChange={onInputChange}\n                />\n              </div>\n            </StyledInputContainer>\n            <StyledInputContainer>\n              <div className=\"control-label\">\n                {t('Owners')}\n                <span className=\"required\">*</span>\n              </div>\n              <div data-test=\"owners-select\" className=\"input-container\">\n                <AsyncSelect\n                  ariaLabel={t('Owners')}\n                  allowClear\n                  name=\"owners\"\n                  mode=\"multiple\"\n                  placeholder={t('Select owners')}\n                  value={\n                    (currentAlert?.owners as {\n                      label: string;\n                      value: number;\n                    }[]) || []\n                  }\n                  options={loadOwnerOptions}\n                  onChange={onOwnersChange}\n                />\n              </div>\n            </StyledInputContainer>\n            <StyledInputContainer>\n              <div className=\"control-label\">{t('Description')}</div>\n              <div className=\"input-container\">\n                <input\n                  type=\"text\"\n                  name=\"description\"\n                  value={currentAlert ? currentAlert.description || '' : ''}\n                  placeholder={t(\n                    'Include description to be sent with %s',\n                    reportOrAlert,\n                  )}\n                  onChange={onInputChange}\n                />\n              </div>\n            </StyledInputContainer>\n            <StyledSwitchContainer>\n              <Switch\n                checked={currentAlert ? currentAlert.active : false}\n                defaultChecked\n                onChange={onActiveSwitch}\n              />\n              <div className=\"switch-label\">\n                {isReport ? t('Report is active') : t('Alert is active')}\n              </div>\n            </StyledSwitchContainer>\n          </div>\n        </StyledPanel>\n        {!isReport && (\n          <StyledPanel\n            header={\n              <ValidatedPanelHeader\n                title={TRANSLATIONS.ALERT_CONDITION_TITLE}\n                subtitle={t(\n                  'Define the database, SQL query, and triggering conditions for alert.',\n                )}\n                validateCheckStatus={\n                  !validationStatus[Sections.Alert].hasErrors\n                }\n                testId=\"alert-condition-panel\"\n              />\n            }\n            key=\"condition\"\n          >\n            <StyledInputContainer>\n              <div className=\"control-label\">\n                {t('Database')}\n                <span className=\"required\">*</span>\n              </div>\n              <div className=\"input-container\">\n                <AsyncSelect\n                  ariaLabel={t('Database')}\n                  name=\"source\"\n                  placeholder={t('Select database')}\n                  value={\n                    currentAlert?.database?.label &&\n                    currentAlert?.database?.value\n                      ? {\n                          value: currentAlert.database.value,\n                          label: currentAlert.database.label,\n                        }\n                      : undefined\n                  }\n                  options={loadSourceOptions}\n                  onChange={onSourceChange}\n                />\n              </div>\n            </StyledInputContainer>\n            <StyledInputContainer>\n              <div className=\"control-label\">\n                {t('SQL Query')}\n                <StyledTooltip\n                  tooltip={t(\n                    'The result of this query must be a value capable of numeric interpretation e.g. 1, 1.0, or \"1\" (compatible with Python\\'s float() function).',\n                  )}\n                />\n                <span className=\"required\">*</span>\n              </div>\n              <TextAreaControl\n                name=\"sql\"\n                language=\"sql\"\n                offerEditInModal={false}\n                minLines={15}\n                maxLines={15}\n                onChange={onSQLChange}\n                readOnly={false}\n                initialValue={resource?.sql}\n                key={currentAlert?.id}\n              />\n            </StyledInputContainer>\n            <div className=\"inline-container wrap\">\n              <StyledInputContainer css={noMarginBottom}>\n                <div className=\"control-label\" css={inputSpacer}>\n                  {t('Trigger Alert If...')}\n                  <span className=\"required\">*</span>\n                </div>\n                <div className=\"input-container\">\n                  <Select\n                    ariaLabel={t('Condition')}\n                    onChange={onConditionChange}\n                    placeholder={t('Condition')}\n                    value={currentAlert?.validator_config_json?.op || undefined}\n                    options={CONDITIONS}\n                    css={inputSpacer}\n                  />\n                </div>\n              </StyledInputContainer>\n              <StyledInputContainer css={noMarginBottom}>\n                <div className=\"control-label\">\n                  {t('Value')}{' '}\n                  {!conditionNotNull && <span className=\"required\">*</span>}\n                </div>\n                <div className=\"input-container\">\n                  <input\n                    type=\"number\"\n                    name=\"threshold\"\n                    disabled={conditionNotNull}\n                    value={\n                      currentAlert?.validator_config_json?.threshold !==\n                        undefined && !conditionNotNull\n                        ? currentAlert.validator_config_json.threshold\n                        : ''\n                    }\n                    placeholder={t('Value')}\n                    onChange={onThresholdChange}\n                  />\n                </div>\n              </StyledInputContainer>\n            </div>\n          </StyledPanel>\n        )}\n        <StyledPanel\n          header={\n            <ValidatedPanelHeader\n              title={\n                isReport\n                  ? TRANSLATIONS.REPORT_CONTENTS_TITLE\n                  : TRANSLATIONS.ALERT_CONTENTS_TITLE\n              }\n              subtitle={t('Customize data source, filters, and layout.')}\n              validateCheckStatus={\n                !validationStatus[Sections.Content].hasErrors\n              }\n              testId=\"contents-panel\"\n            />\n          }\n          key=\"contents\"\n        >\n          <StyledInputContainer>\n            <div className=\"control-label\">\n              {t('Content type')}\n              <span className=\"required\">*</span>\n            </div>\n            <Select\n              ariaLabel={t('Select content type')}\n              onChange={onContentTypeChange}\n              value={contentType}\n              options={CONTENT_TYPE_OPTIONS}\n              placeholder={t('Select content type')}\n            />\n          </StyledInputContainer>\n          <StyledInputContainer>\n            {contentType === 'chart' ? (\n              <>\n                <div className=\"control-label\">\n                  {t('Select chart')}\n                  <span className=\"required\">*</span>\n                </div>\n                <AsyncSelect\n                  ariaLabel={t('Chart')}\n                  name=\"chart\"\n                  value={\n                    currentAlert?.chart?.label && currentAlert?.chart?.value\n                      ? {\n                          value: currentAlert.chart.value,\n                          label: currentAlert.chart.label,\n                        }\n                      : undefined\n                  }\n                  options={loadChartOptions}\n                  onChange={onChartChange}\n                  placeholder={t('Select chart to use')}\n                />\n              </>\n            ) : (\n              <>\n                <div className=\"control-label\">\n                  {t('Select dashboard')}\n                  <span className=\"required\">*</span>\n                </div>\n                <AsyncSelect\n                  ariaLabel={t('Dashboard')}\n                  name=\"dashboard\"\n                  value={\n                    currentAlert?.dashboard?.label &&\n                    currentAlert?.dashboard?.value\n                      ? {\n                          value: currentAlert.dashboard.value,\n                          label: currentAlert.dashboard.label,\n                        }\n                      : undefined\n                  }\n                  options={loadDashboardOptions}\n                  onChange={onDashboardChange}\n                  placeholder={t('Select dashboard to use')}\n                />\n              </>\n            )}\n          </StyledInputContainer>\n          <StyledInputContainer\n            css={\n              ['PDF', 'TEXT', 'CSV'].includes(reportFormat) && noMarginBottom\n            }\n          >\n            {formatOptionEnabled && (\n              <>\n                <div className=\"control-label\">\n                  {t('Content format')}\n                  <span className=\"required\">*</span>\n                </div>\n                <Select\n                  ariaLabel={t('Select format')}\n                  onChange={onFormatChange}\n                  value={reportFormat}\n                  options={\n                    contentType === 'dashboard'\n                      ? ['pdf', 'png'].map(key => FORMAT_OPTIONS[key])\n                      : /* If chart is of text based viz type: show text\n                  format option */\n                        TEXT_BASED_VISUALIZATION_TYPES.includes(chartVizType)\n                        ? Object.values(FORMAT_OPTIONS)\n                        : ['pdf', 'png', 'csv'].map(key => FORMAT_OPTIONS[key])\n                  }\n                  placeholder={t('Select format')}\n                />\n              </>\n            )}\n          </StyledInputContainer>\n          {isScreenshot && (\n            <StyledInputContainer\n              css={!isReport && contentType === 'chart' && noMarginBottom}\n            >\n              <div className=\"control-label\">{t('Screenshot width')}</div>\n              <div className=\"input-container\">\n                <InputNumber\n                  type=\"number\"\n                  name=\"custom_width\"\n                  value={currentAlert?.custom_width || undefined}\n                  min={600}\n                  max={2400}\n                  placeholder={t('Input custom width in pixels')}\n                  onChange={onCustomWidthChange}\n                />\n              </div>\n            </StyledInputContainer>\n          )}\n          {(isReport || contentType === 'dashboard') && (\n            <div className=\"inline-container\">\n              <StyledCheckbox\n                data-test=\"bypass-cache\"\n                className=\"checkbox\"\n                checked={forceScreenshot}\n                onChange={onForceScreenshotChange}\n              >\n                {t('Ignore cache when generating report')}\n              </StyledCheckbox>\n            </div>\n          )}\n        </StyledPanel>\n        <StyledPanel\n          header={\n            <ValidatedPanelHeader\n              title={TRANSLATIONS.SCHEDULE_TITLE}\n              subtitle={t(\n                'Define delivery schedule, timezone, and frequency settings.',\n              )}\n              validateCheckStatus={\n                !validationStatus[Sections.Schedule].hasErrors\n              }\n              testId=\"schedule-panel\"\n            />\n          }\n          key=\"schedule\"\n        >\n          <AlertReportCronScheduler\n            value={currentAlert?.crontab || ''}\n            onChange={newVal => updateAlertState('crontab', newVal)}\n          />\n          <StyledInputContainer>\n            <div className=\"control-label\">\n              {t('Timezone')} <span className=\"required\">*</span>\n            </div>\n            <TimezoneSelector\n              onTimezoneChange={onTimezoneChange}\n              timezone={currentAlert?.timezone}\n              minWidth=\"100%\"\n            />\n          </StyledInputContainer>\n          <StyledInputContainer>\n            <div className=\"control-label\">\n              {t('Log retention')}\n              <span className=\"required\">*</span>\n            </div>\n            <div className=\"input-container\">\n              <Select\n                ariaLabel={t('Log retention')}\n                placeholder={t('Log retention')}\n                onChange={onLogRetentionChange}\n                value={currentAlert?.log_retention}\n                options={RETENTION_OPTIONS}\n                sortComparator={propertyComparator('value')}\n              />\n            </div>\n          </StyledInputContainer>\n          <StyledInputContainer css={noMarginBottom}>\n            {isReport ? (\n              <>\n                <div className=\"control-label\">\n                  {t('Working timeout')}\n                  <span className=\"required\">*</span>\n                </div>\n                <div className=\"input-container\">\n                  <NumberInput\n                    min={1}\n                    name=\"working_timeout\"\n                    value={currentAlert?.working_timeout || ''}\n                    placeholder={t('Time in seconds')}\n                    onChange={onTimeoutVerifyChange}\n                    timeUnit={t('seconds')}\n                  />\n                </div>\n              </>\n            ) : (\n              <>\n                <div className=\"control-label\">{t('Grace period')}</div>\n                <div className=\"input-container\">\n                  <NumberInput\n                    min={1}\n                    name=\"grace_period\"\n                    value={currentAlert?.grace_period || ''}\n                    placeholder={t('Time in seconds')}\n                    onChange={onTimeoutVerifyChange}\n                    timeUnit={t('seconds')}\n                  />\n                </div>\n              </>\n            )}\n          </StyledInputContainer>\n        </StyledPanel>\n        <StyledPanel\n          header={\n            <ValidatedPanelHeader\n              title={TRANSLATIONS.NOTIFICATION_TITLE}\n              subtitle={t('Choose notification method and recipients.')}\n              validateCheckStatus={\n                !validationStatus[Sections.Notification].hasErrors\n              }\n              testId=\"notification-method-panel\"\n            />\n          }\n          key=\"notification\"\n        >\n          {notificationSettings.map((notificationSetting, i) => (\n            <StyledNotificationMethodWrapper>\n              <NotificationMethod\n                setting={notificationSetting}\n                index={i}\n                key={`NotificationMethod-${i}`}\n                onUpdate={updateNotificationSetting}\n                onRemove={removeNotificationSetting}\n                onInputChange={onInputChange}\n                email_subject={currentAlert?.email_subject || ''}\n                defaultSubject={emailSubject || ''}\n                setErrorSubject={handleErrorUpdate}\n              />\n            </StyledNotificationMethodWrapper>\n          ))}\n          {\n            // Prohibit 'add notification method' button if only one present\n            allowedNotificationMethodsCount > notificationSettings.length && (\n              <NotificationMethodAdd\n                data-test=\"notification-add\"\n                status={notificationAddState}\n                onClick={onNotificationAdd}\n              />\n            )\n          }\n        </StyledPanel>\n      </Collapse>\n    </StyledModal>\n  );\n};\n\nexport default withToasts(AlertReportModal);\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport Owner from 'src/types/Owner';\nimport { NotificationFormats } from 'src/features/reports/types';\n\ntype user = {\n  id: number;\n  first_name: string;\n  last_name: string;\n};\nexport type ChartObject = {\n  id: number;\n  slice_name: string;\n  viz_type: string;\n};\n\nexport type DashboardObject = {\n  dashboard_title: string;\n  id: number;\n};\n\nexport type DatabaseObject = {\n  database_name: string;\n  id: number;\n};\n\nexport enum NotificationMethodOption {\n  Email = 'Email',\n  Slack = 'Slack',\n  SlackV2 = 'SlackV2',\n}\n\nexport type NotificationSetting = {\n  method?: NotificationMethodOption;\n  recipients: string;\n  cc?: string;\n  bcc?: string;\n  options: NotificationMethodOption[];\n};\n\nexport type SlackChannel = {\n  id: string;\n  name: string;\n  is_member: boolean;\n  is_private: boolean;\n};\n\nexport type Recipient = {\n  recipient_config_json: {\n    target: string;\n    ccTarget?: string;\n    bccTarget?: string;\n  };\n  type: NotificationMethodOption;\n};\n\nexport type MetaObject = {\n  id?: number;\n  label?: string;\n  value?: number | string;\n};\n\nexport type Operator = '<' | '>' | '<=' | '>=' | '==' | '!=' | 'not null';\n\nexport type AlertObject = {\n  active?: boolean;\n  creation_method?: string;\n  chart?: MetaObject;\n  changed_by?: user;\n  changed_on_delta_humanized?: string;\n  chart_id: number;\n  created_by?: user;\n  created_on?: string;\n  crontab?: string;\n  custom_width?: number | null;\n  dashboard?: MetaObject;\n  dashboard_id?: number;\n  database?: MetaObject;\n  description?: string;\n  email_subject?: string;\n  error?: string;\n  force_screenshot: boolean;\n  grace_period?: number;\n  id: number;\n  last_eval_dttm?: number;\n  last_state?: 'Success' | 'Working' | 'Error' | 'Not triggered' | 'On Grace';\n  log_retention?: number;\n  name?: string;\n  owners?: Array<Owner | MetaObject>;\n  sql?: string;\n  timezone?: string;\n  recipients?: Array<Recipient>;\n  report_format?: NotificationFormats;\n  type?: string;\n  validator_config_json?: {\n    op?: Operator;\n    threshold?: number;\n  };\n  validator_type?: string;\n  working_timeout?: number;\n};\n\nexport type LogObject = {\n  end_dttm: string;\n  error_message: string;\n  id: number;\n  scheduled_dttm: string;\n  start_dttm: string;\n  state: string;\n  value: string;\n  uuid: string;\n};\n\nexport enum AlertState {\n  Success = 'Success',\n  Working = 'Working',\n  Error = 'Error',\n  Noop = 'Not triggered',\n  Grace = 'On Grace',\n}\n\nexport enum RecipientIconName {\n  Email = 'Email',\n  Slack = 'Slack',\n  SlackV2 = 'SlackV2',\n}\nexport interface AlertsReportsConfig {\n  ALERT_REPORTS_DEFAULT_WORKING_TIMEOUT: number;\n  ALERT_REPORTS_DEFAULT_RETENTION: number;\n  ALERT_REPORTS_DEFAULT_CRON_VALUE: string;\n}\n\nexport type SectionValidationObject = {\n  hasErrors: boolean;\n  errors: string[];\n  name: string;\n};\n\nexport interface ValidationObject {\n  [key: string]: SectionValidationObject;\n}\n\nexport enum Sections {\n  General = 'generalSection',\n  Content = 'contentSection',\n  Alert = 'alertConditionSection',\n  Schedule = 'scheduleSection',\n  Notification = 'notificationSection',\n}\n"],"names":["propTypes","name","PropTypes","onChange","initialValue","height","minLines","maxLines","offerEditInModal","language","aboveEditorSection","readOnly","resize","textAreaStyles","TextAreaControl","Component","onControlChange","event","value","target","this","props","onAreaEditorChange","renderEditor","inModal","style","border","theme","colors","grayscale","light1","minHeight","width","backgroundColor","_jsx","TextAreaEditor","mode","editorProps","$blockScrolling","defaultValue","bind","TextArea","placeholder","t","disabled","renderModalBody","_jsxs","_Fragment","children","render","controlHeader","ControlHeader","ModalTrigger","modalTitle","triggerNode","Button","buttonSize","className","modalBody","responsive","defaultProps","withTheme","LOCALE","everyText","emptyMonths","emptyMonthDays","emptyMonthDaysShort","emptyWeekDays","emptyWeekDaysShort","emptyHours","emptyMinutes","emptyMinutesForHourPeriod","yearOption","monthOption","weekOption","dayOption","hourOption","minuteOption","rebootOption","prefixPeriod","prefixMonths","prefixMonthDays","prefixWeekDays","prefixWeekDaysForMonthAndYearPeriod","prefixHours","prefixMinutes","prefixMinutesForHourPeriod","suffixMinutesForHourPeriod","errorInvalidCron","clearButtonText","weekDays","months","altWeekDays","altMonths","CronPicker","styled","ConfigProvider","getPopupContainer","trigger","parentElement","ReactCronPicker","locale","gridUnit","DEFAULT_TIMEZONE","MIN_SELECT_WIDTH","offsetsToName","currentDate","moment","JANUARY","JULY","getOffsetKey","tz","utcOffset","toString","getTimezoneName","_offsetsToName$offset","_offsetsToName$offset2","offsets","isDST","ALL_ZONES","countries","map","country","zonesForCountry","flat","TIMEZONES","forEach","zone","find","option","push","TIMEZONE_OPTIONS","label","format","timezoneName","TIMEZONE_OPTIONS_SORT_COMPARATOR","a","b","sort","matchTimezoneToOptions","timezone","_TIMEZONE_OPTIONS$fin","TimezoneSelector","onTimezoneChange","minWidth","validTimezone","useMemo","guess","useEffect","Select","ariaLabel","css","_css","options","sortComparator","NumberInput","timeUnit","min","isFocused","setIsFocused","useState","type","onFocus","onBlur","ScheduleType","SCHEDULE_TYPE_OPTIONS","Picker","Input","AlertReportCronScheduler","useTheme","inputRef","useRef","scheduleFormat","setScheduleFormat","customSetValue","useCallback","newValue","_inputRef$current","current","setValue","handleBlur","handlePressEnter","_inputRef$current2","input","error","onError","StyledInputContainer","e","ref","borderColor","base","onPressEnter","clearButton","displayError","StyledNotificationMethod","div","typography","sizes","s","primary","dark1","TRANSLATIONS","EMAIL_CC_NAME","EMAIL_BCC_NAME","EMAIL_SUBJECT_NAME","EMAIL_SUBJECT_ERROR_TEXT","NotificationMethod","setting","index","onUpdate","onRemove","onInputChange","email_subject","defaultSubject","setErrorSubject","method","recipients","cc","bcc","recipientValue","setRecipientValue","slackRecipients","setSlackRecipients","setError","ccVisible","setCcVisible","bccVisible","setBccVisible","ccValue","setCcValue","bccValue","setBccValue","slackOptions","setSlackOptions","useSlackV1","setUseSlackV1","onMethodChange","selected","updatedSetting","_slackOptions$","NotificationMethodOption","Slack","SlackV2","includes","length","async","searchString","types","exactMatch","endpoint","rison","SupersetClient","get","fetchSlackChannels","then","json","result","mapChannelsToOptions","publicChannels","privateChannels","channel","is_private","is_member","id","key","isFeatureEnabled","FeatureFlag","AlertReportSlackV2","publicOptions","privateOptions","mapSlackValues","prop","split","recipient","trim","toLowerCase","filter","val","catch","methodOptions","Email","labelInValue","showSearch","role","tabIndex","onClick","Icons","Trash","iconColor","undefined","hasError","color","fontSize","obj","join","allowClear","allowSelectAll","display","ValidatedPanelHeader","title","subtitle","validateCheckStatus","testId","checkmark","CheckCircleOutlined","AntdCollapse","Panel","antdPanelStyles","anticonHeight","weights","bold","normal","warning","success","StyledList","ul","TEXT_BASED_VISUALIZATION_TYPES","EMAIL_REGEX","DEFAULT_NOTIFICATION_METHODS","DEFAULT_NOTIFICATION_FORMAT","CONDITIONS","RETENTION_OPTIONS","CONTENT_TYPE_OPTIONS","FORMAT_OPTIONS","pdf","png","csv","txt","noMarginBottom","StyledModal","Modal","StyledSwitchContainer","light2","StyledCheckbox","AntdCheckbox","StyledTooltip","InfoTooltipWithTrigger","StyledNotificationAddButton","StyledNotificationMethodWrapper","inputSpacer","GENERAL_TITLE","ALERT_CONDITION_TITLE","ALERT_CONTENTS_TITLE","REPORT_CONTENTS_TITLE","SCHEDULE_TITLE","NOTIFICATION_TITLE","NAME_ERROR_TEXT","OWNERS_ERROR_TEXT","CONTENT_ERROR_TEXT","DATABASE_ERROR_TEXT","SQL_ERROR_TEXT","ALERT_CONDITION_ERROR_TEXT","CRONTAB_ERROR_TEXT","WORKING_TIMEOUT_ERROR_TEXT","RECIPIENTS_ERROR_TEXT","EMAIL_VALIDATION_ERROR_TEXT","ERROR_TOOLTIP_MESSAGE","NotificationMethodAdd","status","checkStatus","withToasts","AlertReportModal","addDangerToast","onAdd","onHide","show","alert","isReport","addSuccessToast","_currentAlert$databas2","_currentAlert$databas3","_currentAlert$validat5","_currentAlert$validat6","_currentAlert$chart4","_currentAlert$chart5","_currentAlert$dashboa4","_currentAlert$dashboa5","currentUser","useSelector","state","user","conf","useCommonConf","allowedNotificationMethods","ALERT_REPORTS_NOTIFICATION_METHODS","disableSave","setDisableSave","currentAlert","setCurrentAlert","isHidden","setIsHidden","contentType","setContentType","reportFormat","setReportFormat","forceScreenshot","setForceScreenshot","isScreenshot","setIsScreenshot","conditionNotNull","setConditionNotNull","sourceOptions","setSourceOptions","dashboardOptions","setDashboardOptions","chartOptions","setChartOptions","validationStatus","setValidationStatus","Sections","General","hasErrors","errors","Content","Alert","Schedule","Notification","errorTooltipMessage","setErrorTooltipMessage","updateValidationStatus","section","currentValidationData","chartVizType","setChartVizType","reportOrAlert","isEditMode","formatOptionEnabled","AlertsAttachReports","notificationAddState","setNotificationAddState","notificationSettings","setNotificationSettings","emailSubject","setEmailSubject","emailError","setEmailError","ALERT_REPORTS_DEFAULT_WORKING_TIMEOUT","ALERT_REPORTS_DEFAULT_CRON_VALUE","ALERT_REPORTS_DEFAULT_RETENTION","_state$common","_conf$ALERT_REPORTS_D","_conf$ALERT_REPORTS_D2","_conf$ALERT_REPORTS_D3","common","defaultAlert","active","creation_method","crontab","log_retention","working_timeout","owners","sql","validator_config_json","validator_type","force_screenshot","grace_period","updateNotificationSetting","settings","_","idx","removeNotificationSetting","slice","splice","loading","resource","fetchError","fetchResource","createResource","updateResource","clearError","useSingleViewResource","hide","loadOwnerOptions","page","pageSize","query","page_size","response","data","item","text","totalCount","count","getSourceData","db","database","source","updateAlertState","currentAlertData","loadSourceOptions","list","databaseLabel","loadDashboardOptions","getDashboardData","dashboard","dash","getChartData","chartData","chart","noChartLabel","loadChartOptions","parsedValue","parseInt","updateEmailSubject","onTimeoutVerifyChange","Math","max","validateAll","validateGeneralSection","_currentAlert$name","_currentAlert$owners","validateContentSection","validateAlertSection","_currentAlert$sql","_currentAlert$validat3","_currentAlert$validat4","op","threshold","validateScheduleSection","_currentAlert$crontab","validateNotificationSection","checkNotificationSettings","hasInfo","_setting$recipients","checkEmailFormat","validateEmails","emails","every","email","test","_setting$recipients2","userId","firstName","lastName","config","recipient_config_json","JSON","parse","ccTarget","bccTarget","report_format","validatorConfig","viz_type","slice_name","dashboard_title","database_name","owner","first_name","last_name","currentAlertSafe","enforceValidation","some","tooltip","buildErrorTooltipMessage","sectionErrors","Object","values","sectionTitle","err","allowedNotificationMethodsCount","reduce","accum","nm","_currentAlert$chart2","_currentAlert$chart3","_currentAlert$dashboa2","_currentAlert$dashboa3","handleErrorUpdate","disablePrimaryButton","primaryTooltipMessage","onHandledPrimaryAction","onSave","_currentAlert$chart","_currentAlert$dashboa","_currentAlert$databas","shouldEnableForceScreenshot","custom_width","context_markdown","update_id","created_by","last_eval_dttm","last_state","last_value","last_value_row_json","primaryButtonName","centered","getTitleText","titleText","Collapse","expandIconPosition","defaultActiveKey","accordion","StyledPanel","header","AsyncSelect","description","Switch","checked","defaultChecked","_currentAlert$validat","_currentAlert$validat2","getChartVisualizationType","InputNumber","newVal","retention","propertyComparator","notificationSetting","i","onNotificationAdd","AlertState","RecipientIconName"],"sourceRoot":""}