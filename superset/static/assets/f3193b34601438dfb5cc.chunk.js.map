{"version":3,"file":"f3193b34601438dfb5cc.chunk.js","mappings":"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","sources":["webpack://superset/./src/components/ListView/ActionsBar.tsx","webpack://superset/./src/features/queries/SavedQueryPreviewModal.tsx","webpack://superset/./src/pages/SavedQueryList/index.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { ReactElement } from 'react';\nimport { styled } from '@superset-ui/core';\nimport { Tooltip } from 'src/components/Tooltip';\nimport Icons from 'src/components/Icons';\nimport { TooltipPlacement } from 'antd/lib/tooltip';\n\nexport type ActionProps = {\n  label: string;\n  tooltip?: string | ReactElement;\n  placement?: TooltipPlacement;\n  icon: string;\n  onClick: () => void;\n};\n\ninterface ActionsBarProps {\n  actions: Array<ActionProps>;\n}\n\nconst StyledActions = styled.span`\n  white-space: nowrap;\n  min-width: 100px;\n  svg,\n  i {\n    margin-right: 8px;\n\n    &:hover {\n      path {\n        fill: ${({ theme }) => theme.colors.primary.base};\n      }\n    }\n  }\n`;\n\nconst ActionWrapper = styled.span`\n  color: ${({ theme }) => theme.colors.grayscale.base};\n`;\n\nexport default function ActionsBar({ actions }: ActionsBarProps) {\n  return (\n    <StyledActions className=\"actions\">\n      {actions.map((action, index) => {\n        const ActionIcon = Icons[action.icon];\n        if (action.tooltip) {\n          return (\n            <Tooltip\n              id={`${action.label}-tooltip`}\n              title={action.tooltip}\n              placement={action.placement}\n              key={index}\n            >\n              <ActionWrapper\n                role=\"button\"\n                tabIndex={0}\n                className=\"action-button\"\n                data-test={action.label}\n                onClick={action.onClick}\n              >\n                <ActionIcon />\n              </ActionWrapper>\n            </Tooltip>\n          );\n        }\n\n        return (\n          <ActionWrapper\n            role=\"button\"\n            tabIndex={0}\n            className=\"action-button\"\n            onClick={action.onClick}\n            data-test={action.label}\n            key={index}\n          >\n            <ActionIcon />\n          </ActionWrapper>\n        );\n      })}\n    </StyledActions>\n  );\n}\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { FunctionComponent } from 'react';\nimport { styled, t } from '@superset-ui/core';\nimport Modal from 'src/components/Modal';\nimport Button from 'src/components/Button';\nimport SyntaxHighlighterCopy from 'src/features/queries/SyntaxHighlighterCopy';\nimport withToasts, {\n  ToastProps,\n} from 'src/components/MessageToasts/withToasts';\nimport useQueryPreviewState from 'src/features/queries/hooks/useQueryPreviewState';\n\nconst QueryTitle = styled.div`\n  color: ${({ theme }) => theme.colors.secondary.light2};\n  font-size: ${({ theme }) => theme.typography.sizes.s}px;\n  margin-bottom: 0;\n  text-transform: uppercase;\n`;\n\nconst QueryLabel = styled.div`\n  color: ${({ theme }) => theme.colors.grayscale.dark2};\n  font-size: ${({ theme }) => theme.typography.sizes.m}px;\n  padding: 4px 0 16px 0;\n`;\n\nconst StyledModal = styled(Modal)`\n  .ant-modal-content {\n  }\n\n  .ant-modal-body {\n    padding: 24px;\n  }\n\n  pre {\n    font-size: ${({ theme }) => theme.typography.sizes.xs}px;\n    font-weight: ${({ theme }) => theme.typography.weights.normal};\n    line-height: ${({ theme }) => theme.typography.sizes.l}px;\n    height: 375px;\n    border: none;\n  }\n`;\n\ntype SavedQueryObject = {\n  id: number;\n  label: string;\n  sql: string;\n};\n\ninterface SavedQueryPreviewModalProps extends ToastProps {\n  fetchData: (id: number) => {};\n  onHide: () => void;\n  openInSqlLab: (id: number, openInNewWindow: boolean) => {};\n  queries: Array<SavedQueryObject>;\n  savedQuery: SavedQueryObject;\n  show: boolean;\n}\n\nconst SavedQueryPreviewModal: FunctionComponent<\n  SavedQueryPreviewModalProps\n> = ({\n  fetchData,\n  onHide,\n  openInSqlLab,\n  queries,\n  savedQuery,\n  show,\n  addDangerToast,\n  addSuccessToast,\n}) => {\n  const { handleKeyPress, handleDataChange, disablePrevious, disableNext } =\n    useQueryPreviewState<SavedQueryObject>({\n      queries,\n      currentQueryId: savedQuery.id,\n      fetchData,\n    });\n\n  return (\n    <div role=\"none\" onKeyUp={handleKeyPress}>\n      <StyledModal\n        onHide={onHide}\n        show={show}\n        title={t('Query preview')}\n        footer={\n          <>\n            <Button\n              data-test=\"previous-saved-query\"\n              key=\"previous-saved-query\"\n              disabled={disablePrevious}\n              onClick={() => handleDataChange(true)}\n            >\n              {t('Previous')}\n            </Button>\n            <Button\n              data-test=\"next-saved-query\"\n              key=\"next-saved-query\"\n              disabled={disableNext}\n              onClick={() => handleDataChange(false)}\n            >\n              {t('Next')}\n            </Button>\n            <Button\n              data-test=\"open-in-sql-lab\"\n              key=\"open-in-sql-lab\"\n              buttonStyle=\"primary\"\n              onClick={({ metaKey }) =>\n                openInSqlLab(savedQuery.id, Boolean(metaKey))\n              }\n            >\n              {t('Open in SQL Lab')}\n            </Button>\n          </>\n        }\n      >\n        <QueryTitle>{t('Query name')}</QueryTitle>\n        <QueryLabel>{savedQuery.label}</QueryLabel>\n        <SyntaxHighlighterCopy\n          language=\"sql\"\n          addDangerToast={addDangerToast}\n          addSuccessToast={addSuccessToast}\n        >\n          {savedQuery.sql || ''}\n        </SyntaxHighlighterCopy>\n      </StyledModal>\n    </div>\n  );\n};\n\nexport default withToasts(SavedQueryPreviewModal);\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport {\n  FeatureFlag,\n  isFeatureEnabled,\n  styled,\n  SupersetClient,\n  t,\n} from '@superset-ui/core';\nimport { useCallback, useMemo, useState, MouseEvent } from 'react';\nimport { Link, useHistory } from 'react-router-dom';\nimport rison from 'rison';\nimport {\n  createErrorHandler,\n  createFetchDistinct,\n  createFetchRelated,\n} from 'src/views/CRUD/utils';\nimport { useSelector } from 'react-redux';\nimport Popover from 'src/components/Popover';\nimport withToasts from 'src/components/MessageToasts/withToasts';\nimport { useListViewResource } from 'src/views/CRUD/hooks';\nimport ConfirmStatusChange from 'src/components/ConfirmStatusChange';\nimport handleResourceExport from 'src/utils/export';\nimport SubMenu, { ButtonProps, SubMenuProps } from 'src/features/home/SubMenu';\nimport ListView, {\n  FilterOperator,\n  Filters,\n  ListViewProps,\n} from 'src/components/ListView';\nimport Loading from 'src/components/Loading';\nimport DeleteModal from 'src/components/DeleteModal';\nimport ActionsBar, { ActionProps } from 'src/components/ListView/ActionsBar';\nimport { TagsList } from 'src/components/Tags';\nimport { Tooltip } from 'src/components/Tooltip';\nimport { commonMenuData } from 'src/features/home/commonMenuData';\nimport { QueryObjectColumns, SavedQueryObject } from 'src/views/CRUD/types';\nimport copyTextToClipboard from 'src/utils/copy';\nimport Tag from 'src/types/TagType';\nimport ImportModelsModal from 'src/components/ImportModal/index';\nimport { ModifiedInfo } from 'src/components/AuditInfo';\nimport { loadTags } from 'src/components/Tags/utils';\nimport Icons from 'src/components/Icons';\nimport { UserWithPermissionsAndRoles } from 'src/types/bootstrapTypes';\nimport SavedQueryPreviewModal from 'src/features/queries/SavedQueryPreviewModal';\nimport { findPermission } from 'src/utils/findPermission';\n\nconst PAGE_SIZE = 25;\nconst PASSWORDS_NEEDED_MESSAGE = t(\n  'The passwords for the databases below are needed in order to ' +\n    'import them together with the saved queries. Please note that the ' +\n    '\"Secure Extra\" and \"Certificate\" sections of ' +\n    'the database configuration are not present in export files, and ' +\n    'should be added manually after the import if they are needed.',\n);\nconst CONFIRM_OVERWRITE_MESSAGE = t(\n  'You are importing one or more saved queries that already exist. ' +\n    'Overwriting might cause you to lose some of your work. Are you ' +\n    'sure you want to overwrite?',\n);\n\ninterface SavedQueryListProps {\n  addDangerToast: (msg: string) => void;\n  addSuccessToast: (msg: string) => void;\n  user: {\n    userId: string | number;\n    firstName: string;\n    lastName: string;\n  };\n}\n\nconst StyledTableLabel = styled.div`\n  .count {\n    margin-left: 5px;\n    color: ${({ theme }) => theme.colors.primary.base};\n    text-decoration: underline;\n    cursor: pointer;\n  }\n`;\n\nconst StyledPopoverItem = styled.div`\n  color: ${({ theme }) => theme.colors.grayscale.dark2};\n`;\n\nfunction SavedQueryList({\n  addDangerToast,\n  addSuccessToast,\n  user,\n}: SavedQueryListProps) {\n  const {\n    state: {\n      loading,\n      resourceCount: queryCount,\n      resourceCollection: queries,\n      bulkSelectEnabled,\n    },\n    hasPerm,\n    fetchData,\n    toggleBulkSelect,\n    refreshData,\n  } = useListViewResource<SavedQueryObject>(\n    'saved_query',\n    t('Saved queries'),\n    addDangerToast,\n  );\n  const { roles } = useSelector<any, UserWithPermissionsAndRoles>(\n    state => state.user,\n  );\n  const canReadTag = findPermission('can_read', 'Tag', roles);\n  const [queryCurrentlyDeleting, setQueryCurrentlyDeleting] =\n    useState<SavedQueryObject | null>(null);\n  const [savedQueryCurrentlyPreviewing, setSavedQueryCurrentlyPreviewing] =\n    useState<SavedQueryObject | null>(null);\n  const [importingSavedQuery, showImportModal] = useState<boolean>(false);\n  const [passwordFields, setPasswordFields] = useState<string[]>([]);\n  const [preparingExport, setPreparingExport] = useState<boolean>(false);\n  const [sshTunnelPasswordFields, setSSHTunnelPasswordFields] = useState<\n    string[]\n  >([]);\n  const [sshTunnelPrivateKeyFields, setSSHTunnelPrivateKeyFields] = useState<\n    string[]\n  >([]);\n  const [\n    sshTunnelPrivateKeyPasswordFields,\n    setSSHTunnelPrivateKeyPasswordFields,\n  ] = useState<string[]>([]);\n  const history = useHistory();\n\n  const openSavedQueryImportModal = () => {\n    showImportModal(true);\n  };\n\n  const closeSavedQueryImportModal = () => {\n    showImportModal(false);\n  };\n\n  const handleSavedQueryImport = () => {\n    showImportModal(false);\n    refreshData();\n    addSuccessToast(t('Query imported'));\n  };\n\n  const canCreate = hasPerm('can_write');\n  const canEdit = hasPerm('can_write');\n  const canDelete = hasPerm('can_write');\n  const canExport = hasPerm('can_export');\n\n  const handleSavedQueryPreview = useCallback(\n    (id: number) => {\n      SupersetClient.get({\n        endpoint: `/api/v1/saved_query/${id}`,\n      }).then(\n        ({ json = {} }) => {\n          setSavedQueryCurrentlyPreviewing({ ...json.result });\n        },\n        createErrorHandler(errMsg =>\n          addDangerToast(\n            t('There was an issue previewing the selected query %s', errMsg),\n          ),\n        ),\n      );\n    },\n    [addDangerToast],\n  );\n\n  const menuData: SubMenuProps = {\n    activeChild: 'Saved queries',\n    ...commonMenuData,\n  };\n\n  const subMenuButtons: Array<ButtonProps> = [];\n\n  if (canDelete) {\n    subMenuButtons.push({\n      name: t('Bulk select'),\n      onClick: toggleBulkSelect,\n      buttonStyle: 'secondary',\n    });\n  }\n\n  subMenuButtons.push({\n    name: (\n      <Link to=\"/sqllab?new=true\">\n        <i className=\"fa fa-plus\" /> {t('Query')}\n      </Link>\n    ),\n    buttonStyle: 'primary',\n  });\n\n  if (canCreate) {\n    subMenuButtons.push({\n      name: (\n        <Tooltip\n          id=\"import-tooltip\"\n          title={t('Import queries')}\n          placement=\"bottomRight\"\n          data-test=\"import-tooltip-test\"\n        >\n          <Icons.Import data-test=\"import-icon\" />\n        </Tooltip>\n      ),\n      buttonStyle: 'link',\n      onClick: openSavedQueryImportModal,\n      'data-test': 'import-button',\n    });\n  }\n\n  menuData.buttons = subMenuButtons;\n\n  // Action methods\n  const openInSqlLab = (id: number, openInNewWindow: boolean) => {\n    if (openInNewWindow) {\n      window.open(`/sqllab?savedQueryId=${id}`);\n    } else {\n      history.push(`/sqllab?savedQueryId=${id}`);\n    }\n  };\n\n  const copyQueryLink = useCallback(\n    (id: number) => {\n      copyTextToClipboard(() =>\n        Promise.resolve(`${window.location.origin}/sqllab?savedQueryId=${id}`),\n      )\n        .then(() => {\n          addSuccessToast(t('Link Copied!'));\n        })\n        .catch(() => {\n          addDangerToast(t('Sorry, your browser does not support copying.'));\n        });\n    },\n    [addDangerToast, addSuccessToast],\n  );\n\n  const handleQueryDelete = ({ id, label }: SavedQueryObject) => {\n    SupersetClient.delete({\n      endpoint: `/api/v1/saved_query/${id}`,\n    }).then(\n      () => {\n        refreshData();\n        setQueryCurrentlyDeleting(null);\n        addSuccessToast(t('Deleted: %s', label));\n      },\n      createErrorHandler(errMsg =>\n        addDangerToast(t('There was an issue deleting %s: %s', label, errMsg)),\n      ),\n    );\n  };\n\n  const handleBulkSavedQueryExport = (\n    savedQueriesToExport: SavedQueryObject[],\n  ) => {\n    const ids = savedQueriesToExport.map(({ id }) => id);\n    handleResourceExport('saved_query', ids, () => {\n      setPreparingExport(false);\n    });\n    setPreparingExport(true);\n  };\n\n  const handleBulkQueryDelete = (queriesToDelete: SavedQueryObject[]) => {\n    SupersetClient.delete({\n      endpoint: `/api/v1/saved_query/?q=${rison.encode(\n        queriesToDelete.map(({ id }) => id),\n      )}`,\n    }).then(\n      ({ json = {} }) => {\n        refreshData();\n        addSuccessToast(json.message);\n      },\n      createErrorHandler(errMsg =>\n        addDangerToast(\n          t('There was an issue deleting the selected queries: %s', errMsg),\n        ),\n      ),\n    );\n  };\n\n  const initialSort = [{ id: 'changed_on_delta_humanized', desc: true }];\n  const columns = useMemo(\n    () => [\n      {\n        accessor: 'label',\n        Header: t('Name'),\n      },\n      {\n        accessor: 'description',\n        Header: t('Description'),\n      },\n      {\n        accessor: 'database.database_name',\n        Header: t('Database'),\n        size: 'xl',\n      },\n      {\n        accessor: 'database',\n        hidden: true,\n        disableSortBy: true,\n      },\n      {\n        accessor: 'schema',\n        Header: t('Schema'),\n        size: 'xl',\n      },\n      {\n        Cell: ({\n          row: {\n            original: { sql_tables: tables = [] },\n          },\n        }: any) => {\n          const names = tables.map((table: any) => table.table);\n          const main = names?.shift() || '';\n\n          if (names.length) {\n            return (\n              <StyledTableLabel>\n                <span>{main}</span>\n                <Popover\n                  placement=\"right\"\n                  title={t('TABLES')}\n                  trigger=\"click\"\n                  content={\n                    <>\n                      {names.map((name: string) => (\n                        <StyledPopoverItem key={name}>{name}</StyledPopoverItem>\n                      ))}\n                    </>\n                  }\n                >\n                  <span className=\"count\">(+{names.length})</span>\n                </Popover>\n              </StyledTableLabel>\n            );\n          }\n\n          return main;\n        },\n        accessor: 'sql_tables',\n        Header: t('Tables'),\n        size: 'xl',\n        disableSortBy: true,\n      },\n      {\n        Cell: ({\n          row: {\n            original: { tags = [] },\n          },\n        }: any) => (\n          // Only show custom type tags\n          <TagsList tags={tags.filter((tag: Tag) => tag.type === 1)} />\n        ),\n        Header: t('Tags'),\n        accessor: 'tags',\n        disableSortBy: true,\n        hidden: !isFeatureEnabled(FeatureFlag.TaggingSystem),\n      },\n      {\n        Cell: ({\n          row: {\n            original: {\n              changed_by: changedBy,\n              changed_on_delta_humanized: changedOn,\n            },\n          },\n        }: any) => <ModifiedInfo user={changedBy} date={changedOn} />,\n        Header: t('Last modified'),\n        accessor: 'changed_on_delta_humanized',\n        size: 'xl',\n      },\n      {\n        Cell: ({ row: { original } }: any) => {\n          const handlePreview = () => {\n            handleSavedQueryPreview(original.id);\n          };\n          const handleEdit = ({ metaKey }: MouseEvent) =>\n            openInSqlLab(original.id, Boolean(metaKey));\n          const handleCopy = () => copyQueryLink(original.id);\n          const handleExport = () => handleBulkSavedQueryExport([original]);\n          const handleDelete = () => setQueryCurrentlyDeleting(original);\n\n          const actions = [\n            {\n              label: 'preview-action',\n              tooltip: t('Query preview'),\n              placement: 'bottom',\n              icon: 'Binoculars',\n              onClick: handlePreview,\n            },\n            canEdit && {\n              label: 'edit-action',\n              tooltip: t('Edit query'),\n              placement: 'bottom',\n              icon: 'Edit',\n              onClick: handleEdit,\n            },\n            {\n              label: 'copy-action',\n              tooltip: t('Copy query URL'),\n              placement: 'bottom',\n              icon: 'Copy',\n              onClick: handleCopy,\n            },\n            canExport && {\n              label: 'export-action',\n              tooltip: t('Export query'),\n              placement: 'bottom',\n              icon: 'Share',\n              onClick: handleExport,\n            },\n            canDelete && {\n              label: 'delete-action',\n              tooltip: t('Delete query'),\n              placement: 'bottom',\n              icon: 'Trash',\n              onClick: handleDelete,\n            },\n          ].filter(item => !!item);\n\n          return <ActionsBar actions={actions as ActionProps[]} />;\n        },\n        Header: t('Actions'),\n        id: 'actions',\n        disableSortBy: true,\n      },\n      {\n        accessor: QueryObjectColumns.ChangedBy,\n        hidden: true,\n      },\n    ],\n    [canDelete, canEdit, canExport, copyQueryLink, handleSavedQueryPreview],\n  );\n\n  const filters: Filters = useMemo(\n    () => [\n      {\n        Header: t('Search'),\n        id: 'label',\n        key: 'search',\n        input: 'search',\n        operator: FilterOperator.AllText,\n        toolTipDescription:\n          'Searches all text fields: Name, Description, Database & Schema',\n      },\n      {\n        Header: t('Database'),\n        key: 'database',\n        id: 'database',\n        input: 'select',\n        operator: FilterOperator.RelationOneMany,\n        unfilteredLabel: t('All'),\n        fetchSelects: createFetchRelated(\n          'saved_query',\n          'database',\n          createErrorHandler(errMsg =>\n            addDangerToast(\n              t(\n                'An error occurred while fetching dataset datasource values: %s',\n                errMsg,\n              ),\n            ),\n          ),\n        ),\n        paginate: true,\n      },\n      {\n        Header: t('Schema'),\n        id: 'schema',\n        key: 'schema',\n        input: 'select',\n        operator: FilterOperator.Equals,\n        unfilteredLabel: 'All',\n        fetchSelects: createFetchDistinct(\n          'saved_query',\n          'schema',\n          createErrorHandler(errMsg =>\n            addDangerToast(\n              t('An error occurred while fetching schema values: %s', errMsg),\n            ),\n          ),\n        ),\n        paginate: true,\n      },\n      ...((isFeatureEnabled(FeatureFlag.TaggingSystem) && canReadTag\n        ? [\n            {\n              Header: t('Tag'),\n              id: 'tags',\n              key: 'tags',\n              input: 'select',\n              operator: FilterOperator.SavedQueryTagById,\n              fetchSelects: loadTags,\n            },\n          ]\n        : []) as Filters),\n      {\n        Header: t('Modified by'),\n        key: 'changed_by',\n        id: 'changed_by',\n        input: 'select',\n        operator: FilterOperator.RelationOneMany,\n        unfilteredLabel: t('All'),\n        fetchSelects: createFetchRelated(\n          'saved_query',\n          'changed_by',\n          createErrorHandler(errMsg =>\n            t(\n              'An error occurred while fetching dataset datasource values: %s',\n              errMsg,\n            ),\n          ),\n          user,\n        ),\n        paginate: true,\n      },\n    ],\n    [addDangerToast],\n  );\n\n  return (\n    <>\n      <SubMenu {...menuData} />\n      {queryCurrentlyDeleting && (\n        <DeleteModal\n          description={t(\n            'This action will permanently delete the saved query.',\n          )}\n          onConfirm={() => {\n            if (queryCurrentlyDeleting) {\n              handleQueryDelete(queryCurrentlyDeleting);\n            }\n          }}\n          onHide={() => setQueryCurrentlyDeleting(null)}\n          open\n          title={t('Delete Query?')}\n        />\n      )}\n      {savedQueryCurrentlyPreviewing && (\n        <SavedQueryPreviewModal\n          fetchData={handleSavedQueryPreview}\n          onHide={() => setSavedQueryCurrentlyPreviewing(null)}\n          savedQuery={savedQueryCurrentlyPreviewing}\n          queries={queries}\n          openInSqlLab={openInSqlLab}\n          show\n        />\n      )}\n      <ConfirmStatusChange\n        title={t('Please confirm')}\n        description={t('Are you sure you want to delete the selected queries?')}\n        onConfirm={handleBulkQueryDelete}\n      >\n        {confirmDelete => {\n          const bulkActions: ListViewProps['bulkActions'] = [];\n          if (canDelete) {\n            bulkActions.push({\n              key: 'delete',\n              name: t('Delete'),\n              onSelect: confirmDelete,\n              type: 'danger',\n            });\n          }\n          if (canExport) {\n            bulkActions.push({\n              key: 'export',\n              name: t('Export'),\n              type: 'primary',\n              onSelect: handleBulkSavedQueryExport,\n            });\n          }\n          return (\n            <ListView<SavedQueryObject>\n              className=\"saved_query-list-view\"\n              columns={columns}\n              count={queryCount}\n              data={queries}\n              fetchData={fetchData}\n              filters={filters}\n              initialSort={initialSort}\n              loading={loading}\n              pageSize={PAGE_SIZE}\n              bulkActions={bulkActions}\n              addSuccessToast={addSuccessToast}\n              addDangerToast={addDangerToast}\n              bulkSelectEnabled={bulkSelectEnabled}\n              disableBulkSelect={toggleBulkSelect}\n              highlightRowId={savedQueryCurrentlyPreviewing?.id}\n              enableBulkTag\n              bulkTagResourceName=\"query\"\n              refreshData={refreshData}\n            />\n          );\n        }}\n      </ConfirmStatusChange>\n\n      <ImportModelsModal\n        resourceName=\"saved_query\"\n        resourceLabel={t('queries')}\n        passwordsNeededMessage={PASSWORDS_NEEDED_MESSAGE}\n        confirmOverwriteMessage={CONFIRM_OVERWRITE_MESSAGE}\n        addDangerToast={addDangerToast}\n        addSuccessToast={addSuccessToast}\n        onModelImport={handleSavedQueryImport}\n        show={importingSavedQuery}\n        onHide={closeSavedQueryImportModal}\n        passwordFields={passwordFields}\n        setPasswordFields={setPasswordFields}\n        sshTunnelPasswordFields={sshTunnelPasswordFields}\n        setSSHTunnelPasswordFields={setSSHTunnelPasswordFields}\n        sshTunnelPrivateKeyFields={sshTunnelPrivateKeyFields}\n        setSSHTunnelPrivateKeyFields={setSSHTunnelPrivateKeyFields}\n        sshTunnelPrivateKeyPasswordFields={sshTunnelPrivateKeyPasswordFields}\n        setSSHTunnelPrivateKeyPasswordFields={\n          setSSHTunnelPrivateKeyPasswordFields\n        }\n      />\n      {preparingExport && <Loading />}\n    </>\n  );\n}\n\nexport default withToasts(SavedQueryList);\n"],"names":["StyledActions","styled","span","theme","colors","primary","base","ActionWrapper","grayscale","ActionsBar","actions","_jsx","className","children","map","action","index","ActionIcon","Icons","icon","tooltip","Tooltip","id","label","title","placement","role","tabIndex","onClick","QueryTitle","div","secondary","light2","typography","sizes","s","QueryLabel","dark2","m","StyledModal","Modal","xs","weights","normal","l","withToasts","SavedQueryPreviewModal","fetchData","onHide","openInSqlLab","queries","savedQuery","show","addDangerToast","addSuccessToast","handleKeyPress","handleDataChange","disablePrevious","disableNext","useQueryPreviewState","currentQueryId","onKeyUp","_jsxs","t","footer","_Fragment","Button","disabled","buttonStyle","metaKey","Boolean","SyntaxHighlighterCopy","language","sql","PASSWORDS_NEEDED_MESSAGE","CONFIRM_OVERWRITE_MESSAGE","StyledTableLabel","StyledPopoverItem","user","state","loading","resourceCount","queryCount","resourceCollection","bulkSelectEnabled","hasPerm","toggleBulkSelect","refreshData","useListViewResource","roles","useSelector","canReadTag","findPermission","queryCurrentlyDeleting","setQueryCurrentlyDeleting","useState","savedQueryCurrentlyPreviewing","setSavedQueryCurrentlyPreviewing","importingSavedQuery","showImportModal","passwordFields","setPasswordFields","preparingExport","setPreparingExport","sshTunnelPasswordFields","setSSHTunnelPasswordFields","sshTunnelPrivateKeyFields","setSSHTunnelPrivateKeyFields","sshTunnelPrivateKeyPasswordFields","setSSHTunnelPrivateKeyPasswordFields","history","useHistory","canCreate","canEdit","canDelete","canExport","handleSavedQueryPreview","useCallback","SupersetClient","get","endpoint","then","json","result","createErrorHandler","errMsg","menuData","activeChild","commonMenuData","subMenuButtons","push","name","Link","to","Import","openSavedQueryImportModal","buttons","openInNewWindow","window","open","copyQueryLink","copyTextToClipboard","Promise","resolve","location","origin","catch","handleBulkSavedQueryExport","savedQueriesToExport","ids","handleResourceExport","initialSort","desc","columns","useMemo","accessor","Header","size","hidden","disableSortBy","Cell","row","original","sql_tables","tables","names","table","main","shift","length","Popover","trigger","content","tags","TagsList","filter","tag","type","isFeatureEnabled","FeatureFlag","TaggingSystem","changed_by","changedBy","changed_on_delta_humanized","changedOn","ModifiedInfo","date","handlePreview","handleEdit","handleCopy","handleExport","handleDelete","item","QueryObjectColumns","ChangedBy","filters","key","input","operator","FilterOperator","AllText","toolTipDescription","RelationOneMany","unfilteredLabel","fetchSelects","createFetchRelated","paginate","Equals","createFetchDistinct","SavedQueryTagById","loadTags","SubMenu","DeleteModal","description","onConfirm","handleQueryDelete","delete","ConfirmStatusChange","queriesToDelete","rison","message","confirmDelete","bulkActions","onSelect","ListView","count","data","pageSize","disableBulkSelect","highlightRowId","enableBulkTag","bulkTagResourceName","ImportModelsModal","resourceName","resourceLabel","passwordsNeededMessage","confirmOverwriteMessage","onModelImport","handleSavedQueryImport","closeSavedQueryImportModal","Loading"],"sourceRoot":""}