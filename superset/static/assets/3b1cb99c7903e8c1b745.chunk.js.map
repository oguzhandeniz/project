{"version":3,"file":"3b1cb99c7903e8c1b745.chunk.js","mappings":"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","sources":["webpack://superset/./src/explore/components/PropertiesModal/index.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { ChangeEvent, useMemo, useState, useCallback, useEffect } from 'react';\n\nimport Modal from 'src/components/Modal';\nimport { Input, TextArea } from 'src/components/Input';\nimport Button from 'src/components/Button';\nimport { AsyncSelect, Row, Col, AntdForm } from 'src/components';\nimport { SelectValue } from 'antd/lib/select';\nimport rison from 'rison';\nimport {\n  t,\n  SupersetClient,\n  styled,\n  isFeatureEnabled,\n  FeatureFlag,\n  getClientErrorObject,\n  ensureIsArray,\n} from '@superset-ui/core';\nimport Chart, { Slice } from 'src/types/Chart';\nimport withToasts from 'src/components/MessageToasts/withToasts';\nimport { loadTags } from 'src/components/Tags/utils';\nimport { fetchTags, OBJECT_TYPES } from 'src/features/tags/tags';\nimport TagType from 'src/types/TagType';\n\nexport type PropertiesModalProps = {\n  slice: Slice;\n  show: boolean;\n  onHide: () => void;\n  onSave: (chart: Chart) => void;\n  permissionsError?: string;\n  existingOwners?: SelectValue;\n  addSuccessToast: (msg: string) => void;\n};\n\nconst FormItem = AntdForm.Item;\n\nconst StyledFormItem = styled(AntdForm.Item)`\n  margin-bottom: 0;\n`;\n\nconst StyledHelpBlock = styled.span`\n  margin-bottom: 0;\n`;\n\nfunction PropertiesModal({\n  slice,\n  onHide,\n  onSave,\n  show,\n  addSuccessToast,\n}: PropertiesModalProps) {\n  const [submitting, setSubmitting] = useState(false);\n  const [form] = AntdForm.useForm();\n  // values of form inputs\n  const [name, setName] = useState(slice.slice_name || '');\n  const [selectedOwners, setSelectedOwners] = useState<SelectValue | null>(\n    null,\n  );\n\n  const [tags, setTags] = useState<TagType[]>([]);\n\n  const tagsAsSelectValues = useMemo(() => {\n    const selectTags = tags.map((tag: { id: number; name: string }) => ({\n      value: tag.id,\n      label: tag.name,\n    }));\n    return selectTags;\n  }, [tags.length]);\n\n  function showError({ error, statusText, message }: any) {\n    let errorText = error || statusText || t('An error has occurred');\n    if (message === 'Forbidden') {\n      errorText = t('You do not have permission to edit this chart');\n    }\n    Modal.error({\n      title: t('Error'),\n      content: errorText,\n      okButtonProps: { danger: true, className: 'btn-danger' },\n    });\n  }\n\n  const fetchChartOwners = useCallback(\n    async function fetchChartOwners() {\n      try {\n        const response = await SupersetClient.get({\n          endpoint: `/api/v1/chart/${slice.slice_id}`,\n        });\n        const chart = response.json.result;\n        setSelectedOwners(\n          chart?.owners?.map((owner: any) => ({\n            value: owner.id,\n            label: `${owner.first_name} ${owner.last_name}`,\n          })),\n        );\n      } catch (response) {\n        const clientError = await getClientErrorObject(response);\n        showError(clientError);\n      }\n    },\n    [slice.slice_id],\n  );\n\n  const loadOptions = useMemo(\n    () =>\n      (input = '', page: number, pageSize: number) => {\n        const query = rison.encode({\n          filter: input,\n          page,\n          page_size: pageSize,\n        });\n        return SupersetClient.get({\n          endpoint: `/api/v1/chart/related/owners?q=${query}`,\n        }).then(response => ({\n          data: response.json.result\n            .filter((item: { extra: { active: boolean } }) => item.extra.active)\n            .map((item: { value: number; text: string }) => ({\n              value: item.value,\n              label: item.text,\n            })),\n          totalCount: response.json.count,\n        }));\n      },\n    [],\n  );\n\n  const onSubmit = async (values: {\n    certified_by?: string;\n    certification_details?: string;\n    description?: string;\n    cache_timeout?: number;\n  }) => {\n    setSubmitting(true);\n    const {\n      certified_by: certifiedBy,\n      certification_details: certificationDetails,\n      description,\n      cache_timeout: cacheTimeout,\n    } = values;\n    const payload: { [key: string]: any } = {\n      slice_name: name || null,\n      description: description || null,\n      cache_timeout: cacheTimeout || null,\n      certified_by: certifiedBy || null,\n      certification_details:\n        certifiedBy && certificationDetails ? certificationDetails : null,\n    };\n    if (selectedOwners) {\n      payload.owners = (\n        selectedOwners as {\n          value: number;\n          label: string;\n        }[]\n      ).map(o => o.value);\n    }\n    if (isFeatureEnabled(FeatureFlag.TaggingSystem)) {\n      payload.tags = tags.map(tag => tag.id);\n    }\n\n    try {\n      const res = await SupersetClient.put({\n        endpoint: `/api/v1/chart/${slice.slice_id}`,\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(payload),\n      });\n      // update the redux state\n      const updatedChart = {\n        ...payload,\n        ...res.json.result,\n        tags,\n        id: slice.slice_id,\n        owners: selectedOwners,\n      };\n      onSave(updatedChart);\n      addSuccessToast(t('Chart properties updated'));\n      onHide();\n    } catch (res) {\n      const clientError = await getClientErrorObject(res);\n      showError(clientError);\n    }\n    setSubmitting(false);\n  };\n\n  const ownersLabel = t('Owners');\n\n  // get the owners of this slice\n  useEffect(() => {\n    fetchChartOwners();\n  }, [fetchChartOwners]);\n\n  // update name after it's changed in another modal\n  useEffect(() => {\n    setName(slice.slice_name || '');\n  }, [slice.slice_name]);\n\n  useEffect(() => {\n    if (!isFeatureEnabled(FeatureFlag.TaggingSystem)) return;\n    try {\n      fetchTags(\n        {\n          objectType: OBJECT_TYPES.CHART,\n          objectId: slice.slice_id,\n          includeTypes: false,\n        },\n        (tags: TagType[]) => setTags(tags),\n        error => {\n          showError(error);\n        },\n      );\n    } catch (error) {\n      showError(error);\n    }\n  }, [slice.slice_id]);\n\n  const handleChangeTags = (tags: { label: string; value: number }[]) => {\n    const parsedTags: TagType[] = ensureIsArray(tags).map(r => ({\n      id: r.value,\n      name: r.label,\n    }));\n    setTags(parsedTags);\n  };\n\n  const handleClearTags = () => {\n    setTags([]);\n  };\n\n  return (\n    <Modal\n      show={show}\n      onHide={onHide}\n      title={t('Edit Chart Properties')}\n      footer={\n        <>\n          <Button\n            data-test=\"properties-modal-cancel-button\"\n            htmlType=\"button\"\n            buttonSize=\"small\"\n            onClick={onHide}\n            cta\n          >\n            {t('Cancel')}\n          </Button>\n          <Button\n            data-test=\"properties-modal-save-button\"\n            htmlType=\"submit\"\n            buttonSize=\"small\"\n            buttonStyle=\"primary\"\n            onClick={form.submit}\n            disabled={submitting || !name || slice.is_managed_externally}\n            tooltip={\n              slice.is_managed_externally\n                ? t(\n                    \"This chart is managed externally, and can't be edited in Superset\",\n                  )\n                : ''\n            }\n            cta\n          >\n            {t('Save')}\n          </Button>\n        </>\n      }\n      responsive\n      wrapProps={{ 'data-test': 'properties-edit-modal' }}\n    >\n      <AntdForm\n        form={form}\n        onFinish={onSubmit}\n        layout=\"vertical\"\n        initialValues={{\n          name: slice.slice_name || '',\n          description: slice.description || '',\n          cache_timeout: slice.cache_timeout != null ? slice.cache_timeout : '',\n          certified_by: slice.certified_by || '',\n          certification_details:\n            slice.certified_by && slice.certification_details\n              ? slice.certification_details\n              : '',\n        }}\n      >\n        <Row gutter={16}>\n          <Col xs={24} md={12}>\n            <h3>{t('Basic information')}</h3>\n            <FormItem label={t('Name')} required>\n              <Input\n                aria-label={t('Name')}\n                name=\"name\"\n                data-test=\"properties-modal-name-input\"\n                type=\"text\"\n                value={name}\n                onChange={(event: ChangeEvent<HTMLInputElement>) =>\n                  setName(event.target.value ?? '')\n                }\n              />\n            </FormItem>\n            <FormItem>\n              <StyledFormItem label={t('Description')} name=\"description\">\n                <TextArea rows={3} style={{ maxWidth: '100%' }} />\n              </StyledFormItem>\n              <StyledHelpBlock className=\"help-block\">\n                {t(\n                  'The description can be displayed as widget headers in the dashboard view. Supports markdown.',\n                )}\n              </StyledHelpBlock>\n            </FormItem>\n            <h3>{t('Certification')}</h3>\n            <FormItem>\n              <StyledFormItem label={t('Certified by')} name=\"certified_by\">\n                <Input aria-label={t('Certified by')} />\n              </StyledFormItem>\n              <StyledHelpBlock className=\"help-block\">\n                {t('Person or group that has certified this chart.')}\n              </StyledHelpBlock>\n            </FormItem>\n            <FormItem>\n              <StyledFormItem\n                label={t('Certification details')}\n                name=\"certification_details\"\n              >\n                <Input aria-label={t('Certification details')} />\n              </StyledFormItem>\n              <StyledHelpBlock className=\"help-block\">\n                {t(\n                  'Any additional detail to show in the certification tooltip.',\n                )}\n              </StyledHelpBlock>\n            </FormItem>\n          </Col>\n          <Col xs={24} md={12}>\n            <h3>{t('Configuration')}</h3>\n            <FormItem>\n              <StyledFormItem label={t('Cache timeout')} name=\"cache_timeout\">\n                <Input aria-label=\"Cache timeout\" />\n              </StyledFormItem>\n              <StyledHelpBlock className=\"help-block\">\n                {t(\n                  \"Duration (in seconds) of the caching timeout for this chart. Set to -1 to bypass the cache. Note this defaults to the dataset's timeout if undefined.\",\n                )}\n              </StyledHelpBlock>\n            </FormItem>\n            <h3 style={{ marginTop: '1em' }}>{t('Access')}</h3>\n            <FormItem label={ownersLabel}>\n              <AsyncSelect\n                ariaLabel={ownersLabel}\n                mode=\"multiple\"\n                name=\"owners\"\n                value={selectedOwners || []}\n                onChange={setSelectedOwners}\n                options={loadOptions}\n                disabled={!selectedOwners}\n                allowClear\n              />\n              <StyledHelpBlock className=\"help-block\">\n                {t(\n                  'A list of users who can alter the chart. Searchable by name or username.',\n                )}\n              </StyledHelpBlock>\n            </FormItem>\n            {isFeatureEnabled(FeatureFlag.TaggingSystem) && (\n              <h3 css={{ marginTop: '1em' }}>{t('Tags')}</h3>\n            )}\n            {isFeatureEnabled(FeatureFlag.TaggingSystem) && (\n              <FormItem>\n                <AsyncSelect\n                  ariaLabel=\"Tags\"\n                  mode=\"multiple\"\n                  value={tagsAsSelectValues}\n                  options={loadTags}\n                  onChange={handleChangeTags}\n                  onClear={handleClearTags}\n                  allowClear\n                />\n                <StyledHelpBlock className=\"help-block\">\n                  {t('A list of tags that have been applied to this chart.')}\n                </StyledHelpBlock>\n              </FormItem>\n            )}\n          </Col>\n        </Row>\n      </AntdForm>\n    </Modal>\n  );\n}\n\nexport default withToasts(PropertiesModal);\n"],"names":["FormItem","AntdForm","Item","StyledFormItem","styled","StyledHelpBlock","span","_ref","name","styles","withToasts","slice","onHide","onSave","show","addSuccessToast","submitting","setSubmitting","useState","form","useForm","setName","slice_name","selectedOwners","setSelectedOwners","tags","setTags","tagsAsSelectValues","useMemo","map","tag","value","id","label","length","showError","error","statusText","message","errorText","t","Modal","title","content","okButtonProps","danger","className","fetchChartOwners","useCallback","async","_chart$owners","chart","SupersetClient","get","endpoint","slice_id","json","result","owners","owner","first_name","last_name","response","getClientErrorObject","loadOptions","input","page","pageSize","query","rison","filter","page_size","then","data","item","extra","active","text","totalCount","count","ownersLabel","useEffect","isFeatureEnabled","FeatureFlag","TaggingSystem","fetchTags","objectType","OBJECT_TYPES","CHART","objectId","includeTypes","_jsx","footer","_jsxs","_Fragment","children","Button","htmlType","buttonSize","onClick","cta","buttonStyle","submit","disabled","is_managed_externally","tooltip","responsive","wrapProps","onFinish","values","certified_by","certifiedBy","certification_details","certificationDetails","description","cache_timeout","cacheTimeout","payload","o","res","put","headers","body","JSON","stringify","updatedChart","layout","initialValues","Row","gutter","Col","xs","md","required","Input","type","onChange","event","_event$target$value","target","TextArea","rows","style","maxWidth","marginTop","AsyncSelect","ariaLabel","mode","options","allowClear","css","loadTags","parsedTags","ensureIsArray","r","onClear","handleClearTags"],"sourceRoot":""}