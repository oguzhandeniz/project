{"version":3,"file":"d269c6c7e4bd18b35a53.chunk.js","mappings":"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","sources":["webpack://superset/./src/explore/components/controls/TextAreaControl.jsx","webpack://superset/./src/components/CronPicker/CronPicker.tsx","webpack://superset/./src/components/DeleteModal/index.tsx","webpack://superset/./src/components/ModalTrigger/index.tsx","webpack://superset/./src/components/TimezoneSelector/index.tsx","webpack://superset/./src/explore/components/ControlHeader.tsx","webpack://superset/./src/features/alerts/components/NumberInput.tsx","webpack://superset/./src/features/alerts/components/AlertReportCronScheduler.tsx","webpack://superset/./src/features/alerts/components/NotificationMethod.tsx","webpack://superset/./src/features/alerts/components/ValidatedPanelHeader.tsx","webpack://superset/./src/features/alerts/components/StyledPanel.tsx","webpack://superset/./src/features/alerts/buildErrorTooltipMessage.tsx","webpack://superset/./src/features/alerts/AlertReportModal.tsx","webpack://superset/./src/features/alerts/types.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { TextArea } from 'src/components/Input';\nimport { t, withTheme } from '@superset-ui/core';\n\nimport Button from 'src/components/Button';\nimport { TextAreaEditor } from 'src/components/AsyncAceEditor';\nimport ModalTrigger from 'src/components/ModalTrigger';\n\nimport ControlHeader from 'src/explore/components/ControlHeader';\n\nconst propTypes = {\n  name: PropTypes.string,\n  onChange: PropTypes.func,\n  initialValue: PropTypes.string,\n  height: PropTypes.number,\n  minLines: PropTypes.number,\n  maxLines: PropTypes.number,\n  offerEditInModal: PropTypes.bool,\n  language: PropTypes.oneOf([\n    null,\n    'json',\n    'html',\n    'sql',\n    'markdown',\n    'javascript',\n  ]),\n  aboveEditorSection: PropTypes.node,\n  readOnly: PropTypes.bool,\n  resize: PropTypes.oneOf([\n    null,\n    'block',\n    'both',\n    'horizontal',\n    'inline',\n    'none',\n    'vertical',\n  ]),\n  textAreaStyles: PropTypes.object,\n};\n\nconst defaultProps = {\n  onChange: () => {},\n  initialValue: '',\n  height: 250,\n  minLines: 3,\n  maxLines: 10,\n  offerEditInModal: true,\n  readOnly: false,\n  resize: null,\n  textAreaStyles: {},\n};\n\nclass TextAreaControl extends Component {\n  onControlChange(event) {\n    const { value } = event.target;\n    this.props.onChange(value);\n  }\n\n  onAreaEditorChange(value) {\n    this.props.onChange(value);\n  }\n\n  renderEditor(inModal = false) {\n    const minLines = inModal ? 40 : this.props.minLines || 12;\n    if (this.props.language) {\n      const style = {\n        border: `1px solid ${this.props.theme.colors.grayscale.light1}`,\n        minHeight: `${minLines}em`,\n        width: 'auto',\n        ...this.props.textAreaStyles,\n      };\n      if (this.props.resize) {\n        style.resize = this.props.resize;\n      }\n      if (this.props.readOnly) {\n        style.backgroundColor = '#f2f2f2';\n      }\n\n      return (\n        <TextAreaEditor\n          mode={this.props.language}\n          style={style}\n          minLines={minLines}\n          maxLines={inModal ? 1000 : this.props.maxLines}\n          editorProps={{ $blockScrolling: true }}\n          defaultValue={this.props.initialValue}\n          readOnly={this.props.readOnly}\n          key={this.props.name}\n          {...this.props}\n          onChange={this.onAreaEditorChange.bind(this)}\n        />\n      );\n    }\n    return (\n      <TextArea\n        placeholder={t('textarea')}\n        onChange={this.onControlChange.bind(this)}\n        defaultValue={this.props.initialValue}\n        disabled={this.props.readOnly}\n        style={{ height: this.props.height }}\n      />\n    );\n  }\n\n  renderModalBody() {\n    return (\n      <>\n        <div>{this.props.aboveEditorSection}</div>\n        {this.renderEditor(true)}\n      </>\n    );\n  }\n\n  render() {\n    const controlHeader = <ControlHeader {...this.props} />;\n    return (\n      <div>\n        {controlHeader}\n        {this.renderEditor()}\n        {this.props.offerEditInModal && (\n          <ModalTrigger\n            modalTitle={controlHeader}\n            triggerNode={\n              <Button buttonSize=\"small\" className=\"m-t-5\">\n                {t('Edit')} <strong>{this.props.language}</strong>{' '}\n                {t('in modal')}\n              </Button>\n            }\n            modalBody={this.renderModalBody(true)}\n            responsive\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nTextAreaControl.propTypes = propTypes;\nTextAreaControl.defaultProps = defaultProps;\n\nexport default withTheme(TextAreaControl);\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { ConfigProvider } from 'antd';\nimport { styled, t } from '@superset-ui/core';\nimport ReactCronPicker, { Locale, CronProps } from 'react-js-cron';\n\nexport * from 'react-js-cron';\n\nexport const LOCALE: Locale = {\n  everyText: t('every'),\n  emptyMonths: t('every month'),\n  emptyMonthDays: t('every day of the month'),\n  emptyMonthDaysShort: t('day of the month'),\n  emptyWeekDays: t('every day of the week'),\n  emptyWeekDaysShort: t('day of the week'),\n  emptyHours: t('every hour'),\n  emptyMinutes: t('every minute'),\n  emptyMinutesForHourPeriod: t('every'),\n  yearOption: t('year'),\n  monthOption: t('month'),\n  weekOption: t('week'),\n  dayOption: t('day'),\n  hourOption: t('hour'),\n  minuteOption: t('minute'),\n  rebootOption: t('reboot'),\n  prefixPeriod: t('Every'),\n  prefixMonths: t('in'),\n  prefixMonthDays: t('on'),\n  prefixWeekDays: t('on'),\n  prefixWeekDaysForMonthAndYearPeriod: t('or'),\n  prefixHours: t('at'),\n  prefixMinutes: t(':'),\n  prefixMinutesForHourPeriod: t('at'),\n  suffixMinutesForHourPeriod: t('minute(s)'),\n  errorInvalidCron: t('Invalid cron expression'),\n  clearButtonText: t('Clear'),\n  weekDays: [\n    // Order is important, the index will be used as value\n    t('Sunday'), // Sunday must always be first, it's \"0\"\n    t('Monday'),\n    t('Tuesday'),\n    t('Wednesday'),\n    t('Thursday'),\n    t('Friday'),\n    t('Saturday'),\n  ],\n  months: [\n    // Order is important, the index will be used as value\n    t('January'),\n    t('February'),\n    t('March'),\n    t('April'),\n    t('May'),\n    t('June'),\n    t('July'),\n    t('August'),\n    t('September'),\n    t('October'),\n    t('November'),\n    t('December'),\n  ],\n  // Order is important, the index will be used as value\n  altWeekDays: [\n    t('SUN'), // Sunday must always be first, it's \"0\"\n    t('MON'),\n    t('TUE'),\n    t('WED'),\n    t('THU'),\n    t('FRI'),\n    t('SAT'),\n  ],\n  // Order is important, the index will be used as value\n  altMonths: [\n    t('JAN'),\n    t('FEB'),\n    t('MAR'),\n    t('APR'),\n    t('MAY'),\n    t('JUN'),\n    t('JUL'),\n    t('AUG'),\n    t('SEP'),\n    t('OCT'),\n    t('NOV'),\n    t('DEC'),\n  ],\n};\n\nexport const CronPicker = styled((props: CronProps) => (\n  <ConfigProvider\n    getPopupContainer={trigger => trigger.parentElement as HTMLElement}\n  >\n    <ReactCronPicker locale={LOCALE} {...props} />\n  </ConfigProvider>\n))`\n  ${({ theme }) => `\n\n    /* Boilerplate styling for ReactCronPicker imported explicitly in GlobalStyles.tsx */\n\n    /* When year period is selected */\n\n    :has(.react-js-cron-months) {\n      display: grid !important;\n      grid-template-columns: repeat(2, 50%);\n      column-gap: ${theme.gridUnit}px;\n      row-gap: ${theme.gridUnit * 2}px;\n      div:has(.react-js-cron-hours) {\n        grid-column: span 2;\n        display: flex;\n        justify-content: space-between;\n        .react-js-cron-field {\n          width: 50%;\n        }\n      }\n    }\n\n    /* When month period is selected */\n\n    :not(:has(.react-js-cron-months)) {\n      display: grid;\n      grid-template-columns: repeat(2, 50%);\n      column-gap: ${theme.gridUnit}px;\n      row-gap: ${theme.gridUnit * 2}px;\n      .react-js-cron-period {\n        grid-column: span 2;\n      }\n      div:has(.react-js-cron-hours) {\n        grid-column: span 2;\n        display: flex;\n        justify-content: space-between;\n        .react-js-cron-field {\n          width: 50%;\n        }\n      }\n    }\n\n    /* When week period is selected */\n\n    :not(:has(.react-js-cron-month-days)) {\n      .react-js-cron-week-days {\n        grid-column: span 2;\n      }\n    }\n\n    /* For proper alignment of inputs and span elements */\n\n    :not(div:has(.react-js-cron-hours)) {\n      display: flex;\n      flex-wrap: nowrap;\n    }\n\n    div:has(.react-js-cron-hours) {\n      width: 100%;\n    }\n\n    .react-js-cron-minutes > span {\n      padding-left: ${theme.gridUnit}px;\n    }\n\n    /* Sizing of select container */\n\n    .react-js-cron-select.ant-select {\n      width: 100%;\n      .ant-select-selector {\n        flex-wrap: nowrap;\n      }\n    }\n\n    .react-js-cron-field {\n      width: 100%;\n      margin-bottom: 0px;\n      > span {\n        margin-left: 0px;\n      }\n    }\n\n    .react-js-cron-custom-select .ant-select-selection-placeholder {\n      flex: auto;\n      border-radius: ${theme.gridUnit}px;\n    }\n\n    .react-js-cron-custom-select .ant-select-selection-overflow-item {\n      align-self: center;\n    }\n\n    .react-js-cron-select > div:first-of-type,\n    .react-js-cron-custom-select {\n      border-radius: ${theme.gridUnit}px;\n    }\n  `}\n`;\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { t, styled } from '@superset-ui/core';\nimport { useState, ReactNode, ChangeEvent } from 'react';\nimport { Input } from 'src/components/Input';\nimport Modal from 'src/components/Modal';\nimport { FormLabel } from 'src/components/Form';\n\nconst StyledDiv = styled.div`\n  padding-top: 8px;\n  width: 50%;\n  label {\n    color: ${({ theme }) => theme.colors.grayscale.base};\n    text-transform: uppercase;\n  }\n`;\n\nconst DescriptionContainer = styled.div`\n  line-height: ${({ theme }) => theme.gridUnit * 4}px;\n  padding-top: 16px;\n`;\n\ninterface DeleteModalProps {\n  description: ReactNode;\n  onConfirm: () => void;\n  onHide: () => void;\n  open: boolean;\n  title: ReactNode;\n}\n\nexport default function DeleteModal({\n  description,\n  onConfirm,\n  onHide,\n  open,\n  title,\n}: DeleteModalProps) {\n  const [disableChange, setDisableChange] = useState(true);\n  const [confirmation, setConfirmation] = useState<string>('');\n\n  const hide = () => {\n    setConfirmation('');\n    onHide();\n  };\n\n  const confirm = () => {\n    setConfirmation('');\n    onConfirm();\n  };\n\n  const onChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const targetValue = event.target.value ?? '';\n    setDisableChange(targetValue.toUpperCase() !== t('DELETE'));\n    setConfirmation(targetValue);\n  };\n\n  const onPressEnter = () => {\n    if (!disableChange) {\n      confirm();\n    }\n  };\n\n  return (\n    <Modal\n      disablePrimaryButton={disableChange}\n      onHide={hide}\n      onHandledPrimaryAction={confirm}\n      primaryButtonName={t('delete')}\n      primaryButtonType=\"danger\"\n      show={open}\n      title={title}\n    >\n      <DescriptionContainer>{description}</DescriptionContainer>\n      <StyledDiv>\n        <FormLabel htmlFor=\"delete\">\n          {t('Type \"%s\" to confirm', t('DELETE'))}\n        </FormLabel>\n        <Input\n          data-test=\"delete-modal-input\"\n          type=\"text\"\n          id=\"delete\"\n          autoComplete=\"off\"\n          value={confirmation}\n          onChange={onChange}\n          onPressEnter={onPressEnter}\n        />\n      </StyledDiv>\n    </Modal>\n  );\n}\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { forwardRef, useState, ReactNode, MouseEvent } from 'react';\n\nimport Modal from 'src/components/Modal';\nimport Button from 'src/components/Button';\n\ninterface ModalTriggerProps {\n  dialogClassName?: string;\n  triggerNode: ReactNode;\n  modalTitle?: string;\n  modalBody?: ReactNode; // not required because it can be generated by beforeOpen\n  modalFooter?: ReactNode;\n  beforeOpen?: Function;\n  onExit?: Function;\n  isButton?: boolean;\n  className?: string;\n  tooltip?: string;\n  width?: string;\n  maxWidth?: string;\n  responsive?: boolean;\n  resizable?: boolean;\n  resizableConfig?: any;\n  draggable?: boolean;\n  draggableConfig?: any;\n  destroyOnClose?: boolean;\n}\n\nexport interface ModalTriggerRef {\n  current: {\n    close: Function;\n    open: Function;\n    showModal: boolean;\n  };\n}\n\nconst ModalTrigger = forwardRef(\n  (props: ModalTriggerProps, ref: ModalTriggerRef | null) => {\n    const [showModal, setShowModal] = useState(false);\n    const {\n      beforeOpen = () => {},\n      onExit = () => {},\n      isButton = false,\n      resizable = false,\n      draggable = false,\n      className = '',\n      tooltip,\n      modalFooter,\n      triggerNode,\n      destroyOnClose = true,\n      modalBody,\n      draggableConfig = {},\n      resizableConfig = {},\n      modalTitle,\n      responsive,\n      width,\n      maxWidth,\n    } = props;\n\n    const close = () => {\n      setShowModal(false);\n      onExit?.();\n    };\n\n    const open = (e: MouseEvent) => {\n      e.preventDefault();\n      beforeOpen?.();\n      setShowModal(true);\n    };\n\n    if (ref) {\n      ref.current = { close, open, showModal }; // eslint-disable-line\n    }\n\n    /* eslint-disable jsx-a11y/interactive-supports-focus */\n    return (\n      <>\n        {isButton && (\n          <Button\n            className=\"modal-trigger\"\n            data-test=\"btn-modal-trigger\"\n            tooltip={tooltip}\n            onClick={open}\n          >\n            {triggerNode}\n          </Button>\n        )}\n        {!isButton && (\n          <span data-test=\"span-modal-trigger\" onClick={open} role=\"button\">\n            {triggerNode}\n          </span>\n        )}\n        <Modal\n          className={className}\n          show={showModal}\n          onHide={close}\n          title={modalTitle}\n          footer={modalFooter}\n          hideFooter={!modalFooter}\n          width={width}\n          maxWidth={maxWidth}\n          responsive={responsive}\n          resizable={resizable}\n          resizableConfig={resizableConfig}\n          draggable={draggable}\n          draggableConfig={draggableConfig}\n          destroyOnClose={destroyOnClose}\n        >\n          {modalBody}\n        </Modal>\n      </>\n    );\n  },\n);\n\nexport default ModalTrigger;\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport { useEffect, useMemo } from 'react';\nimport moment from 'moment-timezone';\nimport { t } from '@superset-ui/core';\nimport { Select } from 'src/components';\n\nconst DEFAULT_TIMEZONE = {\n  name: 'GMT Standard Time',\n  value: 'Africa/Abidjan', // timezones are deduped by the first alphabetical value\n};\n\nconst MIN_SELECT_WIDTH = '400px';\n\nconst offsetsToName = {\n  '-300-240': ['Eastern Standard Time', 'Eastern Daylight Time'],\n  '-360-300': ['Central Standard Time', 'Central Daylight Time'],\n  '-420-360': ['Mountain Standard Time', 'Mountain Daylight Time'],\n  '-420-420': [\n    'Mountain Standard Time - Phoenix',\n    'Mountain Standard Time - Phoenix',\n  ],\n  '-480-420': ['Pacific Standard Time', 'Pacific Daylight Time'],\n  '-540-480': ['Alaska Standard Time', 'Alaska Daylight Time'],\n  '-600-600': ['Hawaii Standard Time', 'Hawaii Daylight Time'],\n  '60120': ['Central European Time', 'Central European Daylight Time'],\n  '00': [DEFAULT_TIMEZONE.name, DEFAULT_TIMEZONE.name],\n  '060': ['GMT Standard Time - London', 'British Summer Time'],\n};\n\nconst currentDate = moment();\nconst JANUARY = moment([2021, 1]);\nconst JULY = moment([2021, 7]);\n\nconst getOffsetKey = (name: string) =>\n  JANUARY.tz(name).utcOffset().toString() +\n  JULY.tz(name).utcOffset().toString();\n\nconst getTimezoneName = (name: string) => {\n  const offsets = getOffsetKey(name);\n  return (\n    (currentDate.tz(name).isDST()\n      ? offsetsToName[offsets]?.[1]\n      : offsetsToName[offsets]?.[0]) || name\n  );\n};\n\nconst ALL_ZONES = moment.tz\n  .countries()\n  .map(country => moment.tz.zonesForCountry(country, true))\n  .flat();\n\nconst TIMEZONES: moment.MomentZoneOffset[] = [];\nALL_ZONES.forEach(zone => {\n  if (\n    !TIMEZONES.find(\n      option => getOffsetKey(option.name) === getOffsetKey(zone.name),\n    )\n  ) {\n    TIMEZONES.push(zone); // dedupe zones by offsets\n  }\n});\n\nconst TIMEZONE_OPTIONS = TIMEZONES.map(zone => ({\n  label: `GMT ${moment\n    .tz(currentDate, zone.name)\n    .format('Z')} (${getTimezoneName(zone.name)})`,\n  value: zone.name,\n  offsets: getOffsetKey(zone.name),\n  timezoneName: zone.name,\n}));\n\nconst TIMEZONE_OPTIONS_SORT_COMPARATOR = (\n  a: (typeof TIMEZONE_OPTIONS)[number],\n  b: (typeof TIMEZONE_OPTIONS)[number],\n) =>\n  moment.tz(currentDate, a.timezoneName).utcOffset() -\n  moment.tz(currentDate, b.timezoneName).utcOffset();\n\n// pre-sort timezone options by time offset\nTIMEZONE_OPTIONS.sort(TIMEZONE_OPTIONS_SORT_COMPARATOR);\n\nconst matchTimezoneToOptions = (timezone: string) =>\n  TIMEZONE_OPTIONS.find(option => option.offsets === getOffsetKey(timezone))\n    ?.value || DEFAULT_TIMEZONE.value;\n\nexport type TimezoneSelectorProps = {\n  onTimezoneChange: (value: string) => void;\n  timezone?: string | null;\n  minWidth?: string;\n};\n\nexport default function TimezoneSelector({\n  onTimezoneChange,\n  timezone,\n  minWidth = MIN_SELECT_WIDTH, // smallest size for current values\n}: TimezoneSelectorProps) {\n  const validTimezone = useMemo(\n    () => matchTimezoneToOptions(timezone || moment.tz.guess()),\n    [timezone],\n  );\n\n  // force trigger a timezone update if provided `timezone` is not invalid\n  useEffect(() => {\n    if (timezone !== validTimezone) {\n      onTimezoneChange(validTimezone);\n    }\n  }, [validTimezone, onTimezoneChange, timezone]);\n\n  return (\n    <Select\n      ariaLabel={t('Timezone selector')}\n      css={{ minWidth }}\n      onChange={tz => onTimezoneChange(tz as string)}\n      value={validTimezone}\n      options={TIMEZONE_OPTIONS}\n      sortComparator={TIMEZONE_OPTIONS_SORT_COMPARATOR}\n    />\n  );\n}\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { FC, ReactNode, useMemo, useRef } from 'react';\nimport { t, css, useTheme, SupersetTheme } from '@superset-ui/core';\nimport { InfoTooltipWithTrigger } from '@superset-ui/chart-controls';\nimport { Tooltip } from 'src/components/Tooltip';\nimport { FormLabel } from 'src/components/Form';\nimport Icons from 'src/components/Icons';\n\ntype ValidationError = string;\n\nexport type ControlHeaderProps = {\n  name?: string;\n  label?: ReactNode;\n  description?: ReactNode;\n  validationErrors?: ValidationError[];\n  renderTrigger?: boolean;\n  rightNode?: ReactNode;\n  leftNode?: ReactNode;\n  onClick?: () => void;\n  hovered?: boolean;\n  tooltipOnClick?: () => void;\n  warning?: string;\n  danger?: string;\n};\n\nconst iconStyles = css`\n  &.anticon {\n    font-size: unset;\n    .anticon {\n      line-height: unset;\n      vertical-align: unset;\n    }\n  }\n`;\n\nconst ControlHeader: FC<ControlHeaderProps> = ({\n  name,\n  label,\n  description,\n  validationErrors = [],\n  renderTrigger = false,\n  rightNode,\n  leftNode,\n  onClick,\n  hovered = false,\n  tooltipOnClick = () => {},\n  warning,\n  danger,\n}) => {\n  const { gridUnit, colors } = useTheme();\n  const hasHadNoErrors = useRef(false);\n  const labelColor = useMemo(() => {\n    if (!validationErrors.length) {\n      hasHadNoErrors.current = true;\n    }\n\n    if (hasHadNoErrors.current) {\n      if (validationErrors.length) {\n        return colors.error.base;\n      }\n\n      return 'unset';\n    }\n\n    return colors.alert.base;\n  }, [colors.error.base, colors.alert.base, validationErrors.length]);\n\n  if (!label) {\n    return null;\n  }\n\n  const renderOptionalIcons = () => {\n    if (!hovered) {\n      return null;\n    }\n\n    return (\n      <span\n        css={() => css`\n          position: absolute;\n          top: 50%;\n          right: 0;\n          padding-left: ${gridUnit}px;\n          transform: translate(100%, -50%);\n          white-space: nowrap;\n        `}\n      >\n        {description && (\n          <span>\n            <Tooltip\n              id=\"description-tooltip\"\n              title={description}\n              placement=\"top\"\n            >\n              <Icons.InfoCircleOutlined\n                css={iconStyles}\n                onClick={tooltipOnClick}\n              />\n            </Tooltip>{' '}\n          </span>\n        )}\n        {renderTrigger && (\n          <span>\n            <InfoTooltipWithTrigger\n              label={t('bolt')}\n              tooltip={t('Changing this control takes effect instantly')}\n              placement=\"top\"\n              icon=\"bolt\"\n            />{' '}\n          </span>\n        )}\n      </span>\n    );\n  };\n\n  return (\n    <div className=\"ControlHeader\" data-test={`${name}-header`}>\n      <div className=\"pull-left\">\n        <FormLabel\n          css={(theme: SupersetTheme) => css`\n            margin-bottom: ${theme.gridUnit * 0.5}px;\n            position: relative;\n          `}\n        >\n          {leftNode && <span>{leftNode}</span>}\n          <span\n            role=\"button\"\n            tabIndex={0}\n            onClick={onClick}\n            style={{ cursor: onClick ? 'pointer' : '' }}\n          >\n            {label}\n          </span>{' '}\n          {warning && (\n            <span>\n              <Tooltip id=\"error-tooltip\" placement=\"top\" title={warning}>\n                <Icons.AlertSolid iconColor={colors.alert.base} iconSize=\"s\" />\n              </Tooltip>{' '}\n            </span>\n          )}\n          {danger && (\n            <span>\n              <Tooltip id=\"error-tooltip\" placement=\"top\" title={danger}>\n                <Icons.ErrorSolid iconColor={colors.error.base} iconSize=\"s\" />\n              </Tooltip>{' '}\n            </span>\n          )}\n          {validationErrors?.length > 0 && (\n            <span data-test=\"error-tooltip\">\n              <Tooltip\n                id=\"error-tooltip\"\n                placement=\"top\"\n                title={validationErrors?.join(' ')}\n              >\n                <Icons.ExclamationCircleOutlined\n                  css={css`\n                    ${iconStyles};\n                    color: ${labelColor};\n                  `}\n                />\n              </Tooltip>{' '}\n            </span>\n          )}\n          {renderOptionalIcons()}\n        </FormLabel>\n      </div>\n      {rightNode && <div className=\"pull-right\">{rightNode}</div>}\n      <div className=\"clearfix\" />\n    </div>\n  );\n};\n\nexport default ControlHeader;\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useState, ChangeEvent } from 'react';\n\ninterface NumberInputProps {\n  timeUnit: string;\n  min: number;\n  name: string;\n  value: string | number;\n  placeholder: string;\n  onChange: (event: ChangeEvent<HTMLInputElement>) => void;\n}\n\nexport default function NumberInput({\n  timeUnit,\n  min,\n  name,\n  value,\n  placeholder,\n  onChange,\n}: NumberInputProps) {\n  const [isFocused, setIsFocused] = useState<boolean>(false);\n\n  return (\n    <input\n      type=\"text\"\n      min={min}\n      name={name}\n      value={value ? `${value}${!isFocused ? ` ${timeUnit}` : ''}` : ''}\n      placeholder={placeholder}\n      onFocus={() => setIsFocused(true)}\n      onBlur={() => setIsFocused(false)}\n      onChange={onChange}\n    />\n  );\n}\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useState, useCallback, useRef, FocusEvent, FC } from 'react';\n\nimport { t, useTheme } from '@superset-ui/core';\n\nimport { AntdInput, Select } from 'src/components';\nimport { Input } from 'src/components/Input';\nimport { CronPicker, CronError } from 'src/components/CronPicker';\nimport { StyledInputContainer } from '../AlertReportModal';\n\nexport interface AlertReportCronSchedulerProps {\n  value: string;\n  onChange: (change: string) => any;\n}\n\nenum ScheduleType {\n  Picker = 'picker',\n  Input = 'input',\n}\n\nconst SCHEDULE_TYPE_OPTIONS = [\n  {\n    label: t('Recurring (every)'),\n    value: ScheduleType.Picker,\n  },\n  {\n    label: t('CRON Schedule'),\n    value: ScheduleType.Input,\n  },\n];\n\nexport const AlertReportCronScheduler: FC<AlertReportCronSchedulerProps> = ({\n  value,\n  onChange,\n}) => {\n  const theme = useTheme();\n  const inputRef = useRef<AntdInput>(null);\n  const [scheduleFormat, setScheduleFormat] = useState<ScheduleType>(\n    ScheduleType.Picker,\n  );\n\n  const customSetValue = useCallback(\n    (newValue: string) => {\n      onChange(newValue);\n      inputRef.current?.setValue(newValue);\n    },\n    [inputRef, onChange],\n  );\n\n  const handleBlur = useCallback(\n    (event: FocusEvent<HTMLInputElement>) => {\n      onChange(event.target.value);\n    },\n    [onChange],\n  );\n\n  const handlePressEnter = useCallback(() => {\n    onChange(inputRef.current?.input.value || '');\n  }, [onChange]);\n\n  const [error, onError] = useState<CronError>();\n\n  return (\n    <>\n      <StyledInputContainer>\n        <div className=\"control-label\">\n          {t('Schedule type')}\n          <span className=\"required\">*</span>\n        </div>\n        <div className=\"input-container\">\n          <Select\n            ariaLabel={t('Schedule type')}\n            placeholder={t('Schedule type')}\n            onChange={(e: ScheduleType) => {\n              setScheduleFormat(e);\n            }}\n            value={scheduleFormat}\n            options={SCHEDULE_TYPE_OPTIONS}\n          />\n        </div>\n      </StyledInputContainer>\n\n      <StyledInputContainer data-test=\"input-content\" className=\"styled-input\">\n        <div className=\"control-label\">\n          {t('Schedule')}\n          <span className=\"required\">*</span>\n        </div>\n        {scheduleFormat === ScheduleType.Input && (\n          <Input\n            type=\"text\"\n            name=\"crontab\"\n            ref={inputRef}\n            style={error ? { borderColor: theme.colors.error.base } : {}}\n            placeholder={t('CRON expression')}\n            value={value}\n            onBlur={handleBlur}\n            onChange={e => customSetValue(e.target.value)}\n            onPressEnter={handlePressEnter}\n          />\n        )}\n        {scheduleFormat === ScheduleType.Picker && (\n          <CronPicker\n            clearButton={false}\n            value={value}\n            setValue={customSetValue}\n            displayError={scheduleFormat === ScheduleType.Picker}\n            onError={onError}\n          />\n        )}\n      </StyledInputContainer>\n    </>\n  );\n};\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {\n  FunctionComponent,\n  useState,\n  ChangeEvent,\n  useEffect,\n  useMemo,\n} from 'react';\nimport rison from 'rison';\n\nimport {\n  FeatureFlag,\n  JsonResponse,\n  SupersetClient,\n  isFeatureEnabled,\n  styled,\n  t,\n  useTheme,\n} from '@superset-ui/core';\nimport { Select } from 'src/components';\nimport Icons from 'src/components/Icons';\nimport {\n  NotificationMethodOption,\n  NotificationSetting,\n  SlackChannel,\n} from '../types';\nimport { StyledInputContainer } from '../AlertReportModal';\n\nconst StyledNotificationMethod = styled.div`\n  ${({ theme }) => `\n    margin-bottom: ${theme.gridUnit * 3}px;\n\n    .input-container {\n      textarea {\n        height: auto;\n      }\n\n      &.error {\n        input {\n          border-color: ${theme.colors.error.base};\n        }\n      }\n\n      .helper {\n        margin-top: ${theme.gridUnit * 2}px;\n        font-size: ${theme.typography.sizes.s}px;\n        color: ${theme.colors.grayscale.base};\n      }\n    }\n\n    .inline-container {\n      margin-bottom: ${theme.gridUnit * 2}px;\n\n      > div {\n        margin: 0px;\n      }\n\n      .delete-button {\n        margin-left: ${theme.gridUnit * 2}px;\n        padding-top: ${theme.gridUnit}px;\n      }\n    }\n\n    .ghost-button {\n      color: ${theme.colors.primary.dark1};\n      display: inline-flex;\n      align-items: center;\n      font-size: ${theme.typography.sizes.s}px;\n      cursor: pointer;\n      margin-top: ${theme.gridUnit}px;\n\n      .icon {\n        width: ${theme.gridUnit * 3}px;\n        height: ${theme.gridUnit * 3}px;\n        font-size: ${theme.typography.sizes.s}px;\n        margin-right: ${theme.gridUnit}px;\n      }\n    }\n\n    .ghost-button + .ghost-button {\n      margin-left: ${theme.gridUnit * 4}px;\n    }\n\n    .ghost-button:first-child[style*='none'] + .ghost-button {\n      margin-left: 0px; /* Remove margin when the first button is hidden */\n    }\n  `}\n`;\n\nconst TRANSLATIONS = {\n  EMAIL_CC_NAME: t('CC recipients'),\n  EMAIL_BCC_NAME: t('BCC recipients'),\n  EMAIL_SUBJECT_NAME: t('Email subject name (optional)'),\n  EMAIL_SUBJECT_ERROR_TEXT: t(\n    'Please enter valid text. Spaces alone are not permitted.',\n  ),\n};\n\ninterface NotificationMethodProps {\n  setting?: NotificationSetting | null;\n  index: number;\n  onUpdate?: (index: number, updatedSetting: NotificationSetting) => void;\n  onRemove?: (index: number) => void;\n  onInputChange?: (\n    event: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>,\n  ) => void;\n  email_subject: string;\n  defaultSubject: string;\n  setErrorSubject: (hasError: boolean) => void;\n}\n\nexport const mapSlackValues = ({\n  method,\n  recipientValue,\n  slackOptions,\n}: {\n  method: string;\n  recipientValue: string;\n  slackOptions: { label: string; value: string }[];\n}) => {\n  const prop = method === NotificationMethodOption.SlackV2 ? 'value' : 'label';\n  return recipientValue\n    .split(',')\n    .map(recipient =>\n      slackOptions.find(\n        option =>\n          option[prop].trim().toLowerCase() === recipient.trim().toLowerCase(),\n      ),\n    )\n    .filter(val => !!val) as { label: string; value: string }[];\n};\n\nexport const mapChannelsToOptions = (result: SlackChannel[]) => {\n  const publicChannels: SlackChannel[] = [];\n  const privateChannels: SlackChannel[] = [];\n\n  result.forEach(channel => {\n    if (channel.is_private) {\n      privateChannels.push(channel);\n    } else {\n      publicChannels.push(channel);\n    }\n  });\n\n  return [\n    {\n      label: 'Public Channels',\n      options: publicChannels.map((channel: SlackChannel) => ({\n        label: `${channel.name} ${\n          channel.is_member ? '' : t('(Bot not in channel)')\n        }`,\n        value: channel.id,\n        key: channel.id,\n      })),\n      key: 'public',\n    },\n    {\n      label: t('Private Channels (Bot in channel)'),\n      options: privateChannels.map((channel: SlackChannel) => ({\n        label: channel.name,\n        value: channel.id,\n        key: channel.id,\n      })),\n      key: 'private',\n    },\n  ];\n};\n\ntype SlackOptionsType = {\n  label: string;\n  options: { label: string; value: string }[];\n}[];\n\nexport const NotificationMethod: FunctionComponent<NotificationMethodProps> = ({\n  setting = null,\n  index,\n  onUpdate,\n  onRemove,\n  onInputChange,\n  email_subject,\n  defaultSubject,\n  setErrorSubject,\n}) => {\n  const { method, recipients, cc, bcc, options } = setting || {};\n  const [recipientValue, setRecipientValue] = useState<string>(\n    recipients || '',\n  );\n  const [slackRecipients, setSlackRecipients] = useState<\n    { label: string; value: string }[]\n  >([]);\n  const [error, setError] = useState(false);\n  const [ccVisible, setCcVisible] = useState<boolean>(!!cc);\n  const [bccVisible, setBccVisible] = useState<boolean>(!!bcc);\n  const [ccValue, setCcValue] = useState<string>(cc || '');\n  const [bccValue, setBccValue] = useState<string>(bcc || '');\n  const theme = useTheme();\n  const [slackOptions, setSlackOptions] = useState<SlackOptionsType>([\n    {\n      label: '',\n      options: [],\n    },\n  ]);\n\n  const [useSlackV1, setUseSlackV1] = useState<boolean>(false);\n\n  const onMethodChange = (selected: {\n    label: string;\n    value: NotificationMethodOption;\n  }) => {\n    // Since we're swapping the method, reset the recipients\n    setRecipientValue('');\n    setCcValue('');\n    setBccValue('');\n\n    if (onUpdate && setting) {\n      const updatedSetting = {\n        ...setting,\n        method: selected.value,\n        recipients: '',\n        cc: '',\n        bcc: '',\n      };\n\n      onUpdate(index, updatedSetting);\n    }\n  };\n\n  const fetchSlackChannels = async ({\n    searchString = '',\n    types = [],\n    exactMatch = false,\n  }: {\n    searchString?: string | undefined;\n    types?: string[];\n    exactMatch?: boolean | undefined;\n  } = {}): Promise<JsonResponse> => {\n    const queryString = rison.encode({ searchString, types, exactMatch });\n    const endpoint = `/api/v1/report/slack_channels/?q=${queryString}`;\n    return SupersetClient.get({ endpoint });\n  };\n\n  useEffect(() => {\n    if (\n      method &&\n      [\n        NotificationMethodOption.Slack,\n        NotificationMethodOption.SlackV2,\n      ].includes(method) &&\n      !slackOptions[0]?.options.length\n    ) {\n      fetchSlackChannels({ types: ['public_channel', 'private_channel'] })\n        .then(({ json }) => {\n          const { result } = json;\n\n          const options: SlackOptionsType = mapChannelsToOptions(result);\n\n          setSlackOptions(options);\n\n          if (isFeatureEnabled(FeatureFlag.AlertReportSlackV2)) {\n            // map existing ids to names for display\n            // or names to ids if slack v1\n            const [publicOptions, privateOptions] = options;\n\n            setSlackRecipients(\n              mapSlackValues({\n                method,\n                recipientValue,\n                slackOptions: [\n                  ...publicOptions.options,\n                  ...privateOptions.options,\n                ],\n              }),\n            );\n            if (method === NotificationMethodOption.Slack) {\n              onMethodChange({\n                label: NotificationMethodOption.Slack,\n                value: NotificationMethodOption.SlackV2,\n              });\n            }\n          }\n        })\n        .catch(() => {\n          // Fallback to slack v1 if slack v2 is not compatible\n          setUseSlackV1(true);\n        });\n    }\n  }, [method]);\n\n  const methodOptions = useMemo(\n    () =>\n      (options || [])\n        .filter(\n          method =>\n            (isFeatureEnabled(FeatureFlag.AlertReportSlackV2) &&\n              !useSlackV1 &&\n              method === NotificationMethodOption.SlackV2) ||\n            ((!isFeatureEnabled(FeatureFlag.AlertReportSlackV2) ||\n              useSlackV1) &&\n              method === NotificationMethodOption.Slack) ||\n            method === NotificationMethodOption.Email,\n        )\n        .map(method => ({\n          label:\n            method === NotificationMethodOption.SlackV2\n              ? NotificationMethodOption.Slack\n              : method,\n          value: method,\n        })),\n    [options],\n  );\n\n  if (!setting) {\n    return null;\n  }\n\n  const onRecipientsChange = (event: ChangeEvent<HTMLTextAreaElement>) => {\n    const { target } = event;\n\n    setRecipientValue(target.value);\n\n    if (onUpdate) {\n      const updatedSetting = {\n        ...setting,\n        recipients: target.value,\n      };\n\n      onUpdate(index, updatedSetting);\n    }\n  };\n\n  const onSlackRecipientsChange = (\n    recipients: { label: string; value: string }[],\n  ) => {\n    setSlackRecipients(recipients);\n\n    if (onUpdate) {\n      const updatedSetting = {\n        ...setting,\n        recipients: recipients?.map(obj => obj.value).join(','),\n      };\n\n      onUpdate(index, updatedSetting);\n    }\n  };\n\n  const onSubjectChange = (\n    event: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>,\n  ) => {\n    const { value } = event.target;\n\n    if (onInputChange) {\n      onInputChange(event);\n    }\n\n    const hasError = value.length > 0 && value.trim().length === 0;\n    setError(hasError);\n    if (setErrorSubject) {\n      setErrorSubject(hasError);\n    }\n  };\n\n  const onCcChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    const { target } = event;\n\n    setCcValue(target.value);\n\n    if (onUpdate) {\n      const updatedSetting = {\n        ...setting,\n        cc: target.value,\n      };\n\n      onUpdate(index, updatedSetting);\n    }\n  };\n\n  const onBccChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    const { target } = event;\n\n    setBccValue(target.value);\n\n    if (onUpdate) {\n      const updatedSetting = {\n        ...setting,\n        bcc: target.value,\n      };\n\n      onUpdate(index, updatedSetting);\n    }\n  };\n\n  // Set recipients\n  if (!!recipients && recipientValue !== recipients) {\n    setRecipientValue(recipients);\n  }\n\n  if (!!cc && ccValue !== cc) {\n    setCcValue(cc);\n  }\n\n  if (!!bcc && bccValue !== bcc) {\n    setBccValue(bcc);\n  }\n\n  return (\n    <StyledNotificationMethod>\n      <div className=\"inline-container\">\n        <StyledInputContainer>\n          <div className=\"control-label\">{t('Notification Method')}</div>\n          <div className=\"input-container\">\n            <Select\n              ariaLabel={t('Delivery method')}\n              data-test=\"select-delivery-method\"\n              labelInValue\n              onChange={onMethodChange}\n              placeholder={t('Select Delivery Method')}\n              options={methodOptions}\n              showSearch\n              value={methodOptions.find(option => option.value === method)}\n            />\n            {index !== 0 && !!onRemove ? (\n              <span\n                role=\"button\"\n                tabIndex={0}\n                className=\"delete-button\"\n                onClick={() => onRemove(index)}\n              >\n                <Icons.Trash iconColor={theme.colors.grayscale.base} />\n              </span>\n            ) : null}\n          </div>\n        </StyledInputContainer>\n      </div>\n      {method !== undefined ? (\n        <>\n          <div className=\"inline-container\">\n            <StyledInputContainer>\n              {method === NotificationMethodOption.Email ? (\n                <>\n                  <div className=\"control-label\">\n                    {TRANSLATIONS.EMAIL_SUBJECT_NAME}\n                  </div>\n                  <div className={`input-container ${error ? 'error' : ''}`}>\n                    <input\n                      type=\"text\"\n                      name=\"email_subject\"\n                      value={email_subject}\n                      placeholder={defaultSubject}\n                      onChange={onSubjectChange}\n                    />\n                  </div>\n                  {error && (\n                    <div\n                      style={{\n                        color: theme.colors.error.base,\n                        fontSize: theme.gridUnit * 3,\n                      }}\n                    >\n                      {TRANSLATIONS.EMAIL_SUBJECT_ERROR_TEXT}\n                    </div>\n                  )}\n                </>\n              ) : null}\n            </StyledInputContainer>\n          </div>\n          <div className=\"inline-container\">\n            <StyledInputContainer>\n              <div className=\"control-label\">\n                {t(\n                  '%s recipients',\n                  method === NotificationMethodOption.SlackV2\n                    ? NotificationMethodOption.Slack\n                    : method,\n                )}\n                <span className=\"required\">*</span>\n              </div>\n              <div>\n                {[\n                  NotificationMethodOption.Email,\n                  NotificationMethodOption.Slack,\n                ].includes(method) ? (\n                  <>\n                    <div className=\"input-container\">\n                      <textarea\n                        name=\"To\"\n                        data-test=\"recipients\"\n                        value={recipientValue}\n                        onChange={onRecipientsChange}\n                      />\n                    </div>\n                    <div className=\"input-container\">\n                      <div className=\"helper\">\n                        {t('Recipients are separated by \",\" or \";\"')}\n                      </div>\n                    </div>\n                  </>\n                ) : (\n                  // for SlackV2\n                  <Select\n                    ariaLabel={t('Select channels')}\n                    mode=\"multiple\"\n                    name=\"recipients\"\n                    value={slackRecipients}\n                    options={slackOptions}\n                    onChange={onSlackRecipientsChange}\n                    allowClear\n                    data-test=\"recipients\"\n                    allowSelectAll={false}\n                    labelInValue\n                  />\n                )}\n              </div>\n            </StyledInputContainer>\n          </div>\n          {method === NotificationMethodOption.Email && (\n            <StyledInputContainer>\n              {/* Render \"CC\" input field if ccVisible is true */}\n              {ccVisible && (\n                <>\n                  <div className=\"control-label\">\n                    {TRANSLATIONS.EMAIL_CC_NAME}\n                  </div>\n                  <div className=\"input-container\">\n                    <textarea\n                      name=\"CC\"\n                      data-test=\"cc\"\n                      value={ccValue}\n                      onChange={onCcChange}\n                    />\n                  </div>\n                  <div className=\"input-container\">\n                    <div className=\"helper\">\n                      {t('Recipients are separated by \",\" or \";\"')}\n                    </div>\n                  </div>\n                </>\n              )}\n              {/* Render \"BCC\" input field if bccVisible is true */}\n              {bccVisible && (\n                <>\n                  <div className=\"control-label\">\n                    {TRANSLATIONS.EMAIL_BCC_NAME}\n                  </div>\n                  <div className=\"input-container\">\n                    <textarea\n                      name=\"BCC\"\n                      data-test=\"bcc\"\n                      value={bccValue}\n                      onChange={onBccChange}\n                    />\n                  </div>\n                  <div className=\"input-container\">\n                    <div className=\"helper\">\n                      {t('Recipients are separated by \",\" or \";\"')}\n                    </div>\n                  </div>\n                </>\n              )}\n              {/* New buttons container */}\n              <div className=\"ghost-button\">\n                <span\n                  className=\"ghost-button\"\n                  role=\"button\"\n                  tabIndex={0}\n                  onClick={() => setCcVisible(true)}\n                  style={{ display: ccVisible ? 'none' : 'inline-flex' }}\n                >\n                  <Icons.Email className=\"icon\" />\n                  {t('Add CC Recipients')}\n                </span>\n                <span\n                  className=\"ghost-button\"\n                  role=\"button\"\n                  tabIndex={0}\n                  onClick={() => setBccVisible(true)}\n                  style={{ display: bccVisible ? 'none' : 'inline-flex' }}\n                >\n                  <Icons.Email className=\"icon\" />\n                  {t('Add BCC Recipients')}\n                </span>\n              </div>\n            </StyledInputContainer>\n          )}\n        </>\n      ) : null}\n    </StyledNotificationMethod>\n  );\n};\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { t } from '@superset-ui/core';\nimport { CheckCircleOutlined } from '@ant-design/icons';\n\nconst ValidatedPanelHeader = ({\n  title,\n  subtitle,\n  validateCheckStatus,\n  testId,\n}: {\n  title: string;\n  subtitle: string;\n  validateCheckStatus: boolean;\n  testId?: string;\n}): JSX.Element => {\n  const checkmark = <CheckCircleOutlined />;\n\n  return (\n    <div className=\"collapse-panel-header\">\n      <div className=\"collapse-panel-title\" data-test={testId}>\n        <span>{t(title)}</span>\n        {validateCheckStatus ? (\n          <span className=\"validation-checkmark\">{checkmark}</span>\n        ) : (\n          <span className=\"collapse-panel-asterisk\">{' *'}</span>\n        )}\n      </div>\n      <p className=\"collapse-panel-subtitle\">\n        {subtitle ? t(subtitle) : undefined}\n      </p>\n    </div>\n  );\n};\n\nexport default ValidatedPanelHeader;\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { ReactNode } from 'react';\nimport { css, SupersetTheme } from '@superset-ui/core';\nimport { Collapse as AntdCollapse } from 'antd';\nimport { CollapsePanelProps } from 'antd/lib/collapse';\n\nconst anticonHeight = 12;\nconst antdPanelStyles = (theme: SupersetTheme) => css`\n  .ant-collapse-header {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: flex-start;\n    padding: 0px ${theme.gridUnit * 4}px;\n\n    .anticon.anticon-right.ant-collapse-arrow {\n      padding: 0;\n      top: calc(50% - ${anticonHeight / 2}px);\n    }\n\n    .collapse-panel-title {\n      font-size: ${theme.gridUnit * 4}px;\n      font-weight: ${theme.typography.weights.bold};\n      line-height: 130%;\n    }\n\n    .collapse-panel-subtitle {\n      color: ${theme.colors.grayscale.base};\n      font-size: ${theme.typography.sizes.s}px;\n      font-weight: ${theme.typography.weights.normal};\n      line-height: 150%;\n      margin-bottom: 0;\n      padding-top: ${theme.gridUnit}px;\n    }\n\n    .collapse-panel-asterisk {\n      color: var(--semantic-error-base, ${theme.colors.warning.dark1});\n    }\n    .validation-checkmark {\n      width: ${theme.gridUnit * 4}px;\n      height: ${theme.gridUnit * 4}px;\n      margin-left: ${theme.gridUnit}px;\n      color: ${theme.colors.success.base};\n    }\n  }\n`;\n\nexport interface PanelProps extends CollapsePanelProps {\n  children?: ReactNode;\n}\nconst StyledPanel = (props: PanelProps) => (\n  <AntdCollapse.Panel\n    css={(theme: SupersetTheme) => antdPanelStyles(theme)}\n    {...props}\n  />\n);\n\nexport default StyledPanel;\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { styled } from '@superset-ui/core';\nimport { ValidationObject } from './types';\nimport { TRANSLATIONS } from './AlertReportModal';\n\nconst StyledList = styled.ul`\n  margin-left: ${({ theme }) => theme.gridUnit * 2}px;\n  padding-inline-start: ${({ theme }) => theme.gridUnit * 3}px;\n`;\n\nexport const buildErrorTooltipMessage = (\n  validationStatus: ValidationObject,\n) => {\n  const sectionErrors: string[] = [];\n  Object.values(validationStatus).forEach(section => {\n    if (section.hasErrors) {\n      const sectionTitle = `${section.name}: `;\n      sectionErrors.push(sectionTitle + section.errors.join(', '));\n    }\n  });\n  return (\n    <div>\n      {TRANSLATIONS.ERROR_TOOLTIP_MESSAGE}\n      <StyledList>\n        {sectionErrors.map(err => (\n          <li key={err}>{err}</li>\n        ))}\n      </StyledList>\n    </div>\n  );\n};\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {\n  ChangeEvent,\n  FunctionComponent,\n  useState,\n  useEffect,\n  useMemo,\n  useCallback,\n  ReactNode,\n} from 'react';\n\nimport {\n  css,\n  isFeatureEnabled,\n  FeatureFlag,\n  styled,\n  SupersetClient,\n  SupersetTheme,\n  t,\n} from '@superset-ui/core';\nimport rison from 'rison';\nimport { useSingleViewResource } from 'src/views/CRUD/hooks';\n\nimport { InputNumber } from 'src/components/Input';\nimport { Switch } from 'src/components/Switch';\nimport Modal from 'src/components/Modal';\nimport Collapse from 'src/components/Collapse';\nimport TimezoneSelector from 'src/components/TimezoneSelector';\nimport { propertyComparator } from 'src/components/Select/utils';\nimport withToasts from 'src/components/MessageToasts/withToasts';\nimport Owner from 'src/types/Owner';\nimport { AntdCheckbox, AsyncSelect, Select } from 'src/components';\nimport TextAreaControl from 'src/explore/components/controls/TextAreaControl';\nimport { useCommonConf } from 'src/features/databases/state';\nimport { InfoTooltipWithTrigger } from '@superset-ui/chart-controls';\nimport {\n  NotificationMethodOption,\n  NotificationSetting,\n  AlertObject,\n  ChartObject,\n  DashboardObject,\n  DatabaseObject,\n  MetaObject,\n  Operator,\n  Recipient,\n  AlertsReportsConfig,\n  ValidationObject,\n  Sections,\n} from 'src/features/alerts/types';\nimport { useSelector } from 'react-redux';\nimport { UserWithPermissionsAndRoles } from 'src/types/bootstrapTypes';\nimport NumberInput from './components/NumberInput';\nimport { AlertReportCronScheduler } from './components/AlertReportCronScheduler';\nimport { NotificationMethod } from './components/NotificationMethod';\nimport ValidatedPanelHeader from './components/ValidatedPanelHeader';\nimport StyledPanel from './components/StyledPanel';\nimport { buildErrorTooltipMessage } from './buildErrorTooltipMessage';\n\nconst TIMEOUT_MIN = 1;\nconst TEXT_BASED_VISUALIZATION_TYPES = [\n  'pivot_table_v2',\n  'table',\n  'paired_ttest',\n];\n\ntype SelectValue = {\n  value: string;\n  label: string;\n};\n\nexport interface AlertReportModalProps {\n  addSuccessToast: (msg: string) => void;\n  addDangerToast: (msg: string) => void;\n  alert?: AlertObject | null;\n  isReport?: boolean;\n  onAdd?: (alert?: AlertObject) => void;\n  onHide: () => void;\n  show: boolean;\n}\n\nconst DEFAULT_WORKING_TIMEOUT = 3600;\nconst DEFAULT_CRON_VALUE = '0 0 * * *'; // every day\nconst DEFAULT_RETENTION = 90;\nconst EMAIL_REGEX = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n\nconst DEFAULT_NOTIFICATION_METHODS: NotificationMethodOption[] = [\n  NotificationMethodOption.Email,\n];\nconst DEFAULT_NOTIFICATION_FORMAT = 'PNG';\nconst CONDITIONS = [\n  {\n    label: t('< (Smaller than)'),\n    value: '<',\n  },\n  {\n    label: t('> (Larger than)'),\n    value: '>',\n  },\n  {\n    label: t('<= (Smaller or equal)'),\n    value: '<=',\n  },\n  {\n    label: t('>= (Larger or equal)'),\n    value: '>=',\n  },\n  {\n    label: t('== (Is equal)'),\n    value: '==',\n  },\n  {\n    label: t('!= (Is not equal)'),\n    value: '!=',\n  },\n  {\n    label: t('Not null'),\n    value: 'not null',\n  },\n];\n\nconst RETENTION_OPTIONS = [\n  {\n    label: t('None'),\n    value: 0,\n  },\n  {\n    label: t('30 days'),\n    value: 30,\n  },\n  {\n    label: t('60 days'),\n    value: 60,\n  },\n  {\n    label: t('90 days'),\n    value: 90,\n  },\n];\n\nconst CONTENT_TYPE_OPTIONS = [\n  {\n    label: t('Dashboard'),\n    value: 'dashboard',\n  },\n  {\n    label: t('Chart'),\n    value: 'chart',\n  },\n];\nconst FORMAT_OPTIONS = {\n  pdf: {\n    label: t('Send as PDF'),\n    value: 'PDF',\n  },\n  png: {\n    label: t('Send as PNG'),\n    value: 'PNG',\n  },\n  csv: {\n    label: t('Send as CSV'),\n    value: 'CSV',\n  },\n  txt: {\n    label: t('Send as text'),\n    value: 'TEXT',\n  },\n};\n\n// Apply to final text input components of each collapse panel\nconst noMarginBottom = css`\n  margin-bottom: 0;\n`;\n\n/*\nHeight of modal body defined here, total width defined at component invocation as antd prop.\n */\nconst StyledModal = styled(Modal)`\n  .ant-modal-body {\n    height: 720px;\n  }\n\n  .control-label {\n    margin-top: ${({ theme }) => theme.gridUnit}px;\n  }\n\n  .ant-collapse > .ant-collapse-item {\n    border-bottom: none;\n  }\n\n  .inline-container {\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    &.wrap {\n      flex-wrap: wrap;\n    }\n\n    > div {\n      flex: 1 1 auto;\n    }\n  }\n`;\n\nconst StyledSwitchContainer = styled.div`\n  display: flex;\n  align-items: center;\n  margin-top: 10px;\n\n  .switch-label {\n    margin-left: 10px;\n  }\n`;\n\nexport const StyledInputContainer = styled.div`\n  ${({ theme }) => css`\n    flex: 1;\n    margin-top: 0px;\n    margin-bottom: ${theme.gridUnit * 4}px;\n\n    input::-webkit-outer-spin-button,\n    input::-webkit-inner-spin-button {\n      -webkit-appearance: none;\n      margin: 0;\n    }\n    input[type='number'] {\n      -moz-appearance: textfield;\n    }\n\n    .helper {\n      display: block;\n      color: ${theme.colors.grayscale.base};\n      font-size: ${theme.typography.sizes.s}px;\n      padding: ${theme.gridUnit}px 0;\n      text-align: left;\n    }\n\n    .required {\n      margin-left: ${theme.gridUnit / 2}px;\n      color: ${theme.colors.error.base};\n    }\n\n    .input-container {\n      display: flex;\n      align-items: center;\n\n      > div {\n        width: 100%;\n      }\n\n      label {\n        display: flex;\n        margin-right: ${theme.gridUnit * 2}px;\n      }\n\n      i {\n        margin: 0 ${theme.gridUnit}px;\n      }\n    }\n\n    input,\n    textarea {\n      flex: 1 1 auto;\n    }\n\n    input[disabled] {\n      color: ${theme.colors.grayscale.base};\n    }\n\n    textarea {\n      height: 300px;\n      resize: none;\n    }\n\n    input::placeholder,\n    textarea::placeholder {\n      color: ${theme.colors.grayscale.light1};\n    }\n\n    textarea,\n    input[type='text'],\n    input[type='number'] {\n      padding: ${theme.gridUnit}px ${theme.gridUnit * 2}px;\n      border-style: none;\n      border: 1px solid ${theme.colors.grayscale.light2};\n      border-radius: ${theme.gridUnit}px;\n\n      &[name='description'] {\n        flex: 1 1 auto;\n      }\n    }\n\n    .input-label {\n      margin-left: 10px;\n    }\n  `}\n`;\n\nconst StyledCheckbox = styled(AntdCheckbox)`\n  margin-top: ${({ theme }) => theme.gridUnit * 0}px;\n`;\n\nconst StyledTooltip = styled(InfoTooltipWithTrigger)`\n  margin-left: ${({ theme }) => theme.gridUnit}px;\n`;\n\n// Notification Method components\nconst StyledNotificationAddButton = styled.div`\n  ${({ theme }) => css`\n    color: ${theme.colors.primary.dark1};\n    cursor: pointer;\n\n    i {\n      margin-right: ${theme.gridUnit * 2}px;\n    }\n\n    &.disabled {\n      color: ${theme.colors.grayscale.light1};\n      cursor: default;\n    }\n  `}\n`;\n\nconst StyledNotificationMethodWrapper = styled.div`\n  .inline-container .input-container {\n    margin-left: 0;\n  }\n`;\n\nconst inputSpacer = (theme: SupersetTheme) => css`\n  margin-right: ${theme.gridUnit * 3}px;\n`;\n\ntype NotificationAddStatus = 'active' | 'disabled' | 'hidden';\n\ninterface NotificationMethodAddProps {\n  status: NotificationAddStatus;\n  onClick: () => void;\n}\n\nexport const TRANSLATIONS = {\n  // Panel titles\n  GENERAL_TITLE: t('General information'),\n  ALERT_CONDITION_TITLE: t('Alert condition'),\n  ALERT_CONTENTS_TITLE: t('Alert contents'),\n  REPORT_CONTENTS_TITLE: t('Report contents'),\n  SCHEDULE_TITLE: t('Schedule'),\n  NOTIFICATION_TITLE: t('Notification method'),\n  // Error text\n  NAME_ERROR_TEXT: t('name'),\n  OWNERS_ERROR_TEXT: t('owners'),\n  CONTENT_ERROR_TEXT: t('content type'),\n  DATABASE_ERROR_TEXT: t('database'),\n  SQL_ERROR_TEXT: t('sql'),\n  ALERT_CONDITION_ERROR_TEXT: t('alert condition'),\n  CRONTAB_ERROR_TEXT: t('crontab'),\n  WORKING_TIMEOUT_ERROR_TEXT: t('working timeout'),\n  RECIPIENTS_ERROR_TEXT: t('recipients'),\n  EMAIL_SUBJECT_ERROR_TEXT: t('email subject'),\n  EMAIL_VALIDATION_ERROR_TEXT: t('invalid email'),\n  ERROR_TOOLTIP_MESSAGE: t(\n    'Not all required fields are complete. Please provide the following:',\n  ),\n};\n\nconst NotificationMethodAdd: FunctionComponent<NotificationMethodAddProps> = ({\n  status = 'active',\n  onClick,\n}) => {\n  if (status === 'hidden') {\n    return null;\n  }\n\n  const checkStatus = () => {\n    if (status !== 'disabled') {\n      onClick();\n    }\n  };\n\n  return (\n    <StyledNotificationAddButton className={status} onClick={checkStatus}>\n      <i className=\"fa fa-plus\" />{' '}\n      {status === 'active'\n        ? t('Add another notification method')\n        : t('Add delivery method')}\n    </StyledNotificationAddButton>\n  );\n};\n\nconst AlertReportModal: FunctionComponent<AlertReportModalProps> = ({\n  addDangerToast,\n  onAdd,\n  onHide,\n  show,\n  alert = null,\n  isReport = false,\n  addSuccessToast,\n}) => {\n  const currentUser = useSelector<any, UserWithPermissionsAndRoles>(\n    state => state.user,\n  );\n  // Check config for alternate notification methods setting\n  const conf = useCommonConf();\n  const allowedNotificationMethods: NotificationMethodOption[] =\n    conf?.ALERT_REPORTS_NOTIFICATION_METHODS || DEFAULT_NOTIFICATION_METHODS;\n\n  const [disableSave, setDisableSave] = useState<boolean>(true);\n\n  const [currentAlert, setCurrentAlert] =\n    useState<Partial<AlertObject> | null>();\n  const [isHidden, setIsHidden] = useState<boolean>(true);\n  const [contentType, setContentType] = useState<string>('dashboard');\n  const [reportFormat, setReportFormat] = useState<string>(\n    DEFAULT_NOTIFICATION_FORMAT,\n  );\n  const [forceScreenshot, setForceScreenshot] = useState<boolean>(false);\n\n  const [isScreenshot, setIsScreenshot] = useState<boolean>(false);\n  useEffect(() => {\n    setIsScreenshot(reportFormat === 'PNG');\n  }, [reportFormat]);\n\n  // Dropdown options\n  const [conditionNotNull, setConditionNotNull] = useState<boolean>(false);\n  const [sourceOptions, setSourceOptions] = useState<MetaObject[]>([]);\n  const [dashboardOptions, setDashboardOptions] = useState<MetaObject[]>([]);\n  const [chartOptions, setChartOptions] = useState<MetaObject[]>([]);\n  // Validation\n  const [validationStatus, setValidationStatus] = useState<ValidationObject>({\n    [Sections.General]: {\n      hasErrors: false,\n      name: TRANSLATIONS.GENERAL_TITLE,\n      errors: [],\n    },\n    [Sections.Content]: {\n      hasErrors: false,\n      name: isReport\n        ? TRANSLATIONS.REPORT_CONTENTS_TITLE\n        : TRANSLATIONS.ALERT_CONTENTS_TITLE,\n      errors: [],\n    },\n    [Sections.Alert]: {\n      hasErrors: false,\n      name: TRANSLATIONS.ALERT_CONDITION_TITLE,\n      errors: [],\n    },\n    [Sections.Schedule]: {\n      hasErrors: false,\n      name: TRANSLATIONS.SCHEDULE_TITLE,\n      errors: [],\n    },\n    [Sections.Notification]: {\n      hasErrors: false,\n      name: TRANSLATIONS.NOTIFICATION_TITLE,\n      errors: [],\n    },\n  });\n  const [errorTooltipMessage, setErrorTooltipMessage] = useState<ReactNode>('');\n\n  const updateValidationStatus = (section: Sections, errors: string[]) => {\n    setValidationStatus(currentValidationData => ({\n      ...currentValidationData,\n      [section]: {\n        hasErrors: errors.length > 0,\n        name: currentValidationData[section].name,\n        errors,\n      },\n    }));\n  };\n\n  // Chart metadata\n  const [chartVizType, setChartVizType] = useState<string>('');\n\n  const reportOrAlert = isReport ? 'report' : 'alert';\n  const isEditMode = alert !== null;\n  const formatOptionEnabled =\n    isFeatureEnabled(FeatureFlag.AlertsAttachReports) || isReport;\n\n  const [notificationAddState, setNotificationAddState] =\n    useState<NotificationAddStatus>('active');\n\n  const [notificationSettings, setNotificationSettings] = useState<\n    NotificationSetting[]\n  >([]);\n  const [emailSubject, setEmailSubject] = useState<string>('');\n  const [emailError, setEmailError] = useState(false);\n\n  const onNotificationAdd = () => {\n    setNotificationSettings([\n      ...notificationSettings,\n      {\n        recipients: '',\n        // options shown in the newly added notification method\n        options: allowedNotificationMethods.filter(\n          // are filtered such that\n          option =>\n            // options are not included\n            !notificationSettings.reduce(\n              // when it exists in previous notificationSettings\n              (accum, setting) => accum || option === setting.method,\n              false,\n            ),\n        ),\n      },\n    ]);\n\n    setNotificationAddState(\n      notificationSettings.length === allowedNotificationMethodsCount\n        ? 'hidden'\n        : 'disabled',\n    );\n  };\n\n  const {\n    ALERT_REPORTS_DEFAULT_WORKING_TIMEOUT,\n    ALERT_REPORTS_DEFAULT_CRON_VALUE,\n    ALERT_REPORTS_DEFAULT_RETENTION,\n  } = useSelector<any, AlertsReportsConfig>(state => {\n    const conf = state.common?.conf;\n    return {\n      ALERT_REPORTS_DEFAULT_WORKING_TIMEOUT:\n        conf?.ALERT_REPORTS_DEFAULT_WORKING_TIMEOUT ?? DEFAULT_WORKING_TIMEOUT,\n      ALERT_REPORTS_DEFAULT_CRON_VALUE:\n        conf?.ALERT_REPORTS_DEFAULT_CRON_VALUE ?? DEFAULT_CRON_VALUE,\n      ALERT_REPORTS_DEFAULT_RETENTION:\n        conf?.ALERT_REPORTS_DEFAULT_RETENTION ?? DEFAULT_RETENTION,\n    };\n  });\n\n  const defaultAlert = {\n    active: true,\n    creation_method: 'alerts_reports',\n    crontab: ALERT_REPORTS_DEFAULT_CRON_VALUE,\n    log_retention: ALERT_REPORTS_DEFAULT_RETENTION,\n    working_timeout: ALERT_REPORTS_DEFAULT_WORKING_TIMEOUT,\n    name: '',\n    owners: [],\n    recipients: [],\n    sql: '',\n    email_subject: '',\n    validator_config_json: {},\n    validator_type: '',\n    force_screenshot: false,\n    grace_period: undefined,\n  };\n\n  const updateNotificationSetting = (\n    index: number,\n    setting: NotificationSetting,\n  ) => {\n    const settings: NotificationSetting[] = [...notificationSettings];\n    settings[index] = setting;\n\n    // if you've changed notification method -> remove trailing methods\n    if (notificationSettings[index].method !== setting.method) {\n      notificationSettings[index] = setting;\n\n      setNotificationSettings(\n        notificationSettings.filter((_, idx) => idx <= index),\n      );\n\n      if (notificationSettings.length - 1 > index) {\n        setNotificationAddState('active');\n      }\n\n      if (setting.method !== undefined && notificationAddState !== 'hidden') {\n        setNotificationAddState('active');\n      }\n    } else {\n      setNotificationSettings(settings);\n    }\n  };\n\n  const removeNotificationSetting = (index: number) => {\n    const settings = notificationSettings.slice();\n\n    settings.splice(index, 1);\n    setNotificationSettings(settings);\n    setNotificationAddState('active');\n  };\n\n  // Alert fetch logic\n  const {\n    state: { loading, resource, error: fetchError },\n    fetchResource,\n    createResource,\n    updateResource,\n    clearError,\n  } = useSingleViewResource<AlertObject>('report', t('report'), addDangerToast);\n\n  // Functions\n  const hide = () => {\n    clearError();\n    setIsHidden(true);\n    onHide();\n    setNotificationSettings([]);\n    setCurrentAlert({ ...defaultAlert });\n    setNotificationAddState('active');\n  };\n\n  const onSave = () => {\n    // Notification Settings\n    const recipients: Recipient[] = [];\n\n    notificationSettings.forEach(setting => {\n      if (setting.method && setting.recipients.length) {\n        recipients.push({\n          recipient_config_json: {\n            target: setting.recipients,\n            ccTarget: setting.cc,\n            bccTarget: setting.bcc,\n          },\n          type: setting.method,\n        });\n      }\n    });\n\n    const shouldEnableForceScreenshot = contentType === 'chart' && !isReport;\n    const data: any = {\n      ...currentAlert,\n      type: isReport ? 'Report' : 'Alert',\n      force_screenshot: shouldEnableForceScreenshot || forceScreenshot,\n      validator_type: conditionNotNull ? 'not null' : 'operator',\n      validator_config_json: conditionNotNull\n        ? {}\n        : currentAlert?.validator_config_json,\n      chart: contentType === 'chart' ? currentAlert?.chart?.value : null,\n      dashboard:\n        contentType === 'dashboard' ? currentAlert?.dashboard?.value : null,\n      custom_width: isScreenshot ? currentAlert?.custom_width : undefined,\n      database: currentAlert?.database?.value,\n      owners: (currentAlert?.owners || []).map(\n        owner => (owner as MetaObject).value || owner.id,\n      ),\n      recipients,\n      report_format: reportFormat || DEFAULT_NOTIFICATION_FORMAT,\n    };\n\n    if (data.recipients && !data.recipients.length) {\n      delete data.recipients;\n    }\n\n    data.context_markdown = 'string';\n\n    if (isEditMode) {\n      // Edit\n      if (currentAlert?.id) {\n        const update_id = currentAlert.id;\n\n        delete data.id;\n        delete data.created_by;\n        delete data.last_eval_dttm;\n        delete data.last_state;\n        delete data.last_value;\n        delete data.last_value_row_json;\n\n        updateResource(update_id, data).then(response => {\n          if (!response) {\n            return;\n          }\n\n          addSuccessToast(t('%s updated', data.type));\n\n          if (onAdd) {\n            onAdd();\n          }\n\n          hide();\n        });\n      }\n    } else if (currentAlert) {\n      // Create\n      createResource(data).then(response => {\n        if (!response) {\n          return;\n        }\n\n        addSuccessToast(t('%s updated', data.type));\n\n        if (onAdd) {\n          onAdd(response);\n        }\n\n        hide();\n      });\n    }\n  };\n\n  // Fetch data to populate form dropdowns\n  const loadOwnerOptions = useMemo(\n    () =>\n      (input = '', page: number, pageSize: number) => {\n        const query = rison.encode({\n          filter: input,\n          page,\n          page_size: pageSize,\n        });\n        return SupersetClient.get({\n          endpoint: `/api/v1/report/related/created_by?q=${query}`,\n        }).then(response => ({\n          data: response.json.result.map(\n            (item: { value: number; text: string }) => ({\n              value: item.value,\n              label: item.text,\n            }),\n          ),\n          totalCount: response.json.count,\n        }));\n      },\n    [],\n  );\n\n  const getSourceData = useCallback(\n    (db?: MetaObject) => {\n      const database = db || currentAlert?.database;\n\n      if (!database || database.label) {\n        return null;\n      }\n\n      let result;\n\n      // Cycle through source options to find the selected option\n      sourceOptions.forEach(source => {\n        if (source.value === database.value || source.value === database.id) {\n          result = source;\n        }\n      });\n\n      return result;\n    },\n    [currentAlert?.database, sourceOptions],\n  );\n\n  // Updating alert/report state\n  const updateAlertState = (name: string, value: any) => {\n    setCurrentAlert(currentAlertData => ({\n      ...currentAlertData,\n      [name]: value,\n    }));\n  };\n\n  const loadSourceOptions = useMemo(\n    () =>\n      (input = '', page: number, pageSize: number) => {\n        const query = rison.encode({\n          filter: input,\n          page,\n          page_size: pageSize,\n        });\n        return SupersetClient.get({\n          endpoint: `/api/v1/report/related/database?q=${query}`,\n        }).then(response => {\n          const list = response.json.result.map(\n            (item: { value: number; text: string }) => ({\n              value: item.value,\n              label: item.text,\n            }),\n          );\n          setSourceOptions(list);\n          return { data: list, totalCount: response.json.count };\n        });\n      },\n    [],\n  );\n\n  const databaseLabel = currentAlert?.database && !currentAlert.database.label;\n  useEffect(() => {\n    // Find source if current alert has one set\n    if (databaseLabel) {\n      updateAlertState('database', getSourceData());\n    }\n  }, [databaseLabel, getSourceData]);\n\n  const loadDashboardOptions = useMemo(\n    () =>\n      (input = '', page: number, pageSize: number) => {\n        const query = rison.encode_uri({\n          filter: input,\n          page,\n          page_size: pageSize,\n        });\n        return SupersetClient.get({\n          endpoint: `/api/v1/report/related/dashboard?q=${query}`,\n        }).then(response => {\n          const list = response.json.result.map(\n            (item: { value: number; text: string }) => ({\n              value: item.value,\n              label: item.text,\n            }),\n          );\n          setDashboardOptions(list);\n          return { data: list, totalCount: response.json.count };\n        });\n      },\n    [],\n  );\n\n  const getDashboardData = (db?: MetaObject) => {\n    const dashboard = db || currentAlert?.dashboard;\n\n    if (!dashboard || dashboard.label) {\n      return null;\n    }\n\n    let result;\n\n    // Cycle through dashboard options to find the selected option\n    dashboardOptions.forEach(dash => {\n      if (dash.value === dashboard.value || dash.value === dashboard.id) {\n        result = dash;\n      }\n    });\n\n    return result;\n  };\n\n  const getChartData = useCallback(\n    (chartData?: MetaObject) => {\n      const chart = chartData || currentAlert?.chart;\n\n      if (!chart || chart.label) {\n        return null;\n      }\n\n      let result;\n\n      // Cycle through chart options to find the selected option\n      chartOptions.forEach(slice => {\n        if (slice.value === chart.value || slice.value === chart.id) {\n          result = slice;\n        }\n      });\n\n      return result;\n    },\n    [chartOptions, currentAlert?.chart],\n  );\n\n  const noChartLabel = currentAlert?.chart && !currentAlert?.chart.label;\n  useEffect(() => {\n    // Find source if current alert has one set\n    if (noChartLabel) {\n      updateAlertState('chart', getChartData());\n    }\n  }, [getChartData, noChartLabel]);\n\n  const loadChartOptions = useMemo(\n    () =>\n      (input = '', page: number, pageSize: number) => {\n        const query = rison.encode_uri({\n          filter: input,\n          page,\n          page_size: pageSize,\n        });\n        return SupersetClient.get({\n          endpoint: `/api/v1/report/related/chart?q=${query}`,\n        }).then(response => {\n          const list = response.json.result.map(\n            (item: { value: number; text: string }) => ({\n              value: item.value,\n              label: item.text,\n            }),\n          );\n\n          setChartOptions(list);\n          return { data: list, totalCount: response.json.count };\n        });\n      },\n    [],\n  );\n\n  const getChartVisualizationType = (chart: SelectValue) =>\n    SupersetClient.get({\n      endpoint: `/api/v1/chart/${chart.value}`,\n    }).then(response => setChartVizType(response.json.result.viz_type));\n\n  // Handle input/textarea updates\n  const onInputChange = (\n    event: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>,\n  ) => {\n    const {\n      target: { type, value, name },\n    } = event;\n    const parsedValue = type === 'number' ? parseInt(value, 10) || null : value;\n\n    updateAlertState(name, parsedValue);\n\n    if (name === 'name') {\n      updateEmailSubject();\n    }\n  };\n\n  const onCustomWidthChange = (value: number | null | undefined) => {\n    updateAlertState('custom_width', value);\n  };\n\n  const onTimeoutVerifyChange = (\n    event: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>,\n  ) => {\n    const { target } = event;\n    const value = +target.value;\n\n    // Need to make sure grace period is not lower than TIMEOUT_MIN\n    if (value === 0) {\n      updateAlertState(target.name, undefined);\n    } else {\n      updateAlertState(\n        target.name,\n        value ? Math.max(value, TIMEOUT_MIN) : value,\n      );\n    }\n  };\n\n  const onSQLChange = (value: string) => {\n    updateAlertState('sql', value || '');\n  };\n\n  const onOwnersChange = (value: Array<SelectValue>) => {\n    updateAlertState('owners', value || []);\n  };\n\n  const onSourceChange = (value: Array<SelectValue>) => {\n    updateAlertState('database', value || []);\n  };\n\n  const onDashboardChange = (dashboard: SelectValue) => {\n    updateAlertState('dashboard', dashboard || undefined);\n    updateAlertState('chart', null);\n  };\n\n  const onChartChange = (chart: SelectValue) => {\n    getChartVisualizationType(chart);\n    updateAlertState('chart', chart || undefined);\n    updateAlertState('dashboard', null);\n  };\n\n  const onActiveSwitch = (checked: boolean) => {\n    updateAlertState('active', checked);\n  };\n\n  const onConditionChange = (op: Operator) => {\n    setConditionNotNull(op === 'not null');\n\n    const config = {\n      op,\n      threshold: currentAlert\n        ? currentAlert.validator_config_json?.threshold\n        : undefined,\n    };\n\n    updateAlertState('validator_config_json', config);\n  };\n\n  const onThresholdChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { target } = event;\n\n    const config = {\n      op: currentAlert ? currentAlert.validator_config_json?.op : undefined,\n      threshold: target.value,\n    };\n\n    updateAlertState('validator_config_json', config);\n  };\n\n  const onLogRetentionChange = (retention: number) => {\n    updateAlertState('log_retention', retention);\n  };\n\n  const onTimezoneChange = (timezone: string) => {\n    updateAlertState('timezone', timezone);\n  };\n\n  const onContentTypeChange = (value: string) => {\n    // When switch content type, reset force_screenshot to false\n    setForceScreenshot(false);\n    setContentType(value);\n  };\n\n  const onFormatChange = (value: string) => {\n    setReportFormat(value);\n  };\n\n  const onForceScreenshotChange = (event: any) => {\n    setForceScreenshot(event.target.checked);\n  };\n\n  // Make sure notification settings has the required info\n  const checkNotificationSettings = () => {\n    if (!notificationSettings.length) {\n      return false;\n    }\n\n    let hasInfo = false;\n\n    notificationSettings.forEach(setting => {\n      if (!!setting.method && setting.recipients?.length) {\n        hasInfo = true;\n      }\n    });\n\n    return hasInfo;\n  };\n\n  const checkEmailFormat = () => {\n    if (!notificationSettings.length) {\n      return true;\n    }\n\n    const validateEmails = (emails: string): boolean => {\n      if (!emails) return true; // No emails to validate\n      return emails\n        .split(/[,;]/)\n        .every(email => EMAIL_REGEX.test(email.trim()));\n    };\n\n    // Use array method to check conditions\n    return notificationSettings.every(setting => {\n      if (!!setting.method && setting.method === 'Email') {\n        return (\n          (!setting.recipients?.length || validateEmails(setting.recipients)) &&\n          (!setting.cc || validateEmails(setting.cc)) &&\n          (!setting.bcc || validateEmails(setting.bcc))\n        );\n      }\n      return true; // Non-Email methods are considered valid\n    });\n  };\n\n  const validateGeneralSection = () => {\n    const errors = [];\n    if (!currentAlert?.name?.length) {\n      errors.push(TRANSLATIONS.NAME_ERROR_TEXT);\n    }\n    if (!currentAlert?.owners?.length) {\n      errors.push(TRANSLATIONS.OWNERS_ERROR_TEXT);\n    }\n    updateValidationStatus(Sections.General, errors);\n  };\n  const validateContentSection = () => {\n    const errors = [];\n    if (\n      !(\n        (contentType === 'dashboard' && !!currentAlert?.dashboard) ||\n        (contentType === 'chart' && !!currentAlert?.chart)\n      )\n    ) {\n      errors.push(TRANSLATIONS.CONTENT_ERROR_TEXT);\n    }\n    updateValidationStatus(Sections.Content, errors);\n  };\n  const validateAlertSection = () => {\n    const errors = [];\n    if (!currentAlert?.database) {\n      errors.push(TRANSLATIONS.DATABASE_ERROR_TEXT);\n    }\n    if (!currentAlert?.sql?.length) {\n      errors.push(TRANSLATIONS.SQL_ERROR_TEXT);\n    }\n    if (\n      !(\n        (conditionNotNull || !!currentAlert?.validator_config_json?.op) &&\n        (conditionNotNull ||\n          currentAlert?.validator_config_json?.threshold !== undefined)\n      )\n    ) {\n      errors.push(TRANSLATIONS.ALERT_CONDITION_ERROR_TEXT);\n    }\n    updateValidationStatus(Sections.Alert, errors);\n  };\n\n  const validateScheduleSection = () => {\n    const errors = [];\n    if (!currentAlert?.crontab?.length) {\n      errors.push(TRANSLATIONS.CRONTAB_ERROR_TEXT);\n    }\n    if (!currentAlert?.working_timeout) {\n      errors.push(TRANSLATIONS.WORKING_TIMEOUT_ERROR_TEXT);\n    }\n\n    updateValidationStatus(Sections.Schedule, errors);\n  };\n\n  const validateNotificationSection = () => {\n    const errors = [];\n    const hasErrors = !checkNotificationSettings();\n\n    if (hasErrors) {\n      errors.push(TRANSLATIONS.RECIPIENTS_ERROR_TEXT);\n    } else {\n      // Check for email format errors\n      const hasValidationErrors = !checkEmailFormat();\n      if (hasValidationErrors) {\n        errors.push(TRANSLATIONS.EMAIL_VALIDATION_ERROR_TEXT);\n      }\n    }\n\n    if (emailError) {\n      errors.push(TRANSLATIONS.EMAIL_SUBJECT_ERROR_TEXT);\n    }\n\n    // Update validation status with combined errors\n    updateValidationStatus(Sections.Notification, errors);\n  };\n\n  const validateAll = () => {\n    validateGeneralSection();\n    validateContentSection();\n    if (!isReport) validateAlertSection();\n    validateScheduleSection();\n    validateNotificationSection();\n  };\n\n  const enforceValidation = () => {\n    const sections = [\n      Sections.General,\n      Sections.Content,\n      isReport ? undefined : Sections.Alert,\n      Sections.Schedule,\n      Sections.Notification,\n    ];\n\n    const hasErrors = sections.some(\n      section => section && validationStatus[section].hasErrors,\n    );\n    const tooltip = hasErrors ? buildErrorTooltipMessage(validationStatus) : '';\n    setErrorTooltipMessage(tooltip);\n    setDisableSave(hasErrors);\n  };\n\n  // Initialize\n  useEffect(() => {\n    if (\n      isEditMode &&\n      (!currentAlert?.id || alert?.id !== currentAlert.id || (isHidden && show))\n    ) {\n      if (alert?.id !== null && !loading && !fetchError) {\n        const id = alert.id || 0;\n        fetchResource(id);\n      }\n    } else if (\n      !isEditMode &&\n      (!currentAlert || currentAlert.id || (isHidden && show))\n    ) {\n      setCurrentAlert({\n        ...defaultAlert,\n        owners: currentUser\n          ? [\n              {\n                value: currentUser.userId,\n                label: `${currentUser.firstName} ${currentUser.lastName}`,\n              },\n            ]\n          : [],\n      });\n      setNotificationSettings([\n        {\n          recipients: '',\n          cc: '',\n          bcc: '',\n          options: allowedNotificationMethods,\n          method: NotificationMethodOption.Email,\n        },\n      ]);\n      setNotificationAddState('active');\n    }\n  }, [alert]);\n\n  useEffect(() => {\n    if (resource) {\n      // Add notification settings\n      const settings = (resource.recipients || []).map(setting => {\n        const config =\n          typeof setting.recipient_config_json === 'string'\n            ? JSON.parse(setting.recipient_config_json)\n            : {};\n        return {\n          method: setting.type,\n          // @ts-ignore: Type not assignable\n          recipients: config.target || setting.recipient_config_json,\n          options: allowedNotificationMethods,\n          cc: config.ccTarget || '',\n          bcc: config.bccTarget || '',\n        };\n      });\n\n      setNotificationSettings(settings);\n      setNotificationAddState(\n        settings.length === allowedNotificationMethods.length\n          ? 'hidden'\n          : 'active',\n      );\n      setContentType(resource.chart ? 'chart' : 'dashboard');\n      setReportFormat(resource.report_format || DEFAULT_NOTIFICATION_FORMAT);\n      const validatorConfig =\n        typeof resource.validator_config_json === 'string'\n          ? JSON.parse(resource.validator_config_json)\n          : resource.validator_config_json;\n\n      setConditionNotNull(resource.validator_type === 'not null');\n\n      if (resource.chart) {\n        setChartVizType((resource.chart as ChartObject).viz_type);\n      }\n      setForceScreenshot(resource.force_screenshot);\n\n      setCurrentAlert({\n        ...resource,\n        chart: resource.chart\n          ? getChartData(resource.chart) || {\n              value: (resource.chart as ChartObject).id,\n              label: (resource.chart as ChartObject).slice_name,\n            }\n          : undefined,\n        dashboard: resource.dashboard\n          ? getDashboardData(resource.dashboard) || {\n              value: (resource.dashboard as DashboardObject).id,\n              label: (resource.dashboard as DashboardObject).dashboard_title,\n            }\n          : undefined,\n        database: resource.database\n          ? getSourceData(resource.database) || {\n              value: (resource.database as DatabaseObject).id,\n              label: (resource.database as DatabaseObject).database_name,\n            }\n          : undefined,\n        owners: (alert?.owners || []).map(owner => ({\n          value: (owner as MetaObject).value || owner.id,\n          label:\n            (owner as MetaObject).label ||\n            `${(owner as Owner).first_name} ${(owner as Owner).last_name}`,\n        })),\n        // @ts-ignore: Type not assignable\n        validator_config_json:\n          resource.validator_type === 'not null'\n            ? {\n                op: 'not null',\n              }\n            : validatorConfig,\n      });\n    }\n  }, [resource]);\n\n  // Validation\n  const currentAlertSafe = currentAlert || {};\n  useEffect(() => {\n    validateAll();\n    updateEmailSubject();\n  }, [\n    currentAlertSafe.name,\n    currentAlertSafe.owners,\n    currentAlertSafe.database,\n    currentAlertSafe.sql,\n    currentAlertSafe.validator_config_json,\n    currentAlertSafe.crontab,\n    currentAlertSafe.working_timeout,\n    currentAlertSafe.dashboard,\n    currentAlertSafe.chart,\n    contentType,\n    notificationSettings,\n    conditionNotNull,\n    emailError,\n  ]);\n  useEffect(() => {\n    enforceValidation();\n  }, [validationStatus]);\n\n  const allowedNotificationMethodsCount = useMemo(\n    () =>\n      allowedNotificationMethods.reduce((accum: string[], setting: string) => {\n        if (\n          accum.some(nm => nm.includes('slack')) &&\n          setting.toLowerCase().includes('slack')\n        ) {\n          return accum;\n        }\n        return [...accum, setting.toLowerCase()];\n      }, []).length,\n    [allowedNotificationMethods],\n  );\n\n  // Show/hide\n  if (isHidden && show) {\n    setIsHidden(false);\n  }\n\n  const getTitleText = () => {\n    let titleText;\n\n    switch (true) {\n      case isEditMode && isReport:\n        titleText = t('Edit Report');\n        break;\n      case isEditMode:\n        titleText = t('Edit Alert');\n        break;\n      case isReport:\n        titleText = t('Add Report');\n        break;\n      default:\n        titleText = t('Add Alert');\n        break;\n    }\n\n    return titleText;\n  };\n\n  const updateEmailSubject = () => {\n    if (contentType === 'chart') {\n      if (currentAlert?.name || currentAlert?.chart?.label) {\n        setEmailSubject(\n          `${currentAlert?.name}: ${currentAlert?.chart?.label || ''}`,\n        );\n      } else {\n        setEmailSubject('');\n      }\n    } else if (contentType === 'dashboard') {\n      if (currentAlert?.name || currentAlert?.dashboard?.label) {\n        setEmailSubject(\n          `${currentAlert?.name}: ${currentAlert?.dashboard?.label || ''}`,\n        );\n      } else {\n        setEmailSubject('');\n      }\n    } else {\n      setEmailSubject('');\n    }\n  };\n\n  const handleErrorUpdate = (hasError: boolean) => {\n    setEmailError(hasError);\n  };\n\n  return (\n    <StyledModal\n      className=\"no-content-padding\"\n      responsive\n      disablePrimaryButton={disableSave}\n      primaryTooltipMessage={errorTooltipMessage}\n      onHandledPrimaryAction={onSave}\n      onHide={hide}\n      primaryButtonName={isEditMode ? t('Save') : t('Add')}\n      show={show}\n      width=\"500px\"\n      centered\n      title={<h4 data-test=\"alert-report-modal-title\">{getTitleText()}</h4>}\n    >\n      <Collapse\n        expandIconPosition=\"right\"\n        defaultActiveKey=\"general\"\n        accordion\n        css={css`\n          border: 'none';\n        `}\n      >\n        <StyledPanel\n          header={\n            <ValidatedPanelHeader\n              title={TRANSLATIONS.GENERAL_TITLE}\n              subtitle={t(\n                'Set up basic details, such as name and description.',\n              )}\n              validateCheckStatus={\n                !validationStatus[Sections.General].hasErrors\n              }\n              testId=\"general-information-panel\"\n            />\n          }\n          key=\"general\"\n        >\n          <div className=\"header-section\">\n            <StyledInputContainer>\n              <div className=\"control-label\">\n                {isReport ? t('Report name') : t('Alert name')}\n                <span className=\"required\">*</span>\n              </div>\n              <div className=\"input-container\">\n                <input\n                  type=\"text\"\n                  name=\"name\"\n                  value={currentAlert ? currentAlert.name : ''}\n                  placeholder={\n                    isReport ? t('Enter report name') : t('Enter alert name')\n                  }\n                  onChange={onInputChange}\n                />\n              </div>\n            </StyledInputContainer>\n            <StyledInputContainer>\n              <div className=\"control-label\">\n                {t('Owners')}\n                <span className=\"required\">*</span>\n              </div>\n              <div data-test=\"owners-select\" className=\"input-container\">\n                <AsyncSelect\n                  ariaLabel={t('Owners')}\n                  allowClear\n                  name=\"owners\"\n                  mode=\"multiple\"\n                  placeholder={t('Select owners')}\n                  value={\n                    (currentAlert?.owners as {\n                      label: string;\n                      value: number;\n                    }[]) || []\n                  }\n                  options={loadOwnerOptions}\n                  onChange={onOwnersChange}\n                />\n              </div>\n            </StyledInputContainer>\n            <StyledInputContainer>\n              <div className=\"control-label\">{t('Description')}</div>\n              <div className=\"input-container\">\n                <input\n                  type=\"text\"\n                  name=\"description\"\n                  value={currentAlert ? currentAlert.description || '' : ''}\n                  placeholder={t(\n                    'Include description to be sent with %s',\n                    reportOrAlert,\n                  )}\n                  onChange={onInputChange}\n                />\n              </div>\n            </StyledInputContainer>\n            <StyledSwitchContainer>\n              <Switch\n                checked={currentAlert ? currentAlert.active : false}\n                defaultChecked\n                onChange={onActiveSwitch}\n              />\n              <div className=\"switch-label\">\n                {isReport ? t('Report is active') : t('Alert is active')}\n              </div>\n            </StyledSwitchContainer>\n          </div>\n        </StyledPanel>\n        {!isReport && (\n          <StyledPanel\n            header={\n              <ValidatedPanelHeader\n                title={TRANSLATIONS.ALERT_CONDITION_TITLE}\n                subtitle={t(\n                  'Define the database, SQL query, and triggering conditions for alert.',\n                )}\n                validateCheckStatus={\n                  !validationStatus[Sections.Alert].hasErrors\n                }\n                testId=\"alert-condition-panel\"\n              />\n            }\n            key=\"condition\"\n          >\n            <StyledInputContainer>\n              <div className=\"control-label\">\n                {t('Database')}\n                <span className=\"required\">*</span>\n              </div>\n              <div className=\"input-container\">\n                <AsyncSelect\n                  ariaLabel={t('Database')}\n                  name=\"source\"\n                  placeholder={t('Select database')}\n                  value={\n                    currentAlert?.database?.label &&\n                    currentAlert?.database?.value\n                      ? {\n                          value: currentAlert.database.value,\n                          label: currentAlert.database.label,\n                        }\n                      : undefined\n                  }\n                  options={loadSourceOptions}\n                  onChange={onSourceChange}\n                />\n              </div>\n            </StyledInputContainer>\n            <StyledInputContainer>\n              <div className=\"control-label\">\n                {t('SQL Query')}\n                <StyledTooltip\n                  tooltip={t(\n                    'The result of this query must be a value capable of numeric interpretation e.g. 1, 1.0, or \"1\" (compatible with Python\\'s float() function).',\n                  )}\n                />\n                <span className=\"required\">*</span>\n              </div>\n              <TextAreaControl\n                name=\"sql\"\n                language=\"sql\"\n                offerEditInModal={false}\n                minLines={15}\n                maxLines={15}\n                onChange={onSQLChange}\n                readOnly={false}\n                initialValue={resource?.sql}\n                key={currentAlert?.id}\n              />\n            </StyledInputContainer>\n            <div className=\"inline-container wrap\">\n              <StyledInputContainer css={noMarginBottom}>\n                <div className=\"control-label\" css={inputSpacer}>\n                  {t('Trigger Alert If...')}\n                  <span className=\"required\">*</span>\n                </div>\n                <div className=\"input-container\">\n                  <Select\n                    ariaLabel={t('Condition')}\n                    onChange={onConditionChange}\n                    placeholder={t('Condition')}\n                    value={currentAlert?.validator_config_json?.op || undefined}\n                    options={CONDITIONS}\n                    css={inputSpacer}\n                  />\n                </div>\n              </StyledInputContainer>\n              <StyledInputContainer css={noMarginBottom}>\n                <div className=\"control-label\">\n                  {t('Value')}{' '}\n                  {!conditionNotNull && <span className=\"required\">*</span>}\n                </div>\n                <div className=\"input-container\">\n                  <input\n                    type=\"number\"\n                    name=\"threshold\"\n                    disabled={conditionNotNull}\n                    value={\n                      currentAlert?.validator_config_json?.threshold !==\n                        undefined && !conditionNotNull\n                        ? currentAlert.validator_config_json.threshold\n                        : ''\n                    }\n                    placeholder={t('Value')}\n                    onChange={onThresholdChange}\n                  />\n                </div>\n              </StyledInputContainer>\n            </div>\n          </StyledPanel>\n        )}\n        <StyledPanel\n          header={\n            <ValidatedPanelHeader\n              title={\n                isReport\n                  ? TRANSLATIONS.REPORT_CONTENTS_TITLE\n                  : TRANSLATIONS.ALERT_CONTENTS_TITLE\n              }\n              subtitle={t('Customize data source, filters, and layout.')}\n              validateCheckStatus={\n                !validationStatus[Sections.Content].hasErrors\n              }\n              testId=\"contents-panel\"\n            />\n          }\n          key=\"contents\"\n        >\n          <StyledInputContainer>\n            <div className=\"control-label\">\n              {t('Content type')}\n              <span className=\"required\">*</span>\n            </div>\n            <Select\n              ariaLabel={t('Select content type')}\n              onChange={onContentTypeChange}\n              value={contentType}\n              options={CONTENT_TYPE_OPTIONS}\n              placeholder={t('Select content type')}\n            />\n          </StyledInputContainer>\n          <StyledInputContainer>\n            {contentType === 'chart' ? (\n              <>\n                <div className=\"control-label\">\n                  {t('Select chart')}\n                  <span className=\"required\">*</span>\n                </div>\n                <AsyncSelect\n                  ariaLabel={t('Chart')}\n                  name=\"chart\"\n                  value={\n                    currentAlert?.chart?.label && currentAlert?.chart?.value\n                      ? {\n                          value: currentAlert.chart.value,\n                          label: currentAlert.chart.label,\n                        }\n                      : undefined\n                  }\n                  options={loadChartOptions}\n                  onChange={onChartChange}\n                  placeholder={t('Select chart to use')}\n                />\n              </>\n            ) : (\n              <>\n                <div className=\"control-label\">\n                  {t('Select dashboard')}\n                  <span className=\"required\">*</span>\n                </div>\n                <AsyncSelect\n                  ariaLabel={t('Dashboard')}\n                  name=\"dashboard\"\n                  value={\n                    currentAlert?.dashboard?.label &&\n                    currentAlert?.dashboard?.value\n                      ? {\n                          value: currentAlert.dashboard.value,\n                          label: currentAlert.dashboard.label,\n                        }\n                      : undefined\n                  }\n                  options={loadDashboardOptions}\n                  onChange={onDashboardChange}\n                  placeholder={t('Select dashboard to use')}\n                />\n              </>\n            )}\n          </StyledInputContainer>\n          <StyledInputContainer\n            css={\n              ['PDF', 'TEXT', 'CSV'].includes(reportFormat) && noMarginBottom\n            }\n          >\n            {formatOptionEnabled && (\n              <>\n                <div className=\"control-label\">\n                  {t('Content format')}\n                  <span className=\"required\">*</span>\n                </div>\n                <Select\n                  ariaLabel={t('Select format')}\n                  onChange={onFormatChange}\n                  value={reportFormat}\n                  options={\n                    contentType === 'dashboard'\n                      ? ['pdf', 'png'].map(key => FORMAT_OPTIONS[key])\n                      : /* If chart is of text based viz type: show text\n                  format option */\n                        TEXT_BASED_VISUALIZATION_TYPES.includes(chartVizType)\n                        ? Object.values(FORMAT_OPTIONS)\n                        : ['pdf', 'png', 'csv'].map(key => FORMAT_OPTIONS[key])\n                  }\n                  placeholder={t('Select format')}\n                />\n              </>\n            )}\n          </StyledInputContainer>\n          {isScreenshot && (\n            <StyledInputContainer\n              css={!isReport && contentType === 'chart' && noMarginBottom}\n            >\n              <div className=\"control-label\">{t('Screenshot width')}</div>\n              <div className=\"input-container\">\n                <InputNumber\n                  type=\"number\"\n                  name=\"custom_width\"\n                  value={currentAlert?.custom_width || undefined}\n                  min={600}\n                  max={2400}\n                  placeholder={t('Input custom width in pixels')}\n                  onChange={onCustomWidthChange}\n                />\n              </div>\n            </StyledInputContainer>\n          )}\n          {(isReport || contentType === 'dashboard') && (\n            <div className=\"inline-container\">\n              <StyledCheckbox\n                data-test=\"bypass-cache\"\n                className=\"checkbox\"\n                checked={forceScreenshot}\n                onChange={onForceScreenshotChange}\n              >\n                {t('Ignore cache when generating report')}\n              </StyledCheckbox>\n            </div>\n          )}\n        </StyledPanel>\n        <StyledPanel\n          header={\n            <ValidatedPanelHeader\n              title={TRANSLATIONS.SCHEDULE_TITLE}\n              subtitle={t(\n                'Define delivery schedule, timezone, and frequency settings.',\n              )}\n              validateCheckStatus={\n                !validationStatus[Sections.Schedule].hasErrors\n              }\n              testId=\"schedule-panel\"\n            />\n          }\n          key=\"schedule\"\n        >\n          <AlertReportCronScheduler\n            value={currentAlert?.crontab || ''}\n            onChange={newVal => updateAlertState('crontab', newVal)}\n          />\n          <StyledInputContainer>\n            <div className=\"control-label\">\n              {t('Timezone')} <span className=\"required\">*</span>\n            </div>\n            <TimezoneSelector\n              onTimezoneChange={onTimezoneChange}\n              timezone={currentAlert?.timezone}\n              minWidth=\"100%\"\n            />\n          </StyledInputContainer>\n          <StyledInputContainer>\n            <div className=\"control-label\">\n              {t('Log retention')}\n              <span className=\"required\">*</span>\n            </div>\n            <div className=\"input-container\">\n              <Select\n                ariaLabel={t('Log retention')}\n                placeholder={t('Log retention')}\n                onChange={onLogRetentionChange}\n                value={currentAlert?.log_retention}\n                options={RETENTION_OPTIONS}\n                sortComparator={propertyComparator('value')}\n              />\n            </div>\n          </StyledInputContainer>\n          <StyledInputContainer css={noMarginBottom}>\n            {isReport ? (\n              <>\n                <div className=\"control-label\">\n                  {t('Working timeout')}\n                  <span className=\"required\">*</span>\n                </div>\n                <div className=\"input-container\">\n                  <NumberInput\n                    min={1}\n                    name=\"working_timeout\"\n                    value={currentAlert?.working_timeout || ''}\n                    placeholder={t('Time in seconds')}\n                    onChange={onTimeoutVerifyChange}\n                    timeUnit={t('seconds')}\n                  />\n                </div>\n              </>\n            ) : (\n              <>\n                <div className=\"control-label\">{t('Grace period')}</div>\n                <div className=\"input-container\">\n                  <NumberInput\n                    min={1}\n                    name=\"grace_period\"\n                    value={currentAlert?.grace_period || ''}\n                    placeholder={t('Time in seconds')}\n                    onChange={onTimeoutVerifyChange}\n                    timeUnit={t('seconds')}\n                  />\n                </div>\n              </>\n            )}\n          </StyledInputContainer>\n        </StyledPanel>\n        <StyledPanel\n          header={\n            <ValidatedPanelHeader\n              title={TRANSLATIONS.NOTIFICATION_TITLE}\n              subtitle={t('Choose notification method and recipients.')}\n              validateCheckStatus={\n                !validationStatus[Sections.Notification].hasErrors\n              }\n              testId=\"notification-method-panel\"\n            />\n          }\n          key=\"notification\"\n        >\n          {notificationSettings.map((notificationSetting, i) => (\n            <StyledNotificationMethodWrapper>\n              <NotificationMethod\n                setting={notificationSetting}\n                index={i}\n                key={`NotificationMethod-${i}`}\n                onUpdate={updateNotificationSetting}\n                onRemove={removeNotificationSetting}\n                onInputChange={onInputChange}\n                email_subject={currentAlert?.email_subject || ''}\n                defaultSubject={emailSubject || ''}\n                setErrorSubject={handleErrorUpdate}\n              />\n            </StyledNotificationMethodWrapper>\n          ))}\n          {\n            // Prohibit 'add notification method' button if only one present\n            allowedNotificationMethodsCount > notificationSettings.length && (\n              <NotificationMethodAdd\n                data-test=\"notification-add\"\n                status={notificationAddState}\n                onClick={onNotificationAdd}\n              />\n            )\n          }\n        </StyledPanel>\n      </Collapse>\n    </StyledModal>\n  );\n};\n\nexport default withToasts(AlertReportModal);\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport Owner from 'src/types/Owner';\nimport { NotificationFormats } from 'src/features/reports/types';\n\ntype user = {\n  id: number;\n  first_name: string;\n  last_name: string;\n};\nexport type ChartObject = {\n  id: number;\n  slice_name: string;\n  viz_type: string;\n};\n\nexport type DashboardObject = {\n  dashboard_title: string;\n  id: number;\n};\n\nexport type DatabaseObject = {\n  database_name: string;\n  id: number;\n};\n\nexport enum NotificationMethodOption {\n  Email = 'Email',\n  Slack = 'Slack',\n  SlackV2 = 'SlackV2',\n}\n\nexport type NotificationSetting = {\n  method?: NotificationMethodOption;\n  recipients: string;\n  cc?: string;\n  bcc?: string;\n  options: NotificationMethodOption[];\n};\n\nexport type SlackChannel = {\n  id: string;\n  name: string;\n  is_member: boolean;\n  is_private: boolean;\n};\n\nexport type Recipient = {\n  recipient_config_json: {\n    target: string;\n    ccTarget?: string;\n    bccTarget?: string;\n  };\n  type: NotificationMethodOption;\n};\n\nexport type MetaObject = {\n  id?: number;\n  label?: string;\n  value?: number | string;\n};\n\nexport type Operator = '<' | '>' | '<=' | '>=' | '==' | '!=' | 'not null';\n\nexport type AlertObject = {\n  active?: boolean;\n  creation_method?: string;\n  chart?: MetaObject;\n  changed_by?: user;\n  changed_on_delta_humanized?: string;\n  chart_id: number;\n  created_by?: user;\n  created_on?: string;\n  crontab?: string;\n  custom_width?: number | null;\n  dashboard?: MetaObject;\n  dashboard_id?: number;\n  database?: MetaObject;\n  description?: string;\n  email_subject?: string;\n  error?: string;\n  force_screenshot: boolean;\n  grace_period?: number;\n  id: number;\n  last_eval_dttm?: number;\n  last_state?: 'Success' | 'Working' | 'Error' | 'Not triggered' | 'On Grace';\n  log_retention?: number;\n  name?: string;\n  owners?: Array<Owner | MetaObject>;\n  sql?: string;\n  timezone?: string;\n  recipients?: Array<Recipient>;\n  report_format?: NotificationFormats;\n  type?: string;\n  validator_config_json?: {\n    op?: Operator;\n    threshold?: number;\n  };\n  validator_type?: string;\n  working_timeout?: number;\n};\n\nexport type LogObject = {\n  end_dttm: string;\n  error_message: string;\n  id: number;\n  scheduled_dttm: string;\n  start_dttm: string;\n  state: string;\n  value: string;\n  uuid: string;\n};\n\nexport enum AlertState {\n  Success = 'Success',\n  Working = 'Working',\n  Error = 'Error',\n  Noop = 'Not triggered',\n  Grace = 'On Grace',\n}\n\nexport enum RecipientIconName {\n  Email = 'Email',\n  Slack = 'Slack',\n  SlackV2 = 'SlackV2',\n}\nexport interface AlertsReportsConfig {\n  ALERT_REPORTS_DEFAULT_WORKING_TIMEOUT: number;\n  ALERT_REPORTS_DEFAULT_RETENTION: number;\n  ALERT_REPORTS_DEFAULT_CRON_VALUE: string;\n}\n\nexport type SectionValidationObject = {\n  hasErrors: boolean;\n  errors: string[];\n  name: string;\n};\n\nexport interface ValidationObject {\n  [key: string]: SectionValidationObject;\n}\n\nexport enum Sections {\n  General = 'generalSection',\n  Content = 'contentSection',\n  Alert = 'alertConditionSection',\n  Schedule = 'scheduleSection',\n  Notification = 'notificationSection',\n}\n"],"names":["propTypes","name","PropTypes","onChange","initialValue","height","minLines","maxLines","offerEditInModal","language","aboveEditorSection","readOnly","resize","textAreaStyles","TextAreaControl","Component","onControlChange","event","value","target","this","props","onAreaEditorChange","renderEditor","inModal","style","border","theme","colors","grayscale","light1","minHeight","width","backgroundColor","_jsx","TextAreaEditor","mode","editorProps","$blockScrolling","defaultValue","bind","TextArea","placeholder","t","disabled","renderModalBody","_jsxs","_Fragment","children","render","controlHeader","ControlHeader","ModalTrigger","modalTitle","triggerNode","Button","buttonSize","className","modalBody","responsive","defaultProps","withTheme","LOCALE","everyText","emptyMonths","emptyMonthDays","emptyMonthDaysShort","emptyWeekDays","emptyWeekDaysShort","emptyHours","emptyMinutes","emptyMinutesForHourPeriod","yearOption","monthOption","weekOption","dayOption","hourOption","minuteOption","rebootOption","prefixPeriod","prefixMonths","prefixMonthDays","prefixWeekDays","prefixWeekDaysForMonthAndYearPeriod","prefixHours","prefixMinutes","prefixMinutesForHourPeriod","suffixMinutesForHourPeriod","errorInvalidCron","clearButtonText","weekDays","months","altWeekDays","altMonths","CronPicker","styled","ConfigProvider","getPopupContainer","trigger","parentElement","ReactCronPicker","locale","gridUnit","StyledDiv","div","base","DescriptionContainer","DeleteModal","description","onConfirm","onHide","open","title","disableChange","setDisableChange","useState","confirmation","setConfirmation","confirm","Modal","disablePrimaryButton","hide","onHandledPrimaryAction","primaryButtonName","primaryButtonType","show","FormLabel","htmlFor","Input","type","id","autoComplete","_event$target$value","targetValue","toUpperCase","onPressEnter","forwardRef","ref","showModal","setShowModal","beforeOpen","onExit","isButton","resizable","draggable","tooltip","modalFooter","destroyOnClose","draggableConfig","resizableConfig","maxWidth","close","e","preventDefault","current","onClick","role","footer","hideFooter","DEFAULT_TIMEZONE","MIN_SELECT_WIDTH","offsetsToName","currentDate","moment","JANUARY","JULY","getOffsetKey","tz","utcOffset","toString","getTimezoneName","_offsetsToName$offset","_offsetsToName$offset2","offsets","isDST","ALL_ZONES","countries","map","country","zonesForCountry","flat","TIMEZONES","forEach","zone","find","option","push","TIMEZONE_OPTIONS","label","format","timezoneName","TIMEZONE_OPTIONS_SORT_COMPARATOR","a","b","sort","matchTimezoneToOptions","timezone","_TIMEZONE_OPTIONS$fin","TimezoneSelector","onTimezoneChange","minWidth","validTimezone","useMemo","guess","useEffect","Select","ariaLabel","css","_css","options","sortComparator","iconStyles","validationErrors","renderTrigger","rightNode","leftNode","hovered","tooltipOnClick","warning","danger","useTheme","hasHadNoErrors","useRef","labelColor","length","error","alert","tabIndex","cursor","Tooltip","placement","Icons","AlertSolid","iconColor","iconSize","ErrorSolid","join","ExclamationCircleOutlined","InfoCircleOutlined","InfoTooltipWithTrigger","icon","NumberInput","timeUnit","min","isFocused","setIsFocused","onFocus","onBlur","ScheduleType","SCHEDULE_TYPE_OPTIONS","Picker","AlertReportCronScheduler","inputRef","scheduleFormat","setScheduleFormat","customSetValue","useCallback","newValue","_inputRef$current","setValue","handleBlur","handlePressEnter","_inputRef$current2","input","onError","StyledInputContainer","borderColor","clearButton","displayError","StyledNotificationMethod","typography","sizes","s","primary","dark1","TRANSLATIONS","EMAIL_CC_NAME","EMAIL_BCC_NAME","EMAIL_SUBJECT_NAME","EMAIL_SUBJECT_ERROR_TEXT","NotificationMethod","setting","index","onUpdate","onRemove","onInputChange","email_subject","defaultSubject","setErrorSubject","method","recipients","cc","bcc","recipientValue","setRecipientValue","slackRecipients","setSlackRecipients","setError","ccVisible","setCcVisible","bccVisible","setBccVisible","ccValue","setCcValue","bccValue","setBccValue","slackOptions","setSlackOptions","useSlackV1","setUseSlackV1","onMethodChange","selected","updatedSetting","_slackOptions$","NotificationMethodOption","Slack","SlackV2","includes","async","searchString","types","exactMatch","endpoint","rison","SupersetClient","get","fetchSlackChannels","then","json","result","mapChannelsToOptions","publicChannels","privateChannels","channel","is_private","is_member","key","isFeatureEnabled","FeatureFlag","AlertReportSlackV2","publicOptions","privateOptions","mapSlackValues","prop","split","recipient","trim","toLowerCase","filter","val","catch","methodOptions","Email","labelInValue","showSearch","Trash","undefined","hasError","color","fontSize","obj","allowClear","allowSelectAll","display","ValidatedPanelHeader","subtitle","validateCheckStatus","testId","checkmark","CheckCircleOutlined","AntdCollapse","Panel","antdPanelStyles","anticonHeight","weights","bold","normal","success","StyledList","ul","TEXT_BASED_VISUALIZATION_TYPES","EMAIL_REGEX","DEFAULT_NOTIFICATION_METHODS","DEFAULT_NOTIFICATION_FORMAT","CONDITIONS","RETENTION_OPTIONS","CONTENT_TYPE_OPTIONS","FORMAT_OPTIONS","pdf","png","csv","txt","noMarginBottom","StyledModal","StyledSwitchContainer","light2","StyledCheckbox","AntdCheckbox","StyledTooltip","StyledNotificationAddButton","StyledNotificationMethodWrapper","inputSpacer","GENERAL_TITLE","ALERT_CONDITION_TITLE","ALERT_CONTENTS_TITLE","REPORT_CONTENTS_TITLE","SCHEDULE_TITLE","NOTIFICATION_TITLE","NAME_ERROR_TEXT","OWNERS_ERROR_TEXT","CONTENT_ERROR_TEXT","DATABASE_ERROR_TEXT","SQL_ERROR_TEXT","ALERT_CONDITION_ERROR_TEXT","CRONTAB_ERROR_TEXT","WORKING_TIMEOUT_ERROR_TEXT","RECIPIENTS_ERROR_TEXT","EMAIL_VALIDATION_ERROR_TEXT","ERROR_TOOLTIP_MESSAGE","NotificationMethodAdd","status","checkStatus","withToasts","AlertReportModal","addDangerToast","onAdd","isReport","addSuccessToast","_currentAlert$databas2","_currentAlert$databas3","_currentAlert$validat5","_currentAlert$validat6","_currentAlert$chart4","_currentAlert$chart5","_currentAlert$dashboa4","_currentAlert$dashboa5","currentUser","useSelector","state","user","conf","useCommonConf","allowedNotificationMethods","ALERT_REPORTS_NOTIFICATION_METHODS","disableSave","setDisableSave","currentAlert","setCurrentAlert","isHidden","setIsHidden","contentType","setContentType","reportFormat","setReportFormat","forceScreenshot","setForceScreenshot","isScreenshot","setIsScreenshot","conditionNotNull","setConditionNotNull","sourceOptions","setSourceOptions","dashboardOptions","setDashboardOptions","chartOptions","setChartOptions","validationStatus","setValidationStatus","Sections","General","hasErrors","errors","Content","Alert","Schedule","Notification","errorTooltipMessage","setErrorTooltipMessage","updateValidationStatus","section","currentValidationData","chartVizType","setChartVizType","reportOrAlert","isEditMode","formatOptionEnabled","AlertsAttachReports","notificationAddState","setNotificationAddState","notificationSettings","setNotificationSettings","emailSubject","setEmailSubject","emailError","setEmailError","ALERT_REPORTS_DEFAULT_WORKING_TIMEOUT","ALERT_REPORTS_DEFAULT_CRON_VALUE","ALERT_REPORTS_DEFAULT_RETENTION","_state$common","_conf$ALERT_REPORTS_D","_conf$ALERT_REPORTS_D2","_conf$ALERT_REPORTS_D3","common","defaultAlert","active","creation_method","crontab","log_retention","working_timeout","owners","sql","validator_config_json","validator_type","force_screenshot","grace_period","updateNotificationSetting","settings","_","idx","removeNotificationSetting","slice","splice","loading","resource","fetchError","fetchResource","createResource","updateResource","clearError","useSingleViewResource","loadOwnerOptions","page","pageSize","query","page_size","response","data","item","text","totalCount","count","getSourceData","db","database","source","updateAlertState","currentAlertData","loadSourceOptions","list","databaseLabel","loadDashboardOptions","getDashboardData","dashboard","dash","getChartData","chartData","chart","noChartLabel","loadChartOptions","parsedValue","parseInt","updateEmailSubject","onTimeoutVerifyChange","Math","max","validateAll","validateGeneralSection","_currentAlert$name","_currentAlert$owners","validateContentSection","validateAlertSection","_currentAlert$sql","_currentAlert$validat3","_currentAlert$validat4","op","threshold","validateScheduleSection","_currentAlert$crontab","validateNotificationSection","checkNotificationSettings","hasInfo","_setting$recipients","checkEmailFormat","validateEmails","emails","every","email","test","_setting$recipients2","userId","firstName","lastName","config","recipient_config_json","JSON","parse","ccTarget","bccTarget","report_format","validatorConfig","viz_type","slice_name","dashboard_title","database_name","owner","first_name","last_name","currentAlertSafe","enforceValidation","some","buildErrorTooltipMessage","sectionErrors","Object","values","sectionTitle","err","allowedNotificationMethodsCount","reduce","accum","nm","_currentAlert$chart2","_currentAlert$chart3","_currentAlert$dashboa2","_currentAlert$dashboa3","handleErrorUpdate","primaryTooltipMessage","onSave","_currentAlert$chart","_currentAlert$dashboa","_currentAlert$databas","shouldEnableForceScreenshot","custom_width","context_markdown","update_id","created_by","last_eval_dttm","last_state","last_value","last_value_row_json","centered","getTitleText","titleText","Collapse","expandIconPosition","defaultActiveKey","accordion","StyledPanel","header","AsyncSelect","Switch","checked","defaultChecked","_currentAlert$validat","_currentAlert$validat2","getChartVisualizationType","InputNumber","newVal","retention","propertyComparator","notificationSetting","i","onNotificationAdd","AlertState","RecipientIconName"],"sourceRoot":""}