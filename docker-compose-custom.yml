x-superset-volumes: &superset-volumes
  # /app/pythonpath_docker will be appended to the PYTHONPATH in the final container
  - ./docker:/app/docker
  - ./superset:/app/superset
  - ./superset-frontend:/app/superset-frontend
  - superset_home:/app/superset_home
  - ./tests:/app/tests

services:
  superset:
      build:
        context: .
        dockerfile: superset.Dockerfile
          #  container_name: superset_app
      command: app-gunicorn
      environment:
        - ADMIN_USERNAME=admin
        - ADMIN_EMAIL=admin@superset.com
        - ADMIN_PASSWORD=admin
          #      deploy:
        #      resources:
        #        limits:
          #          memory: 8192M
            #          cpus: '4'
      ports:
        - '8088'

  db:
    env_file: .env
    image: postgres:14
    container_name: postgres_db
    restart: unless-stopped
    ports:
      - "5432:5432"
    volumes:
      - db_home:/var/lib/postgresql/data
      - ./docker/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d

  redis:
    image: redis:7
    container_name: superset_cache
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis:/data

  superset-websocket:
    container_name: superset_websocket
    build: ./superset-websocket
    image: superset-websocket
    ports:
      - 8080:8080
    depends_on:
      - redis
    # Mount everything in superset-websocket into container and
    # then exclude node_modules and dist with bogus volume mount.
    # This is necessary because host and container need to have
    # their own, separate versions of these files. .dockerignore
    # does not seem to work when starting the service through
    # docker compose.
    #
    # For example, node_modules may contain libs with native bindings.
    # Those bindings need to be compiled for each OS and the container
    # OS is not necessarily the same as host OS.
    volumes:
      - ./superset-websocket:/home/superset-websocket
      - /home/superset-websocket/node_modules
      - /home/superset-websocket/dist
    environment:
      - PORT=8080
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_SSL=false

  superset-worker:
    build:
      context: .
      dockerfile: superset.Dockerfile
        #container_name: superset_worker
    command: worker
    env_file: .env
    restart: unless-stopped
    depends_on:
      - superset
      - db
      - redis
    user: root
    healthcheck:
      test: ["CMD-SHELL", "celery -A superset.tasks.celery_app:app inspect ping -d celery@$$HOSTNAME"]
    environment:
      - SUPERSET_CONFIG_PATH=/app/superset_config.py

  superset-worker-beat:
    build:
      context: .
      dockerfile: superset.Dockerfile
    container_name: superset_worker_beat
    command: beat
    env_file: .env
    restart: unless-stopped
    depends_on:
      - superset
      - db
      - redis
    user: root
    healthcheck:
      disable: true
    environment:
      - SUPERSET_CONFIG_PATH=/app/superset_config.py

  nginx:
    image: nginx:latest
    container_name: nginx_proxy
    ports:
      - "8088:8088"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
    depends_on:
      - superset
    restart: unless-stopped

  flower:
    build:
      context: .
      dockerfile: superset.Dockerfile
    container_name: superset-flower
    command: flower
    ports:
      - "5555:5555"
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0  # e.g., redis://redis:6379/0 or amqp://rabbitmq:5672
    depends_on:
      - redis  # or rabbitmq, depending on your broker
      - superset-worker  # if you have a worker service

volumes:
  superset_home:
    external: false
  db_home:
    external: false
    driver: local
  redis:
    external: false

